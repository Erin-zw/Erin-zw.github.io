<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Tue, 07 Nov 2023 03:22:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SAM_Med2D</title>
      <link>http://example.com/2023/11/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87/SAM_Med2D/</link>
      <guid>http://example.com/2023/11/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87/SAM_Med2D/</guid>
      <pubDate>Sat, 04 Nov 2023 10:41:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;如何微调&quot;&gt;&lt;a href=&quot;#如何微调&quot; class=&quot;headerlink&quot; title=&quot;如何微调&quot;&gt;&lt;/a&gt;如何微调&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="如何微调"><a href="#如何微调" class="headerlink" title="如何微调"></a>如何微调</h3><ul><li><p>收集并策划了一个医学图像分割数据集，该数据集包括超过460万个图像和1970万个掩模，使用了最大的医学影像分割数据集。</p></li><li><p>交互式分割采用了不同的提示模式：边界框提示，点提示，掩码提示。</p></li></ul><p><img src="/images/深度学习论文/SAM_Med2D/1.png" style="zoom:67%;"></p><ul><li>采用Adapter作为SAM大模型的微调策略。不需要重新训练整个模型，SAM原始知识不会忘记。是一种即插即用的组件。</li></ul><h3 id="如何评估模型表现"><a href="#如何评估模型表现" class="headerlink" title="如何评估模型表现"></a>如何评估模型表现</h3><ul><li><p>数据多样化：CT,MR,X-Ray,不同器官，多种病理条件，例如肿瘤，发炎。</p></li><li><p>微调策略：将SAM_Med2D和其他策略或者模型进行比较。</p></li><li>泛化能力：使用9个MICCAI2023数据集进行泛化能力测试。</li></ul><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><ul><li>LVM:SegGPT,SEEM,CLIP,DALLE</li><li>MIA（Medical Image Analysis）领域对SAM微调</li><li>SAM在医学图像上的零样本分割评估</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="将医学知识融入SAM"><a href="#将医学知识融入SAM" class="headerlink" title="将医学知识融入SAM"></a>将医学知识融入SAM</h3><p><img src="/images/深度学习论文/SAM_Med2D/2.png" style="zoom:67%;"></p><p>收集并整理了迄今为止最大的医学图像分割数据集。该数据集由众多公共和私人数据集组成，确保了全面覆盖和多样性。</p><ul><li>图3（b）说明了数据集的10种不同成像模式及其相应的数据比例。为了增强视觉呈现，使用对数缩放来可视化数量上的差异。</li><li>图3（c）根据解剖结构和病变的存在，将数据集分为头颈部、胸部、腹部、骨盆和病变</li><li>图3（a）对这些数据集中271个标签中的31个主要器官进行了整理和合并</li></ul><p>对于3D数据集，将每个体积的强度值归一化到范围[0，255]，并提取沿x、y和z轴的所有切片图像及其对应的掩模。在提取过程中，丢弃最短边缘小于最长边缘长度一半的切片图像，以防止在调整具有大宽高比的图像时目标区域变得极其模糊。</p><p>对于2D数据集，只检查像素值是否在[0，255]范围内，并且所有处理的图像都以PNG格式保存，以保持数据加载的一致性。其次，当一个掩码包含多个类时，我们生成了多个掩码，每个掩码只包含一个类。我们还将具有多个连接组件（例如，左肺和右肺）的掩码拆分为具有单个连接组件的多个掩码。如果存在多个器官，并且只包含一个连接的成分，保留掩码以增加数据多样性。最后，排除了目标区域占总图像的0.153%（100/256×256）以下的掩模，这意味着当图像大小调整为256×256时，其目标区域必须超过100个像素。</p><p>获得了大约460万张图像和1970万个掩模。根据图像指数随机划分80%的数据用于训练，20%用于测试。训练集包括大约367万张图像和1580万个掩模，而测试集包含92万张图像，390万个掩码。还介绍了9个MICCAI2023数据集（包括约52万个图像和131万个掩模），这些数据集仅用于验证模型的泛化能力。</p><h3 id="从SAM迁移到SAM-Med2D"><a href="#从SAM迁移到SAM-Med2D" class="headerlink" title="从SAM迁移到SAM_Med2D"></a>从SAM迁移到SAM_Med2D</h3><p>SAM组成：大规模图像编码器（ViT），一个提示编码器，一个轻量级掩码解码器。图像编码器利用预训练的ViT处理高分辨率输入，将输入原始图像转换成1/16比例的特征图，提示编码器包括稀疏提示和密集提示，将点、边界框或文本映射到256维向量并在每个级别使用GELU激活函数对密集提示应用卷积下采样。掩码解码器从两个编码器接收嵌入信息，并通过交叉注意力机制更新图像嵌入和提示嵌入。</p><p><img src="/images/深度学习论文/SAM_Med2D/3.png" style="zoom:67%;"></p><h4 id="适配图像编码器-Adapting-Image-Encoder"><a href="#适配图像编码器-Adapting-Image-Encoder" class="headerlink" title="适配图像编码器(Adapting Image Encoder)"></a>适配图像编码器(Adapting Image Encoder)</h4><p>在微调期间全局更新图像编码器会产生显著的计算成本。具体来说，在微调期间冻结原始图像编码器的所有参数，并为每个Transformer块部署一个适配器。沿着通道和空间维度调整图像编码器。对于通道维度，我们首先使用全局平均池化将输入特征图的分辨率压缩为C×1×1。然后，我们使用一个线性层来压缩通道嵌入，并使用另一个线性图层来恢复它们，压缩比为0.25。最后，我们通过sigmoid函数获得通道维度的权重，并将其与输入特征图相乘，作为下一级的输入。对于空间维度，我们使用卷积层将特征图的空间分辨率下采样2倍，并使用转置卷积恢复空间分辨率，保持与输入相同的通道数量。在每个适配器层之后添加一个跳跃连接。</p><h4 id="提示编码器和掩模解码器"><a href="#提示编码器和掩模解码器" class="headerlink" title="提示编码器和掩模解码器"></a>提示编码器和掩模解码器</h4><p>分为稀疏提示（点提示，边界框提示），稠密提示（掩码提示）。</p><p>对于稀疏提示，每个点都表示为其位置编码的向量嵌入以及指示其前景或背景位置的两个学习嵌入的总和。每个边界框使用其左上角和右下角的位置编码，以及将“左上角”和“右下角”表示为向量嵌入的学习嵌入。</p><p>对于密集提示，使用模型第一次迭代后生成的低分辨率特征图作为掩码提示，应用两个卷积嵌入，将输入掩码的规模减少 4 倍，输出通道为 原始输入的1/4和 1/16。最后，使用1×1卷积将通道维度映射到256。</p><p>没有对掩码解码器结构进行任何更改，并在训练过程中不断更新其参数。在反向传播中使用IoU分数进行损失计算。采用 SAM 的训练策略，在最后一次迭代和一次随机中间迭代中，只提供密集提示来鼓励模型从提供的掩模中受益。</p><h4 id="微调策略"><a href="#微调策略" class="headerlink" title="微调策略"></a>微调策略</h4><p>对于每批数据，迭代训练模型 9 次。在第一次迭代中，以相等的概率随机选择一个前景点或边界框作为稀疏提示。前景点是从真实情况中采样的，边界框是真实情况的最大外接矩形，每个坐标最多偏移五个像素。值得注意的是，除了第一次迭代同时更新Adapter层、提示编码器和掩码解码器的参数外，后续迭代仅更新掩码解码器的参数。第二次迭代开始，从之前的掩模预测与真实值之间的误差区域中随机选择1、3、5或9个点作为后续的稀疏提示，允许用户进行单点或多点交互式分割。</p><h3 id="评估SAM-Med2D"><a href="#评估SAM-Med2D" class="headerlink" title="评估SAM_Med2D"></a>评估SAM_Med2D</h3><p>以SAM为基本模型，从其交互方式中选择Bbox和Points两种直观的提示模式来评估SAM-Med2D。</p><p><strong>多模态：</strong>评估 SAM-Med2D 在 10 种不同模式的医学图像上的性能，包括 MRI、CT、超声等。这种全面的评估将使我们能够了解 SAM-Med2D 在特定模态下的优势和挑战，并揭示其在多模态图像中的潜在应用能力。评估 SAM-Med2D 在 10 种不同模式的医学图像上的性能，包括 MRI、CT、超声等。这种全面的评估将使我们能够了解 SAM-Med2D 在特定模态下的优势和挑战，并揭示其在多模态图像中的潜在应用能力。</p><p><strong>不同器官以及解剖结构：</strong>考虑到不同的解剖结构和器官具有独特的形态、特征和变异模式，对 4 个解剖结构和 31 个主要器官进行了 SAM-Med2D 评估。此类评估有助于深入了解 SAM-Med2D 在不同场景下的性能差异，并进行有针对性的改进，以应对特定结构和器官的挑战。</p><p><strong>泛化能力：</strong>在 9 个 MICCAI 2023 数据集上对其进行测试。</p><h2 id="实验以及评估"><a href="#实验以及评估" class="headerlink" title="实验以及评估"></a>实验以及评估</h2><h3 id="实验细节"><a href="#实验细节" class="headerlink" title="实验细节"></a>实验细节</h3><p>8个A100GPU，每个80GB显存进行训练。初始学习率1e-4，12个轮次，在第七和第十轮次，学习率除2。训练过程中，图像重新调整为256*256，对于长宽都小于256的，用0进行填充边界，其他情况下使用双线性插值。每一幅图像随机选取5个相对应的掩码。如果可用掩码较少，随机重复样本。每个GPU处理50个图像以及对应的250个掩码，掩码预测损失函数是focal损失和dice损失的线性组合，组合系数是20：1。使用IoU预测和带有真实掩码的预测掩码之间的均方损失函数进行训练。最后使用Dice分数评估分割结果。</p><h3 id="定量评估"><a href="#定量评估" class="headerlink" title="定量评估"></a>定量评估</h3><h4 id="总体表现"><a href="#总体表现" class="headerlink" title="总体表现"></a>总体表现</h4><p><img src="/images/深度学习论文/SAM_Med2D/4.png" style="zoom:67%;"></p><p>1024*1024的分辨率不如微调策略。随着点提示增加，dice分数超过边界框提示。证明了点提示的可行性。</p><h4 id="不同解剖结构的表现"><a href="#不同解剖结构的表现" class="headerlink" title="不同解剖结构的表现"></a>不同解剖结构的表现</h4><p>不同模型和分辨率在HN，Tx，Abd，Pl其他区域的表现。主要关注边界框提示以及1-点提示的表现。</p><p><img src="/images/深度学习论文/SAM_Med2D/5.png" style="zoom:67%;"></p><p>图a中左侧为Box预测对比，右为point预测对比。在Bbox提示中，1024<em>1024SAM在Tx, Abd和其他区域表现得比FT-SAM好，但在H&amp;N区域表现略差，这可能是因为H&amp;N区域的病变和器官区域相对较小，并且更少的清晰边界。SAM_Med2D表现的非常好。而在点提示中，FT-SAM表现得比1024\</em>1024SAM更好，这是因为微调SAM从数据集中在目标区域学习到了点的位置关系。</p><p>SAM_Med2D表现得很好除了H&amp;N区域，这表明还需要更好的改进措施。</p><h4 id="不同模态的表现评估"><a href="#不同模态的表现评估" class="headerlink" title="不同模态的表现评估"></a>不同模态的表现评估</h4><p>如图（b）所示所有四种方法在皮肤镜检查、内窥镜检查、眼底摄影、组织病理学和显微镜检查中的 Dice 分数均超过 70%。当部署分辨率为 1024×1024 的预测图像时，SAM 在内窥镜、组织病理学和显微镜模式方面优于其他方法。</p><p>这可能是因为：</p><p>（1）这三种模式源自 2D 数据集，由 RGB 图像组成，与自然图像有相似之处。</p><p>（2）用于微调的可用数据量有限，限制了微调方法的性能（如图中红线所示，代表对数变换后的掩模计数）</p><p>（3）较大的图像分辨率可提供更多细节并带来更高的预测性能。</p><p><img src="/images/深度学习论文/SAM_Med2D/6.png" style="zoom:67%;"></p><p>表格内左边的数据是1-点提示的dice分数，括号内是5-点提示分数。据观察，分割性能随着迭代次数的增加而显着提高，并且 SAM 在所有模式中都实现了超过 10% 的改进。可以发现SAM_Med2D在1-点提示时的表现好于其他模型在5-点提示的表现。</p><p>同时注意到，对于组织病理学和显微镜模式，1024 × 1024 分辨率下 SAM 的多点相互作用实际上比单点相互作用表现更差。这可能是因为模型已经根据单点提示做出了最优决策，而旨在纠正分割结果的进一步点提示可能会干扰模型的判断。</p><h4 id="主要器官的表现评估"><a href="#主要器官的表现评估" class="headerlink" title="主要器官的表现评估"></a>主要器官的表现评估</h4><p>图（c）中条形图代表了5-点提示，五角星代表了Bbox提示。SAM-Med2D在24个器官中取得了较高的结果，最大差异达到6.95%。通过观察同一器官在不同提示方式下的实验结果可以看出，5-点提示与Bbox提示的性能差距较小。这一发现表明，当将 SAM 应用到医疗领域时，边界框交互可能不是最有效的方法。</p><h4 id="泛化评估"><a href="#泛化评估" class="headerlink" title="泛化评估"></a>泛化评估</h4><p><img src="/images/深度学习论文/SAM_Med2D/7.png" style="zoom:67%;"></p><p>表格显示SAM在Bbox提示下表现出优异的性能，加权平均Dice为85.35%。然而，其在单点提示下的表现并不令人满意（48.08%）。</p><p>适配器层参数是即插即用的，测试了两种场景：保留和删除适配器层参数。SAM-Med2D 在 Bbox 提示下获得了 81.93% 的 Dice 分数，并且当去除适配器层参数时性能提高了 8.19%。</p><p>SAM 仅在边界框提示下表现出良好的泛化性能，而 SAM-Med2D 在两种提示模式下都实现了更好的泛化性能。</p><h3 id="定性比较"><a href="#定性比较" class="headerlink" title="定性比较"></a>定性比较</h3><p><img src="/images/深度学习论文/SAM_Med2D/8.png" style="zoom:67%;"></p><p>前三行表明SAM-Med2D在不同模态时视觉结果中的边界更清晰并且更接近真实情况。在 1-点提示的情况下，SAM 难以定位目标区域，导致分割结果与预期结果之间存在显着差异。</p><p>最后三行描述了两种模型对肝脏、肺和前列腺器官的分割结果。对于Bbox提示模式，两种方法都可以生成相似质量的掩码。在相同点提示数量的模型中，SAM-Med2D 能够比 SAM 更好地描述目标区域，这意味着 SAM-Med2D 需要更少的交互操作和更少的时间达到想要的结果。</p><p><img src="/images/深度学习论文/SAM_Med2D/9.png" style="zoom:67%;"></p><p>图中显示了合并同一图像内多个目标区域的结果。当目标边界清晰时，SAM 和我们的 SAM-Med2D 之间存在细微的视觉差异。在其他情况下，SAM-Med2D可以实现人眼难以识别的部分的精确分割。</p><h2 id="讨论和总结"><a href="#讨论和总结" class="headerlink" title="讨论和总结"></a>讨论和总结</h2><p>未来需要进一步优化以获得更鲁棒的医学图像分割。从定性分割结果来看，对于复杂形状/边界、小尺寸或低对比度的物体，不同提示模式产生的分割结果仍有改进的空间。未来建立相关的优化策略可能会提高分割结果，例如为不同器官设置窗口宽度以及设计交互式分割的边界损失。除了本文使用的提示策略之外，自然语言可以作为医学图像分割中用户交互的另一种常见形式，但目前缺乏相关数据集。这是我们积极追求的方向，旨在让SAM-Med2D具备医疗领域的自然语言理解能力，满足多样化的用户需求。虽然我们已经在超过 1970 万个掩模上训练了 SAM-Med2D，但与 SAM 的训练数据和分辨率相比仍然存在差距。这导致 SAM-Med2D 可以有效处理常见器官或病变，但缺乏医疗领域的“一切”能力。我们计划通过数据引擎生成更大量、更广泛的高质量掩模，使 SAM-Med2D 能够真正分割所有类型的医学图像。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87/">深度学习论文</category>
      
      
      
      <comments>http://example.com/2023/11/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%BA%E6%96%87/SAM_Med2D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Transformer随记</title>
      <link>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/Transformer%E9%9A%8F%E8%AE%B0/</link>
      <guid>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/Transformer%E9%9A%8F%E8%AE%B0/</guid>
      <pubDate>Sat, 28 Oct 2023 03:30:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/images/深度学习/Transformer/1.png&quot; style=&quot;zoom:67%;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么多头注意力qkv要先经过全连接层&quot;&gt;为什么多头注意力qkv要先经过全连接层&lt;/h2&gt;
&lt;p&gt;全连接层的作用是通过可学习</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/images/深度学习/Transformer/1.png" style="zoom:67%;"></p><h2 id="为什么多头注意力qkv要先经过全连接层">为什么多头注意力qkv要先经过全连接层</h2><p>全连接层的作用是通过可学习的参数来映射输入向量，以适应当前任务和模型结构的需要。这种映射能够增强模型的表达能力，使其能够更好地处理输入信息。在多头自注意力机制中，每个头都可以通过不同的映射来捕获不同的信息，从而提高模型的性能。</p><p>也就是说每一个头是由输入分割而来，每一个头被单独映射可以进行单独学习，增加了模型表达能力。全连接层是一种特征映射。</p><h2 id="自注意力原理">自注意力原理</h2><p>自注意力实际上就是利用点积注意力实现对自身的多头注意力，自注意力（Self-Attention）模型的输出是一组权重，这些权重表示了输入序列中每个位置对其他位置的重要性。</p><h2 id="位置编码作用">位置编码作用</h2><p>在Transformer等注意力机制模型中，位置编码（PositionalEncoding）的目的是为了将序列中的位置信息引入模型，以便模型能够处理序列中元素的顺序和位置信息。注意力机制本身是无法感知序列中元素的位置的，因此需要引入位置编码。</p><p>位置编码是一组特殊的向量，其作用是为输入序列中的每个位置分配不同的编码。这些编码会与嵌入词向量相加，以在嵌入向量中包含位置信息。这个操作允许Transformer模型分辨不同位置的词或标记，从而能够处理具有序列性质的数据，如文本或时间序列。</p><h2 id="transformer前馈网络的作用">Transformer前馈网络的作用</h2><p>前馈网络主要有以下两个作用：</p><ol type="1"><li>特征提取：前馈网络将自注意力机制的输出进行非线性变换，有助于提取更丰富的特征表示。这有助于模型更好地理解和捕捉输入序列中的语义和上下文信息。</li><li>位置感知：前馈网络在自注意力机制之后，它帮助模型更好地处理序列中不同位置的信息。由于自注意力机制在不同位置之间是平凡的，因此前馈网络有助于区分不同位置上的信息，从而更好地捕捉输入序列的位置信息。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/Transformer%E9%9A%8F%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BN和LN</title>
      <link>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/BN%E5%92%8CLN/</link>
      <guid>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/BN%E5%92%8CLN/</guid>
      <pubDate>Sat, 28 Oct 2023 02:16:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;https://blog.csdn.net/weixin_44543648/article/details/124824265&lt;/p&gt;
&lt;p&gt;通俗理解就是，BN是对一个批次内的每一通道数据进行规范化，LN是对一个批次内的每一个样本分别进行规范化，因为LN一般用在NLP，而</description>
        
      
      
      
      <content:encoded><![CDATA[<p>https://blog.csdn.net/weixin_44543648/article/details/124824265</p><p>通俗理解就是，BN是对一个批次内的每一通道数据进行规范化，LN是对一个批次内的每一个样本分别进行规范化，因为LN一般用在NLP，而每一个样本所代表的句子语义是不同的，所以样本单独规范化。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/BN%E5%92%8CLN/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>张量维度操作函数</title>
      <link>http://example.com/2023/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BC%A0%E9%87%8F%E7%BB%B4%E5%BA%A6%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2023/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BC%A0%E9%87%8F%E7%BB%B4%E5%BA%A6%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Thu, 26 Oct 2023 01:44:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;stack和cat&quot;&gt;stack和cat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;torch.stack&lt;/code&gt;:
这个函数会在指定的维度上创建一个新的维度，并将输入张量堆叠到这个新维度上。因此，堆叠后的结果的维度比输入张量多一个。你需要指定
&lt;co</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="stack和cat">stack和cat</h2><ul><li><code>torch.stack</code>:这个函数会在指定的维度上创建一个新的维度，并将输入张量堆叠到这个新维度上。因此，堆叠后的结果的维度比输入张量多一个。你需要指定<code>dim</code> 参数，以确定在哪个维度上堆叠。</li><li><code>torch.cat</code>:这个函数会在指定的维度上将多个输入张量拼接在一起，不会创建新的维度。它会保持输入张量的维度不变，只是在指定的维度上合并。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个示例张量</span></span><br><span class="line">x1 = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x2 = torch.tensor([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 torch.stack 在维度0上堆叠</span></span><br><span class="line">result_stack = torch.stack((x1, x2), dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 torch.cat 在维度0上拼接</span></span><br><span class="line">result_cat = torch.cat((x1, x2), dim=<span class="number">0</span>)<span class="comment">#这里dim=1报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack result:&quot;</span>, result_stack)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cat result:&quot;</span>, result_cat)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="squeeze和unsqueeze">squeeze和unsqueeze</h2><ul><li><p><code>torch.squeeze</code>用于去除张量中大小为1的维度。如果带有参数例如squeeze(-1)会检测最后一个维度是否为1，如果为1则删除这个维度。</p></li><li><p><code>torch.unsqueeze</code>用于在张量的指定位置插入大小为1的新维度。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个具有大小为1的维度的张量</span></span><br><span class="line">x = torch.tensor([[[<span class="number">1</span>, <span class="number">2</span>]]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original shape:&quot;</span>, x.shape)  <span class="comment"># 输出: (1, 1, 2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 torch.squeeze 去除大小为1的维度</span></span><br><span class="line">y = torch.squeeze(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Squeezed shape:&quot;</span>, y.shape)  <span class="comment"># 输出: (2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个张量</span></span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original shape:&quot;</span>, x.shape)  <span class="comment"># 输出: (3,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 torch.unsqueeze 在指定位置插入新维度</span></span><br><span class="line">y = torch.unsqueeze(x, dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Unsqueezed shape:&quot;</span>, y.shape)  <span class="comment"># 输出: (1, 3)</span></span><br></pre></td></tr></table></figure><h2 id="transpose和permute">transpose和permute</h2><ul><li><code>torch.transpose</code>主要用于交换两个维度的位置，即将张量的维度重新排列，但不改变维度的个数。</li><li><code>torch.permute</code>提供了更强大的功能，可以重新排列维度的顺序。可以使用<code>permute</code> 来对维度进行复杂的排列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">y = x.transpose(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># 交换维度 0 和 2</span></span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">y = x.permute(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>)  <span class="comment"># 按顺序重新排列维度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flatten">flatten</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BC%A0%E9%87%8F%E7%BB%B4%E5%BA%A6%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>视差估计</title>
      <link>http://example.com/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/</link>
      <guid>http://example.com/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/</guid>
      <pubDate>Tue, 24 Oct 2023 02:54:15 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;视差估计&quot;&gt;视差估计&lt;/h2&gt;
&lt;p&gt;视差图是以图像对中任一幅图像为基准，其大小为该基准图像的大小，元素值为视差值的图像。由于视差图包含了场景的距离信息，因此从立体图像对中提取视差图的图像匹配非常重要。&lt;/p&gt;
&lt;h2 id=&quot;ncc算法&quot;&gt;NCC算法&lt;/h2</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="视差估计">视差估计</h2><p>视差图是以图像对中任一幅图像为基准，其大小为该基准图像的大小，元素值为视差值的图像。由于视差图包含了场景的距离信息，因此从立体图像对中提取视差图的图像匹配非常重要。</p><h2 id="ncc算法">NCC算法</h2><h3 id="简介">简介</h3><p>归一化相关性(NCC)(normalizationcross-correlation)。顾名思义，就是用于归一化待匹配目标之间的相关程度，注意这里比较的是原始像素。通过在待匹配像素位置<span class="math inline">\(p(p_x,p_y)\)</span>,构建3*3邻域匹配窗口，与目标像素位置<span class="math inline">\(p&#39;(p_x,p_y)\)</span>同样构建邻域匹配窗口的方式建立目标函数来对匹配窗口进行度量相关性，注意这里构建相关窗口的前提是两帧图像之间已经校正到水平位置，即光心处于同一水平线上，此时极线是水平的，否则匹配过程只能在倾斜的极线方向上完成，这将消耗更多的计算资源。</p><h3 id="原理">原理</h3><p>NCC是一种基于统计学计算两组样本数据相关性的算法，其取值范围为[-1,1]之间，而对图像来说，每个像素点都可以看出是RGB数值，这样整幅图像就可以看成是一个样本数据的集合，如果它有一个子集与另外一个样本数据相互匹配则它的ncc值为1，表示相关性很高，如果是-1则表示完全不相关，基于这个原理，实现图像基于模板匹配识别算法，其中第一步就是要归一化数据。NCC计算公式如下所示：<span class="math display">\[NCC(p,d)=\frac{\sum_{(x,y)\epsilonW_p}(I_1(x,y)-\overline{I_1}(p_x,p_y))\cdot(I_2(x+d,y)-\overline{I_2}(p_x+d,p_y))}{\sqrt{\sum_{(x,y)\epsilonW_p}(I_1(x,y)-\overline{I_1}(p_x,p_y))^2\cdot\sum_{(x,y)\epsilonW_p}(I_2(x+d,y)-\overline{I_2}(p_x+d,p_y))^2}}\]</span></p><ul><li>其中NCC(p,d)得到的值得范围将在[-1,1]]之间。</li><li><span class="math inline">\(W_p\)</span>为之前提到的匹配窗口。</li><li><span class="math inline">\(I_1(x,y)\)</span>为原始图像的像素值。</li><li><span class="math inline">\(\overline{I_1}(p_x,p_y)\)</span>为原始窗口内像素的均值。</li><li><span class="math inline">\(I_2(x+d,y)\)</span>为原始图像在目标图像上对应点位置在xxx方向上偏移ddd后的像素值。</li><li><span class="math inline">\(\overline{I_2}(p_x+d,p_y)\)</span>为目标图像匹配窗口像素均值。</li><li>若NCC=-1,则表示两个匹配窗口完全不相关，相反，若NCC=1时，表示两个匹配窗口相关程度非常高。</li></ul><h2 id="匹配流程">匹配流程</h2><h3 id="采集图像">采集图像</h3><p>通过标定好的双目相机采集图像，也可以用两个单目相机来组合成双目相机。本次实验选用https://vision.middlebury.edu/stereo/data/网站的数据集</p><h3 id="极线校正">极线校正</h3><p>校正的目的是使两帧图像极线处于水平方向，或者说是使两帧图像的光心处于同一水平线上。通过校正极线可以方便后续的NCC操作。</p><p>由标定得到的内参中畸变信息中可以对图像去除畸变。通过校正函数校正以后得到相机的矫正变换R和新的投影矩阵P，接下来是要对左右视图进行去畸变，并得到重映射矩阵。</p><h3 id="特征匹配">特征匹配</h3><p>匹配方法如上所述，右视图中与左视图待测像素同一水平线上相关性最高的即为最优匹配。完成匹配后，我们需要记录其视差d，即待测像素水平方向xl与匹配像素水平方向xr之间的差值d=xr−xl，最终我们可以得到一个与原始图像尺寸相同的视差图D。</p><h3 id="深度恢复">深度恢复</h3><p>通过上述匹配结果得到的视差图D，我们可以很简单的利用相似三角形反推出以左视图为参考系的深度图。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> scipy.ndimage <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plane_sweep_ncc</span>(<span class="params">im_l, im_r, start, steps, wid</span>):</span></span><br><span class="line">    <span class="comment"># 使用归一化的互相关计算视差图像 &quot;&quot;&quot;</span></span><br><span class="line">    m, n = im_l.shape</span><br><span class="line">    <span class="comment"># 保存不同求和值的数组</span></span><br><span class="line">    mean_l = zeros((m, n))</span><br><span class="line">    mean_r = zeros((m, n))</span><br><span class="line">    s = zeros((m, n))</span><br><span class="line">    s_l = zeros((m, n))</span><br><span class="line">    s_r = zeros((m, n))</span><br><span class="line">    <span class="comment"># 保存深度平面的数组</span></span><br><span class="line">    dmaps = zeros((m, n, steps))</span><br><span class="line">    <span class="comment"># 计算图像块的平均值</span></span><br><span class="line">    filters.uniform_filter(im_l, wid, mean_l)</span><br><span class="line">    filters.uniform_filter(im_r, wid, mean_r)</span><br><span class="line">    <span class="comment"># 归一化图像</span></span><br><span class="line">    norm_l = im_l - mean_l</span><br><span class="line">    norm_r = im_r - mean_r</span><br><span class="line">    <span class="comment"># 尝试不同的视差</span></span><br><span class="line">    <span class="keyword">for</span> displ <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        <span class="comment"># 将左边图像移动到右边，计算加和</span></span><br><span class="line">        filters.uniform_filter(roll(norm_l, -displ - start) * norm_r, wid, s)  <span class="comment"># 和归一化</span></span><br><span class="line">        filters.uniform_filter(roll(norm_l, -displ - start) * roll(norm_l, -displ - start), wid, s_l)</span><br><span class="line">        filters.uniform_filter(norm_r * norm_r, wid, s_r)  <span class="comment"># 和反归一化</span></span><br><span class="line">        <span class="comment"># 保存 ncc 的分数</span></span><br><span class="line">        dmaps[:, :, displ] = s / sqrt(s_l * s_r)</span><br><span class="line">    <span class="comment"># 为每个像素选取最佳深度</span></span><br><span class="line">    <span class="keyword">return</span> argmax(dmaps, axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">im_l = array(Image.<span class="built_in">open</span>(<span class="string">&#x27;D:\Py docu\cv2\image\im2.png&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>), <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">im_r = array(Image.<span class="built_in">open</span>(<span class="string">&#x27;D:\Py docu\cv2\image\im6.png&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>), <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"><span class="comment"># 开始偏移，并设置步长</span></span><br><span class="line">steps = <span class="number">50</span></span><br><span class="line">start = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ncc 的宽度</span></span><br><span class="line">wid = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">res = plane_sweep_ncc(im_l, im_r, start, steps, wid)</span><br><span class="line"></span><br><span class="line">imsave(<span class="string">&#x27;depth20.png&#x27;</span>, res)</span><br></pre></td></tr></table></figure><h2 id="实验结果">实验结果</h2><h3 id="原图像">原图像</h3><p><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\image\im2.png" alt="im2" style="zoom:67%;"><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\image\im6.png" alt="im6" style="zoom: 67%;"></p><h3 id="不同的窗口值">不同的窗口值</h3><h4 id="wid35">wid=3，5</h4><p><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\depth3.png" alt="depth3" style="zoom:67%;"><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\depth5.png" alt="depth5" style="zoom:67%;"></p><h4 id="wid81020">wid=8，10，20</h4><p><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\depth8.png" alt="depth8" style="zoom:67%;"><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\depth10.png" alt="depth10" style="zoom:67%;"><img src="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/Py docu\cv2\depth20.png" alt="depth20" style="zoom:67%;"></p><p>随着窗口值增大可以发现上面的判断纹理低的区域错误的匹配基本上得到矫正，但是在信息的细节上越来越模糊.</p><p>从wid=20可以明显看出，图片中的噪声几乎被矫正完，但随之而然的图片细节鲁棒也越来越差。由此可以得出结论。wid值越小图片对噪声越敏感，在低纹理区会出现很多错误匹配，但细节鲁棒好，值越大噪声鲁棒好，错误匹配随之被纠正但细节随之会被忽略掉，导致图片的精度小。</p><p>通过上图实现可以发现，面具表面的细节纹理都没有被算法所体现出来，这是光学失真(光线亮度)所引起的，所以在选取图片时，图片是否光线充足，是否透明，是否重叠都会影响算法的匹配精确度。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/">计算机视觉</category>
      
      
      
      <comments>http://example.com/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E8%A7%86%E5%B7%AE%E4%BC%B0%E8%AE%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>reshape逻辑</title>
      <link>http://example.com/2023/10/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/resnet-fmri/</link>
      <guid>http://example.com/2023/10/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/resnet-fmri/</guid>
      <pubDate>Sun, 15 Oct 2023 13:12:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;使用Resnet对rs-fMRI（静息功能磁共振成像）图像进行阿尔兹海默症多阶段分类。六个阶段：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;CN（Cognitively
Normal）：指的是认知正常</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="abstract">Abstract</h2><p>使用Resnet对rs-fMRI（静息功能磁共振成像）图像进行阿尔兹海默症多阶段分类。六个阶段：</p><ol type="1"><li>CN（CognitivelyNormal）：指的是认知正常的个体，即没有明显的认知功能下降或记忆问题。</li><li>SMC（Subjective MemoryConcerns）：主观记忆担忧，指的是个体自己报告存在记忆问题或担忧，但尚未达到明显的认知下降。</li><li>EMCI（Early Mild CognitiveImpairment）：早期轻度认知功能障碍，是指一些认知功能的下降，但尚未达到明显的认知损害。</li><li>MCI（Mild CognitiveImpairment）：轻度认知功能障碍，表示认知功能明显下降，但尚未满足诊断为阿尔兹海默症的标准。MCI患者可能有轻微的记忆问题，但日常生活能力尚未受到明显影响。</li><li>LMCI（Late Mild CognitiveImpairment）：晚期轻度认知功能障碍，指的是MCI患者在认知功能方面进一步下降，接近阿尔兹海默症的认知损害水平。</li><li>AD（Alzheimer'sDisease）：阿尔兹海默症，是一种慢性神经系统疾病，表现为逐渐恶化的认知功能障碍，包括记忆问题、思维和日常生活能力的丧失。它是一种进行性的神经退行性疾病。</li></ol><h2 id="introduction">Introduction</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/resnet-fmri/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>机翻数据集和Seq2Sseq</title>
      <link>http://example.com/2023/10/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E6%9C%BA%E7%BF%BB%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8CSeq2Sseq/</link>
      <guid>http://example.com/2023/10/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E6%9C%BA%E7%BF%BB%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8CSeq2Sseq/</guid>
      <pubDate>Sat, 14 Oct 2023 03:04:05 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;数据集&quot;&gt;数据集&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="数据集">数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MTFraEng</span>(<span class="params">d2l.DataModule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The English-French dataset.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Defined in :numref:`sec_machine_translation`&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#下载数据集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_download</span>(<span class="params">self</span>):</span></span><br><span class="line">        d2l.extract(d2l.download(</span><br><span class="line">            d2l.DATA_URL+<span class="string">&#x27;fra-eng.zip&#x27;</span>, self.root,</span><br><span class="line">            <span class="string">&#x27;94646ad1522d915e7b0f9296181140edcf86a4f5&#x27;</span>))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.root + <span class="string">&#x27;/fra-eng/fra.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> f.read()</span><br><span class="line"><span class="comment">#预处理文本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_preprocess</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`sec_machine_translation`&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Replace non-breaking space with space</span></span><br><span class="line">        text = text.replace(<span class="string">&#x27;\u202f&#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;\xa0&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># Insert space between words and punctuation marks</span></span><br><span class="line">        no_space = <span class="keyword">lambda</span> char, prev_char: char <span class="keyword">in</span> <span class="string">&#x27;,.!?&#x27;</span> <span class="keyword">and</span> prev_char != <span class="string">&#x27; &#x27;</span></span><br><span class="line">        out = [<span class="string">&#x27; &#x27;</span> + char <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> no_space(char, text[i - <span class="number">1</span>]) <span class="keyword">else</span> char</span><br><span class="line">               <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(text.lower())]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"><span class="comment">#将文本分成两部分，源文本和目标文本。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_tokenize</span>(<span class="params">self, text, max_examples=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`sec_machine_translation`&quot;&quot;&quot;</span></span><br><span class="line">        src, tgt = [], []</span><br><span class="line">        <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(text.split(<span class="string">&#x27;\n&#x27;</span>)):</span><br><span class="line">            <span class="keyword">if</span> max_examples <span class="keyword">and</span> i &gt; max_examples: <span class="keyword">break</span></span><br><span class="line">            parts = line.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(parts) == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># Skip empty tokens</span></span><br><span class="line">                src.append([t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="string">f&#x27;<span class="subst">&#123;parts[<span class="number">0</span>]&#125;</span> &lt;eos&gt;&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>) <span class="keyword">if</span> t])</span><br><span class="line">                tgt.append([t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="string">f&#x27;<span class="subst">&#123;parts[<span class="number">1</span>]&#125;</span> &lt;eos&gt;&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>) <span class="keyword">if</span> t])</span><br><span class="line">        <span class="keyword">return</span> src, tgt</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, batch_size, num_steps=<span class="number">9</span>, num_train=<span class="number">512</span>, num_val=<span class="number">128</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`sec_machine_translation`&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(MTFraEng, self).__init__()</span><br><span class="line">        self.save_hyperparameters()</span><br><span class="line">        self.arrays, self.src_vocab, self.tgt_vocab = self._build_arrays(</span><br><span class="line">            self._download())</span><br><span class="line"><span class="comment">#构造词表，生成源文本序列和目标文本序列（数字标记化）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_arrays</span>(<span class="params">self, raw_text, src_vocab=<span class="literal">None</span>, tgt_vocab=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`subsec_loading-seq-fixed-len`&quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_build_array</span>(<span class="params">sentences, vocab, is_tgt=<span class="literal">False</span></span>):</span></span><br><span class="line">            pad_or_trim = <span class="keyword">lambda</span> seq, t: (</span><br><span class="line">                seq[:t] <span class="keyword">if</span> <span class="built_in">len</span>(seq) &gt; t <span class="keyword">else</span> seq + [<span class="string">&#x27;&lt;pad&gt;&#x27;</span>] * (t - <span class="built_in">len</span>(seq)))</span><br><span class="line">            sentences = [pad_or_trim(s, self.num_steps) <span class="keyword">for</span> s <span class="keyword">in</span> sentences]</span><br><span class="line">            <span class="keyword">if</span> is_tgt:</span><br><span class="line">                sentences = [[<span class="string">&#x27;&lt;bos&gt;&#x27;</span>] + s <span class="keyword">for</span> s <span class="keyword">in</span> sentences]</span><br><span class="line">            <span class="keyword">if</span> vocab <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                vocab = d2l.Vocab(sentences, min_freq=<span class="number">2</span>)</span><br><span class="line">            array = d2l.tensor([vocab[s] <span class="keyword">for</span> s <span class="keyword">in</span> sentences])</span><br><span class="line">            valid_len = d2l.reduce_sum(</span><br><span class="line">                d2l.astype(array != vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>], d2l.int32), <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> array, vocab, valid_len</span><br><span class="line">        src, tgt = self._tokenize(self._preprocess(raw_text),</span><br><span class="line">                                  self.num_train + self.num_val)</span><br><span class="line">        src_array, src_vocab, src_valid_len = _build_array(src, src_vocab)</span><br><span class="line">        tgt_array, tgt_vocab, _ = _build_array(tgt, tgt_vocab, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> ((src_array, tgt_array[:,:-<span class="number">1</span>], src_valid_len, tgt_array[:,<span class="number">1</span>:]),</span><br><span class="line">                src_vocab, tgt_vocab)</span><br><span class="line"><span class="comment">#加载数据集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dataloader</span>(<span class="params">self, train</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`subsec_loading-seq-fixed-len`&quot;&quot;&quot;</span></span><br><span class="line">        idx = <span class="built_in">slice</span>(<span class="number">0</span>, self.num_train) <span class="keyword">if</span> train <span class="keyword">else</span> <span class="built_in">slice</span>(self.num_train, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> self.get_tensorloader(self.arrays, train, idx)</span><br><span class="line"><span class="comment">#构造</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self, src_sentences, tgt_sentences</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Defined in :numref:`subsec_loading-seq-fixed-len`&quot;&quot;&quot;</span></span><br><span class="line">        raw_text = <span class="string">&#x27;\n&#x27;</span>.join([src + <span class="string">&#x27;\t&#x27;</span> + tgt <span class="keyword">for</span> src, tgt <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            src_sentences, tgt_sentences)])</span><br><span class="line">        arrays, _, _ = self._build_arrays(</span><br><span class="line">            raw_text, self.src_vocab, self.tgt_vocab)</span><br><span class="line">        <span class="keyword">return</span> arrays</span><br></pre></td></tr></table></figure><h2 id="seq2seq">Seq2Seq</h2><h3 id="encoder">Encoder</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seq2SeqEncoder</span>(<span class="params">d2l.Encoder</span>):</span>  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The RNN encoder for sequence-to-sequence learning.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#初始化，传入词表尺寸，嵌入尺寸，隐藏单元数量，隐藏层数，drop概率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vocab_size, embed_size, num_hiddens, num_layers,</span></span></span><br><span class="line"><span class="params"><span class="function">                 dropout=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embed_size)<span class="comment">#嵌入层，这一步是首先根据词表的尺寸生成了一个维度为vocab_size*embed_size的向量表</span></span><br><span class="line">        self.rnn = d2l.GRU(embed_size, num_hiddens, num_layers, dropout)<span class="comment">#使用GRU循环神经网络，进行编码</span></span><br><span class="line">        self.apply(init_seq2seq)<span class="comment">#应用初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X, *args</span>):</span><span class="comment">#前向传播函数</span></span><br><span class="line">        <span class="comment"># X shape: (batch_size, num_steps)</span></span><br><span class="line">        embs = self.embedding(X.t().<span class="built_in">type</span>(torch.int64))<span class="comment">#根据向量表生成每一个输入对应的嵌入向量</span></span><br><span class="line">        <span class="comment"># embs shape: (num_steps, batch_size, embed_size)</span></span><br><span class="line">        outputs, state = self.rnn(embs)<span class="comment">#GRU前向传播，生成outputs每个时间步最后的状态输出，state最后是时间步每个隐藏单元层的状态输出，相当于是一个矩形，长是时间步输出，宽是隐藏状态</span></span><br><span class="line">        <span class="comment"># outputs shape: (num_steps, batch_size, num_hiddens)</span></span><br><span class="line">        <span class="comment"># state shape: (num_layers, batch_size, num_hiddens)</span></span><br><span class="line">        <span class="keyword">return</span> outputs, state</span><br></pre></td></tr></table></figure><h3 id="decoder">Decoder</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seq2SeqDecoder</span>(<span class="params">d2l.Decoder</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The RNN decoder for sequence to sequence learning.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vocab_size, embed_size, num_hiddens, num_layers,</span></span></span><br><span class="line"><span class="params"><span class="function">                 dropout=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">        self.rnn = d2l.GRU(embed_size+num_hiddens, num_hiddens,</span><br><span class="line">                           num_layers, dropout)</span><br><span class="line">        self.dense = nn.LazyLinear(vocab_size)</span><br><span class="line">        self.apply(init_seq2seq)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_state</span>(<span class="params">self, enc_all_outputs, *args</span>):</span></span><br><span class="line">        <span class="keyword">return</span> enc_all_outputs</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X, state</span>):</span><span class="comment">#输入tgt[:,:-1]，以及编码层输出，即outputs和state</span></span><br><span class="line">        <span class="comment"># X shape: (batch_size, num_steps)</span></span><br><span class="line">        <span class="comment"># embs shape: (num_steps, batch_size, embed_size)</span></span><br><span class="line">        embs = self.embedding(X.t().<span class="built_in">type</span>(torch.int32))<span class="comment">#嵌入转换</span></span><br><span class="line">        enc_output, hidden_state = state<span class="comment">#每一个时间步的最终输出状态作为enc_output，最后一个时间步的所有隐藏单元状态作为下一个GRU的初始状态</span></span><br><span class="line">        <span class="comment"># context shape: (batch_size, num_hiddens)</span></span><br><span class="line">        context = enc_output[-<span class="number">1</span>]<span class="comment">#取最后一个时间步的输出作为上下文</span></span><br><span class="line">        <span class="comment"># Broadcast context to (num_steps, batch_size, num_hiddens)</span></span><br><span class="line">        context = context.repeat(embs.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">1</span>)<span class="comment">#维度扩展</span></span><br><span class="line">        <span class="comment"># Concat at the feature dimension</span></span><br><span class="line">        embs_and_context = torch.cat((embs, context), -<span class="number">1</span>)<span class="comment">#连接上下文和输入变量</span></span><br><span class="line">        outputs, hidden_state = self.rnn(embs_and_context, hidden_state)<span class="comment">#编码GRU前向传播</span></span><br><span class="line">        outputs = self.dense(outputs).swapaxes(<span class="number">0</span>, <span class="number">1</span>)<span class="comment">#全连接层将隐藏状态转换为尺寸为vocab_size的输出以便进行损失函数计算</span></span><br><span class="line">        <span class="comment"># outputs shape: (batch_size, num_steps, vocab_size)</span></span><br><span class="line">        <span class="comment"># hidden_state shape: (num_layers, batch_size, num_hiddens)</span></span><br><span class="line">        <span class="keyword">return</span> outputs, [enc_output, hidden_state]</span><br></pre></td></tr></table></figure><h3 id="整合">整合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderDecoder</span>(<span class="params">d2l.Classifier</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The base class for the encoder--decoder architecture.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Defined in :numref:`sec_encoder-decoder`&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, encoder, decoder</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, enc_X, dec_X, *args</span>):</span><span class="comment">#前向传播函数，符合下面的图</span></span><br><span class="line">        enc_all_outputs = self.encoder(enc_X, *args)<span class="comment">#编码输出</span></span><br><span class="line">        dec_state = self.decoder.init_state(enc_all_outputs, *args)<span class="comment">#解码初始状态</span></span><br><span class="line">        <span class="comment"># Return decoder output only</span></span><br><span class="line">        <span class="keyword">return</span> self.decoder(dec_X, dec_state)[<span class="number">0</span>]<span class="comment">#解码输出</span></span><br></pre></td></tr></table></figure><p><img src="/images/深度学习/s2s/1.svg" style="zoom:67%;"></p><h3 id="训练">训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data = d2l.MTFraEng(batch_size=<span class="number">128</span>)<span class="comment">#数据集</span></span><br><span class="line">embed_size, num_hiddens, num_layers, dropout = <span class="number">256</span>, <span class="number">256</span>, <span class="number">2</span>, <span class="number">0.2</span><span class="comment">#参数</span></span><br><span class="line">encoder = Seq2SeqEncoder(</span><br><span class="line">    <span class="built_in">len</span>(data.src_vocab), embed_size, num_hiddens, num_layers, dropout)<span class="comment">#编码器</span></span><br><span class="line">decoder = Seq2SeqDecoder(</span><br><span class="line">    <span class="built_in">len</span>(data.tgt_vocab), embed_size, num_hiddens, num_layers, dropout)<span class="comment">#解码器</span></span><br><span class="line">model = Seq2Seq(encoder, decoder, tgt_pad=data.tgt_vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>],<span class="comment">#模型</span></span><br><span class="line">                lr=<span class="number">0.005</span>)</span><br><span class="line">trainer = d2l.Trainer(max_epochs=<span class="number">30</span>, gradient_clip_val=<span class="number">1</span>, num_gpus=<span class="number">1</span>)</span><br><span class="line">trainer.fit(model, data)</span><br><span class="line"></span><br><span class="line">d2l.plt.show()</span><br></pre></td></tr></table></figure><p><strong>训练分析：</strong></p><p>解码器输出是一个形状为(batch_size, num_steps,vocab_size)的输出，这个输出和形状为(batch_size, num_steps,1)的target进行交叉熵损失函数计算损失，然后进行梯度反向传播优化模型</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E6%9C%BA%E7%BF%BB%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8CSeq2Sseq/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RNN</title>
      <link>http://example.com/2023/10/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/RNN/</link>
      <guid>http://example.com/2023/10/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/RNN/</guid>
      <pubDate>Mon, 09 Oct 2023 09:06:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;原理流程&quot;&gt;原理流程&lt;/h2&gt;
&lt;p&gt;这篇文章我们从后向前分析：&lt;/p&gt;
&lt;p&gt;以下是训练过程：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="原理流程">原理流程</h2><p>这篇文章我们从后向前分析：</p><p>以下是训练过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = d2l.TimeMachine(batch_size=<span class="number">1024</span>, num_steps=<span class="number">32</span>)<span class="comment">#数据集</span></span><br><span class="line">rnn = RNNScratch(num_inputs=<span class="built_in">len</span>(data.vocab), num_hiddens=<span class="number">32</span>)<span class="comment">#rnn模型</span></span><br><span class="line">model = RNNLMScratch(rnn, vocab_size=<span class="built_in">len</span>(data.vocab), lr=<span class="number">1</span>)<span class="comment">#语言模型</span></span><br><span class="line">trainer = d2l.Trainer(max_epochs=<span class="number">100</span>, gradient_clip_val=<span class="number">1</span>, num_gpus=<span class="number">1</span>)<span class="comment">#训练器</span></span><br><span class="line">trainer.fit(model, data)<span class="comment">#训练</span></span><br></pre></td></tr></table></figure><p><strong>1.</strong>在训练过程中，我们首先调用了d2l.TimeMachine数据集，这个数据集是我们自建的，简要建立过程如下：每一个X代表了一个字母。输入表的行数就是num_steps，列数就是数据集大小。并且数据集还将出现的字母和空格还有未知编成了一个vocab表以便索引和编码，所以实际上X是不同的数字，范围从0-27.</p><table><tr><td colspan="3">输入</td><td colspan="3">输出</td></tr><tr><th>x[0]</th><th>x[1]</th><th>x[2]</th><th>x[1]</th><th>x[2]</th><th>x[3]</th></tr><tr><th>x[1]</th><th>x[2]</th><th>x[3]</th><th>x[2]</th><th>x[3]</th><th>x[4]</th></tr><tr><th>x[2]</th><th>x[3]</th><th>x[4]</th><th>x[3]</th><th>x[4]</th><th>x[5]</th></tr><tr><td colspan="6">....</td></tr></table><p><strong>2.</strong>紧接着初始化了rnn模型，初始化参数为输入数和隐藏单元数量。</p><p>RNN的前向传播函数如下所示，在for循环中生成了隐藏层的输出并用state临时保存，再存入outputs以便后续使用。outputs形状为n*b*h</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, inputs, state=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># Initial state with shape: (batch_size, num_hiddens)</span></span><br><span class="line">        state = torch.zeros((inputs.shape[<span class="number">1</span>], self.num_hiddens),</span><br><span class="line">                          device=inputs.device)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        state, = state</span><br><span class="line">    outputs = []</span><br><span class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> inputs:  <span class="comment"># Shape of inputs: (num_steps, batch_size, num_inputs)</span></span><br><span class="line">        state = torch.tanh(torch.matmul(X, self.W_xh) +</span><br><span class="line">                         torch.matmul(state, self.W_hh) + self.b_h)</span><br><span class="line">        outputs.append(state)</span><br><span class="line">    <span class="keyword">return</span> outputs, state</span><br></pre></td></tr></table></figure><p><img src="\images\深度学习\RNN\1.png" style="zoom:67%;"></p><p><img src="\images\深度学习\RNN\2.png" style="zoom:67%;"></p><p>这个时候再来看我们的模型就会很清晰了，实际上模型图上的每一个隐藏单元组（图中的方框），是同一个隐藏单元组，只不过图示为了清晰表示隐藏单元的循环继承性画成这样。</p><p><strong>3.</strong>然后初始化了语言模型，语言模型传入了rnn模型，vocab表长度，训练步长的超参数。</p><p><strong>4.</strong>然后我们直接看trainer.fit，这个函数会先调用RNNLMScratch模型的train_step函数，然后train_step函数会调用交叉熵损失函数，交叉熵损失函数有两个参数，一个为预测输出，来自RNNLMScratch模型的前向传播函数，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X, state=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defined in :numref:`sec_rnn-scratch`&quot;&quot;&quot;</span></span><br><span class="line">    embs = self.one_hot(X)</span><br><span class="line">    rnn_outputs, _ = self.rnn(embs, state)</span><br><span class="line">    <span class="keyword">return</span> self.output_layer(rnn_outputs)</span><br></pre></td></tr></table></figure><p>他先将输入进行独热编码，并且独热编码长度为vocab的长度，也就是每一个vocab中的元素可用一个类似于分类器输出的编码来表示。进行独热编码后，X形状变成num_steps*batch_size*vocab_size(X在one_hot函数我们将它转置以便rnn的前向传播函数方便),然后再将编码后的X送入rnn的前向传播函数，最后再将rnn输出保存的不同时间步的隐藏单元状态输入给输出函数output_layer即可。输出函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output_layer</span>(<span class="params">self, rnn_outputs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defined in :numref:`sec_rnn-scratch`&quot;&quot;&quot;</span></span><br><span class="line">    outputs = [d2l.matmul(H, self.W_hq) + self.b_q <span class="keyword">for</span> H <span class="keyword">in</span> rnn_outputs]</span><br><span class="line">    <span class="keyword">return</span> d2l.stack(outputs, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们可以看到，outputs为一个张量的列表，列表中每一个元素形状为batch_size*vocab_size，列表长度为num_steps，我们用stack函数在dim1上进行连结，最终输出形状为batch_size*num_steps*vocab_size。这就是损失函数第一个参数预测输出的来源。</p><p>损失函数第二个参数就是实际输出，实际输出形状我们知道是batch_size*num_steps，然后我们就可以利用交叉熵损失函数，进行一个损失计算。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/RNN/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>序列模型</title>
      <link>http://example.com/2023/10/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</link>
      <guid>http://example.com/2023/10/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</guid>
      <pubDate>Thu, 05 Oct 2023 10:27:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
x_t～P(x_t|x_{t-1},x_{t-2},...,x_{t-\tau})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="原理">原理</h2><p><span class="math display">\[x_t～P(x_t|x_{t-1},x_{t-2},...,x_{t-\tau})\]</span></p><p><span class="math inline">\(x_t\)</span>处的值只与他前面<span class="math inline">\(\tau\)</span>个输入有关。</p><h2 id="训练">训练</h2><p>选取1000个时间步，使用正弦函数和一些可加性噪声来生成序列数据。</p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>(<span class="params">d2l.DataModule</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, batch_size=<span class="number">16</span>, T=<span class="number">1000</span>, num_train=<span class="number">600</span>, tau=<span class="number">4</span></span>):</span></span><br><span class="line">        self.save_hyperparameters()</span><br><span class="line">        self.time = torch.arange(<span class="number">1</span>, T + <span class="number">1</span>, dtype=torch.float32)</span><br><span class="line">        self.x = torch.sin(<span class="number">0.01</span> * self.time) + torch.randn(T) * <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">data = Data()</span><br><span class="line">d2l.plot(data.time, data.x, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, xlim=[<span class="number">1</span>, <span class="number">1000</span>], figsize=(<span class="number">6</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>数据集加载器，特征选取<span class="math inline">\(\tau\)</span>个作为输入，标签选择第<span class="math inline">\(\tau+1\)</span>个值。此处选择4个为一组训练其后的数据。所以实际上数据集只有996个。</p><p>并且我们也规定了训练集数据只有600个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@d2l.add_to_class(<span class="params">Data</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dataloader</span>(<span class="params">self, train</span>):</span></span><br><span class="line">    features = [self.x[i : self.T-self.tau+i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.tau)]</span><br><span class="line">    self.features = torch.stack(features, <span class="number">1</span>)</span><br><span class="line">    self.labels = self.x[self.tau:].reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    i = <span class="built_in">slice</span>(<span class="number">0</span>, self.num_train) <span class="keyword">if</span> train <span class="keyword">else</span> <span class="built_in">slice</span>(self.num_train, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> self.get_tensorloader([self.features, self.labels], train, i)</span><br></pre></td></tr></table></figure><p>数据集表格：</p><table><tr><td colspan="4">输入</td><td>输出</td></tr><tr><th>x[0]</th><th>x[1]</th><th>x[2]</th><th>x[3(tau-1)]</th><th>x[4]</th></tr><tr><th>x[1]</th><th>x[2]</th><th>x[3]</th><th>x[4]</th><th>x[5]</th></tr><tr><th>x[2]</th><th>x[3]</th><th>x[4]</th><th>x[5]</th><th>x[6]</th></tr><tr><td colspan="5">....</td></tr><tr><th>x[995]</th><th>x[996]</th><th>x[997]</th><th>x[998]</th><th>x[999]</th></tr></table><p>此处我们选择线性模型用来训练模型，训练完成后检测模型在预测中的表现拟合的非常好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onestep_preds = model(data.features).detach().numpy()</span><br><span class="line">d2l.plot(data.time[data.tau:], [data.labels, onestep_preds], <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">         legend=[<span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;1-step preds&#x27;</span>], figsize=(<span class="number">6</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>但是此处我们的预测相当于已知所有输入再喂给模型，模型当然可以很好的拟合。但是序列模型是需要预测的，也就是说根据训练集实际上我们只能拟合到x[605]处的值。后面的需要一步一步进行预测拟合。<span class="math display">\[\begin{split}\begin{aligned}\hat{x}_{605} &amp;= f(x_{601}, x_{602}, x_{603}, x_{604}), \\\hat{x}_{606} &amp;= f(x_{602}, x_{603}, x_{604}, \hat{x}_{605}), \\\hat{x}_{607} &amp;= f(x_{603}, x_{604}, \hat{x}_{605},\hat{x}_{606}),\\\hat{x}_{608} &amp;= f(x_{604}, \hat{x}_{605}, \hat{x}_{606},\hat{x}_{607}),\\\hat{x}_{609} &amp;= f(\hat{x}_{605}, \hat{x}_{606}, \hat{x}_{607},\hat{x}_{608}),\\&amp;\vdots\end{aligned}\end{split}\]</span>代码实现后我们发现经过几步之后，预测很快就会衰减到一个常数。这归因于错误的累积。也就是说每一步的误差都会累积从而导致后续出现比较大的误差。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>N-W核回归</title>
      <link>http://example.com/2023/10/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/NW%E6%A0%B8%E5%9B%9E%E5%BD%92/</link>
      <guid>http://example.com/2023/10/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/NW%E6%A0%B8%E5%9B%9E%E5%BD%92/</guid>
      <pubDate>Wed, 04 Oct 2023 06:16:38 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;\images\深度学习\attention\1.png&quot; style=&quot;zoom:67%;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;\images\深度学习\attention\2.png&quot; style=&quot;zo</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="原理">原理</h2><p><img src="\images\深度学习\attention\1.png" style="zoom:67%;"></p><p><img src="\images\深度学习\attention\2.png" style="zoom:67%;"></p><p>在这里，对于key，value，query可以这么理解，key相当于非自主提示，例如咖啡杯是红的十分显眼，他的key对应的value非常大，value相当于是不同key不同非自主提示所对应的一个输入值，而query在这里充当了一个自主提示的作用，和key键值通过某种映射产生不同的权值。因为我们知道注意力汇聚的公式如下：α相当于就是一种映射规则。<span class="math display">\[f(\mathbf{q}) = \sum_i \mathbf{v}_i \frac{\alpha(\mathbf{q},\mathbf{k}_i)}{\sum_j \alpha(\mathbf{q}, \mathbf{k}_j)}.\]</span> 正是因为有这样的query将注意力机制和全连接层进行了区分。</p><p>经过学习，我们知道α是核函数： <span class="math display">\[\begin{split}\begin{aligned}\alpha(\mathbf{q}, \mathbf{k}) &amp; = \exp\left(-\frac{1}{2}\|\mathbf{q} - \mathbf{k}\|^2 \right) &amp;&amp; \textrm{Gaussian;} \\\alpha(\mathbf{q}, \mathbf{k}) &amp; = 1 \textrm{ if } \|\mathbf{q} -\mathbf{k}\| \leq 1 &amp;&amp; \textrm{Boxcar;} \\\alpha(\mathbf{q}, \mathbf{k}) &amp; = \mathop{\mathrm{max}}\left(0, 1 -\|\mathbf{q} - \mathbf{k}\|\right) &amp;&amp; \textrm{Epanechikov.}\end{aligned}\end{split}\]</span> 常见核函数图像：</p><p><img src="\images\深度学习\attention\3.png" style="zoom:67%;"></p><p><img src="\images\深度学习\attention\4.png" style="zoom:67%;"></p><p>内核函数理解为query和key之间的距离，这些距离是内核函数的输入，并且内核函数在query=key也即输入为0达到最大值，这很正常，因为query等于key就说明这个key所对应value占比重很大。故也就可以用注意力汇聚实现N-W核回归。</p><p>“The attention weight is assigned according to the similarity (ordistance) between query and key”很好地解释了。</p><p>也就是说我们要拟合一个函数，可以将x_val，y_val作为一个已知数据，x_val是键值key，我们再定义x_train作为query（x_val和x_train范围一致，分布不同），而根据函数再给予y_train一定的扰动作为噪音，这样我们将x_train*attention_weight就可以得到我们的注意力汇集输出y_hat，我们再将y_hat与y_val放在同一图像进行对比即可观察拟合情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * torch.sin(x) + x</span><br><span class="line">n = <span class="number">40</span></span><br><span class="line">x_train, _ = torch.sort(torch.rand(n) * <span class="number">5</span>)</span><br><span class="line">y_train = f(x_train) + torch.randn(n)</span><br><span class="line">x_val = torch.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">y_val = f(x_val)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nadaraya_watson</span>(<span class="params">x_train, y_train, x_val, kernel</span>):</span></span><br><span class="line">    dists = x_train.reshape((-<span class="number">1</span>, <span class="number">1</span>)) - x_val.reshape((<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># Each column/row corresponds to each query/key</span></span><br><span class="line">    k = kernel(dists).<span class="built_in">type</span>(torch.float32)</span><br><span class="line">    <span class="comment"># Normalization over keys for each query</span></span><br><span class="line">    attention_w = k / k.<span class="built_in">sum</span>(<span class="number">0</span>)</span><br><span class="line">    y_hat = y_train@attention_w</span><br><span class="line">    <span class="keyword">return</span> y_hat, attention_w</span><br><span class="line"><span class="comment">#我们要展示的对比</span></span><br><span class="line">ax.plot(x_val, y_hat)</span><br><span class="line">ax.plot(x_val, y_val, <span class="string">&#x27;m--&#x27;</span>)</span><br><span class="line">ax.plot(x_train, y_train, <span class="string">&#x27;o&#x27;</span>, alpha=<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>我们再进行观察，例如上侧的高斯核函数，我们知道实际上的高斯函数是这样的：<span class="math display">\[\begin{split}\begin{aligned}\alpha(\mathbf{q}, \mathbf{k}) &amp; = \exp\left(-\frac{1}{2\sigma^2}\|\mathbf{q} - \mathbf{k}\|^2 \right) &amp;&amp; \textrm{Gaussian;}\\\end{aligned}\end{split}\]</span> 我们知道随着<span class="math inline">\(\sigma\)</span>的增大，高斯函数会变窄，也就是说我们可以通过调节<span class="math inline">\(\sigma\)</span>的值就可以调整高斯核函数的形状，也就可以改变注意力矩阵权重，从而通过调整对函数达到理想的拟合。</p><p>关于注意力机制没学RNN还是有难度，先学RNN去了（</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/10/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/NW%E6%A0%B8%E5%9B%9E%E5%BD%92/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
