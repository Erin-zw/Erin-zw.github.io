<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Fri, 08 Sep 2023 09:27:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>排序</title>
      <link>http://example.com/2023/09/08/%E5%8A%9B%E6%89%A3/%E6%8E%92%E5%BA%8F/</link>
      <guid>http://example.com/2023/09/08/%E5%8A%9B%E6%89%A3/%E6%8E%92%E5%BA%8F/</guid>
      <pubDate>Fri, 08 Sep 2023 09:21:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;在最坏的情况下（所有元素全部是逆序），时间复杂度为&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>在最坏的情况下（所有元素全部是逆序），时间复杂度为</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      
      <comments>http://example.com/2023/09/08/%E5%8A%9B%E6%89%A3/%E6%8E%92%E5%BA%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面试150</title>
      <link>http://example.com/2023/09/07/%E5%8A%9B%E6%89%A3/%E9%9D%A2%E8%AF%95150/</link>
      <guid>http://example.com/2023/09/07/%E5%8A%9B%E6%89%A3/%E9%9D%A2%E8%AF%95150/</guid>
      <pubDate>Thu, 07 Sep 2023 15:31:28 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;我的铸币写法：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>我的铸币写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n+m; i++)&#123;</span><br><span class="line">            (i&lt;m)?(nums1[i]=nums1[i]):(nums1[i] = nums2[i-m]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n+m; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j<span class="number">-1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums1[i + <span class="number">1</span>] &lt; nums1[i]) &#123;</span><br><span class="line">                    temp = nums1[i + <span class="number">1</span>];</span><br><span class="line">                    nums1[i + <span class="number">1</span>] = nums1[i];</span><br><span class="line">                    nums1[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>排序函数实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">            nums1[m + i] = nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      
      <comments>http://example.com/2023/09/07/%E5%8A%9B%E6%89%A3/%E9%9D%A2%E8%AF%95150/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>模板编程</title>
      <link>http://example.com/2023/09/07/C%E5%92%8CC++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2023/09/07/C%E5%92%8CC++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Thu, 07 Sep 2023 11:25:58 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;例子1：一般模板创建&quot;&gt;&lt;a href=&quot;#例子1：一般模板创建&quot; class=&quot;headerlink&quot; title=&quot;例子1：一般模板创建&quot;&gt;&lt;/a&gt;例子1：一般模板创建&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="例子1：一般模板创建"><a href="#例子1：一般模板创建" class="headerlink" title="例子1：一般模板创建"></a>例子1：一般模板创建</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们有一个包含嵌套类型的类 &#x27;MyClass&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 嵌套类型 &#x27;NestedType&#x27;</span></span><br><span class="line">    <span class="keyword">using</span> NestedType = <span class="keyword">int</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UseNestedType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 &#x27;T::NestedType&#x27; 表示 &#x27;T&#x27; 类型的嵌套类型 &#x27;NestedType&#x27;</span></span><br><span class="line">    <span class="keyword">typename</span> T::NestedType variable = <span class="number">42</span>; <span class="comment">// 使用 &#x27;typename&#x27; 明确指示 &#x27;NestedType&#x27; 是一个类型名</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value of variable: &quot;</span> &lt;&lt; variable &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UseNestedType&lt;MyClass&gt;(); <span class="comment">// 在模板中使用嵌套类型 &#x27;MyClass::NestedType&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子2：非类型模板参数"><a href="#例子2：非类型模板参数" class="headerlink" title="例子2：非类型模板参数"></a>例子2：非类型模板参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">size_t</span> <span class="title">N</span>=</span><span class="number">10</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T _a[N];</span><br><span class="line"><span class="keyword">size_t</span> top;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; sk1;<span class="comment">//10(使用缺省值：默认给10)</span></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, <span class="number">1000</span>&gt; sk2;<span class="comment">//1000（如果这里给了，不使用缺省值）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子3：模板特化"><a href="#例子3：模板特化" class="headerlink" title="例子3：模板特化"></a>例子3：模板特化</h2><p><strong>全特化：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Date&lt;T1, T2&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 _d1;</span><br><span class="line">T2 _d2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全特化</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>&lt;</span><span class="keyword">int</span>, <span class="keyword">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Date&lt;int, double&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> _d1;</span><br><span class="line"><span class="keyword">double</span> _d2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>部分特化：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> &lt;</span>T1, <span class="keyword">char</span>&gt;<span class="comment">//只要第二个类型是char就匹配这个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>() &#123; cout &lt;&lt; <span class="string">&quot;Data&lt;T1, char&gt;&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>参数限制：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> &lt;</span>T1*, T2*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>() &#123; cout &lt;&lt; <span class="string">&quot;Data&lt;T1*, T2*&gt;&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> &lt;</span> T1&amp;, T2&amp;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>() &#123; cout &lt;&lt; <span class="string">&quot;Data&lt;T1&amp;, T2&amp;&gt;&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> &lt;</span> T1&amp;, T2* &gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Data</span>() &#123; cout &lt;&lt; <span class="string">&quot;Data&lt;T1&amp;, T2*&gt;&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C-C/">C/C++</category>
      
      
      
      <comments>http://example.com/2023/09/07/C%E5%92%8CC++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>拷贝构造函数</title>
      <link>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Sun, 03 Sep 2023 11:46:15 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;调用拷贝构造函数的示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用一个对象初始化另一个对象：&lt;/strong&gt; 当你使用一个已存在的对象来初始化另一个对象时，通常会调用拷贝构造函数。这是因为你要创建一个新对象，该对象是原始对象的副本。&lt;/p&gt;
 &lt;figure </description>
        
      
      
      
      <content:encoded><![CDATA[<p>调用拷贝构造函数的示例：</p><ol><li><p><strong>使用一个对象初始化另一个对象：</strong> 当你使用一个已存在的对象来初始化另一个对象时，通常会调用拷贝构造函数。这是因为你要创建一个新对象，该对象是原始对象的副本。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass obj1;        <span class="comment">// 调用构造函数来创建 obj1</span></span><br><span class="line">MyClass obj2 = obj1; <span class="comment">// 调用拷贝构造函数，将 obj1 复制给 obj2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将对象作为参数传递给函数：</strong> 如果你将一个对象按值（而不是按引用或指针）传递给函数，那么会调用拷贝构造函数来创建函数内的局部对象，该对象是传递对象的副本。这里我们也可得知<strong>函数按值传入的形参都是传入对象的副本。</strong></p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunction</span><span class="params">(MyClass param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在函数内，param 是通过拷贝构造函数创建的副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;      <span class="comment">// 调用构造函数创建 obj</span></span><br><span class="line">    <span class="built_in">someFunction</span>(obj); <span class="comment">// 调用拷贝构造函数，将 obj 传递给 someFunction</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在返回语句中返回对象的副本：</strong> 如果你的函数返回一个对象，并且返回语句中有一个对象，通常会触发拷贝构造函数，以创建函数返回值的副本。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyClass <span class="title">createObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj; <span class="comment">// 调用构造函数创建 obj</span></span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">// 调用拷贝构造函数，返回 obj 的副本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总之，拷贝构造函数用于创建一个新对象，该对象是另一个对象的副本。在对象初始化的情况下，通常会调用构造函数或移动构造函数来进行对象的初始化。但如果需要创建对象的副本，则会调用拷贝构造函数。如果你没有显式定义拷贝构造函数，C++会生成一个默认的拷贝构造函数，执行浅拷贝操作（对成员变量进行简单的复制）。</p><p><strong>例子：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line">      <span class="built_in">Line</span>( <span class="keyword">int</span> len );             <span class="comment">// 简单的构造函数</span></span><br><span class="line">      <span class="built_in">Line</span>( <span class="keyword">const</span> Line &amp;obj);      <span class="comment">// 拷贝构造函数</span></span><br><span class="line">      ~<span class="built_in">Line</span>();                     <span class="comment">// 析构函数</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> *ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 成员函数定义，包括构造函数</span></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 为指针分配内存</span></span><br><span class="line">    ptr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    *ptr = len;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="keyword">const</span> Line &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用拷贝构造函数并为指针 ptr 分配内存&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ptr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    *ptr = *obj.ptr; <span class="comment">// 拷贝值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Line::~<span class="built_in">Line</span>(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;释放内存&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Line::getLength</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ptr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Line obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;line 大小 : &quot;</span> &lt;&lt; obj.<span class="built_in">getLength</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function">Line <span class="title">line</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">display</span>(line);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line">调用构造函数<span class="comment">//Line Line(10)调用构造函数</span></span><br><span class="line">调用拷贝构造函数并为指针 ptr 分配内存<span class="comment">//display(line)调用拷贝构造函数，复制对象</span></span><br><span class="line">line 大小 : <span class="number">10</span></span><br><span class="line">释放内存<span class="comment">//被复制对象调用析构函数释放内存</span></span><br><span class="line">释放内存<span class="comment">//line对象释放内存</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认的拷贝构造函数</span></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="keyword">const</span> Line &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    ptr = obj.ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用默认的拷贝构造函数，那么原对象和被复制对象的指针指向的是同一块地址，当一个对象执行析构函数时，此时指针指向空地址，原对象的指针就会变成悬空指针。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C-C/">C/C++</category>
      
      
      
      <comments>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>析构函数</title>
      <link>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Sun, 03 Sep 2023 11:35:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;析构函数是在对象生命周期结束时自动调用的特殊成员函数。它用于清理对象分配的资源、释放内存、关闭文件等一系列清理工作。析构函数通常在以下情况下被调用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对象离开其作用域：&lt;/strong&gt; 当对象在函数内被创建，并且函数结束或对</description>
        
      
      
      
      <content:encoded><![CDATA[<p>析构函数是在对象生命周期结束时自动调用的特殊成员函数。它用于清理对象分配的资源、释放内存、关闭文件等一系列清理工作。析构函数通常在以下情况下被调用：</p><ol><li><p><strong>对象离开其作用域：</strong> 当对象在函数内被创建，并且函数结束或对象离开其作用域时，C++会自动调用对象的析构函数来销毁对象。这是最常见的情况。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj; <span class="comment">// 在函数内创建对象</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="comment">// 在函数结束时，obj 的析构函数被调用</span></span><br></pre></td></tr></table></figure></li><li><p><strong>动态分配对象的内存释放：</strong> 如果你使用 <code>new</code> 运算符在堆上动态分配了对象，必须显式调用 <code>delete</code> 来释放对象的内存。在调用 <code>delete</code> 时，对象的析构函数会被自动调用。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass *ptr = <span class="keyword">new</span> <span class="built_in">MyClass</span>(); <span class="comment">// 动态分配对象</span></span><br><span class="line"><span class="keyword">delete</span> ptr; <span class="comment">// 调用析构函数并释放内存</span></span><br></pre></td></tr></table></figure></li><li><p><strong>容器和数据结构的管理：</strong> 如果你将对象存储在容器（如 <code>std::vector</code>、<code>std::list</code>）或数据结构中，当容器或数据结构的生命周期结束时，其中的元素对象的析构函数会被调用。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;MyClass&gt; myVector;</span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="built_in">MyClass</span>()); <span class="comment">// 向容器中添加对象</span></span><br><span class="line"><span class="comment">// 当 myVector 离开其作用域时，其中的对象的析构函数被调用</span></span><br></pre></td></tr></table></figure></li><li><p><strong>异常抛出：</strong> 如果在对象的构造函数中抛出了异常，并且在创建对象的上下文中没有捕获该异常，那么对象的析构函数会被调用以清理部分或全部资源。这是一种异常安全的机制，确保资源得到释放。</p></li></ol><p>总之，析构函数在对象生命周期结束时（无论是因为离开作用域、动态内存释放、容器管理或异常处理）被自动调用，用于对象的清理和资源的释放工作。你可以自定义析构函数来确保在对象销毁时执行必要的清理工作，如释放动态分配的内存或关闭文件。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C-C/">C/C++</category>
      
      
      
      <comments>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>派生类继承</title>
      <link>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%BB%A7%E6%89%BF/</link>
      <guid>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%BB%A7%E6%89%BF/</guid>
      <pubDate>Sun, 03 Sep 2023 09:08:28 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;私有继承影响的是继承的父类，继承的父类的所有变量和函数将变得对外部不可访问，但是子类的public部分依旧是对外部可见的。&lt;/li&gt;
&lt;li&gt;C++的类的成员函数也可以在类的外部用范围解析运算符实现定义。&lt;/li&gt;
&lt;li&gt;访问修饰符&lt;/li&gt;
&lt;/ul&gt;
&lt;t</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>私有继承影响的是继承的父类，继承的父类的所有变量和函数将变得对外部不可访问，但是子类的public部分依旧是对外部可见的。</li><li>C++的类的成员函数也可以在类的外部用范围解析运算符实现定义。</li><li>访问修饰符</li></ul><table><thead><tr><th></th><th>对外部代码是否可见</th><th>派生类是否可见</th><th>类的成员函数是否可见</th></tr></thead><tbody><tr><td>public</td><td>是</td><td>是</td><td>是</td></tr><tr><td>protected</td><td>否</td><td>是</td><td>是</td></tr><tr><td>private</td><td>否</td><td>否</td><td>是</td></tr></tbody></table><ul><li>三种继承，继承类型导致了基类成员变化，基类成员变化导致了基类成员在类外是否可访问。</li></ul><table><thead><tr><th></th><th>派生类可访问</th><th>类外可访问</th><th>基类成员变化</th></tr></thead><tbody><tr><td>公共（默认）继承</td><td>基类的public和protected</td><td>基类public</td><td>基类public，protected成员在派生类保持属性不变</td></tr><tr><td>保护继承</td><td>基类的public和protected</td><td>基类任何成员都不可访问</td><td>基类public，protected成员变成派生类protected成员</td></tr><tr><td>私有继承</td><td>基类的public和protected</td><td>基类任何成员都不可访问</td><td>基类public，protected成员变成派生类private成员</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C-C/">C/C++</category>
      
      
      
      <comments>http://example.com/2023/09/03/C%E5%92%8CC++/%E6%B4%BE%E7%94%9F%E7%B1%BB%E7%BB%A7%E6%89%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2023/09/02/C%E5%92%8CC++/Untitled/</link>
      <guid>http://example.com/2023/09/02/C%E5%92%8CC++/Untitled/</guid>
      <pubDate>Sat, 02 Sep 2023 08:38:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;1.内存泄漏&lt;/p&gt;
&lt;p&gt;2.新建对象是在堆上建立的&lt;/p&gt;
&lt;p&gt;3.堆内存和栈内存，什么叫动态分配内存&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>1.内存泄漏</p><p>2.新建对象是在堆上建立的</p><p>3.堆内存和栈内存，什么叫动态分配内存</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/09/02/C%E5%92%8CC++/Untitled/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>引用和指针</title>
      <link>http://example.com/2023/09/01/C%E5%92%8CC++/%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88/</link>
      <guid>http://example.com/2023/09/01/C%E5%92%8CC++/%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88/</guid>
      <pubDate>Fri, 01 Sep 2023 13:50:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;引用概念&quot;&gt;&lt;a href=&quot;#引用概念&quot; class=&quot;headerlink&quot; title=&quot;引用概念&quot;&gt;&lt;/a&gt;引用概念&lt;/h2&gt;&lt;p&gt;先说如何判别：和类型在一起的是引用，和变量在一起的是取址。&lt;/p&gt;
&lt;p&gt;引用的理解：实际上从字面意思上就可以很容易理解，所</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="引用概念"><a href="#引用概念" class="headerlink" title="引用概念"></a>引用概念</h2><p>先说如何判别：和类型在一起的是引用，和变量在一起的是取址。</p><p>引用的理解：实际上从字面意思上就可以很容易理解，所谓引用就是引用一个东西，在C++中，引用就是相当于一个变量的别名。</p><p><code>int m; int &amp;n = m;</code>再看这两句代码就很容易理解引用的含义了，n相当于m的一个别名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>；</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>；</span><br><span class="line"><span class="keyword">int</span> &amp;k = i；</span><br><span class="line">k = j； <span class="comment">// k 和i 的值都变成了6；</span></span><br></pre></td></tr></table></figure><p>这里实际上就可以看出引用就是字面意思上的引用。</p><h2 id="和指针的区别"><a href="#和指针的区别" class="headerlink" title="和指针的区别"></a>和指针的区别</h2><ul><li><p>指针是一个实体，有具体的地址存放指针变量，但是关于引用一些书上写是不占用内存的。</p><p>（这篇文章认为占用内存<a href="https://zhuanlan.zhihu.com/p/78800232%EF%BC%89">https://zhuanlan.zhihu.com/p/78800232）</a></p></li><li><p>引用不需要解引用，指针需要解引用</p></li><li><p>引用只能被初始化一次，之后不可变（可认为是常量指针），指针可变。</p></li><li><p>引用不能为空，必须初始化，指针可为空</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C-C/">C/C++</category>
      
      
      
      <comments>http://example.com/2023/09/01/C%E5%92%8CC++/%E5%BC%95%E7%94%A8%E5%92%8C%E6%8C%87%E9%92%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python基础</title>
      <link>http://example.com/2023/08/18/py/r%E6%97%A0%E8%BE%93%E5%87%BA/</link>
      <guid>http://example.com/2023/08/18/py/r%E6%97%A0%E8%BE%93%E5%87%BA/</guid>
      <pubDate>Fri, 18 Aug 2023 07:55:03 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;python中print函数后面加上”-r”后不能显示任何打印信息&quot;&gt;&lt;a href=&quot;#python中print函数后面加上”-r”后不能显示任何打印信息&quot; class=&quot;headerlink&quot; title=&quot;python中print函数后面加上”\r”后不能显</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="python中print函数后面加上”-r”后不能显示任何打印信息"><a href="#python中print函数后面加上”-r”后不能显示任何打印信息" class="headerlink" title="python中print函数后面加上”\r”后不能显示任何打印信息"></a>python中print函数后面加上”\r”后不能显示任何打印信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">countdown = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(countdown, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\r%d&#x27;</span>%i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2023/08/18/py/r%E6%97%A0%E8%BE%93%E5%87%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>py知识</title>
      <link>http://example.com/2023/08/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/py%E7%9F%A5%E8%AF%86/</link>
      <guid>http://example.com/2023/08/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/py%E7%9F%A5%E8%AF%86/</guid>
      <pubDate>Fri, 11 Aug 2023 09:05:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;with关键字&quot;&gt;&lt;a href=&quot;#with关键字&quot; class=&quot;headerlink&quot; title=&quot;with关键字&quot;&gt;&lt;/a&gt;with关键字&lt;/h2&gt;&lt;p&gt;在 Python 中，&lt;code&gt;with&lt;/code&gt; 语句用于创建一个上下文管理器（Contex</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h2><p>在 Python 中，<code>with</code> 语句用于创建一个上下文管理器（Context Manager），用于管理一些资源的获取和释放，以确保资源得到正确的使用和清理。这种管理在处理文件、网络连接、数据库连接等需要显式打开和关闭资源的情况下非常有用，因为它可以帮助避免资源泄漏和错误处理。</p><p><code>with</code> 语句的一般语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> context_expression <span class="keyword">as</span> target:</span><br><span class="line">    <span class="comment"># 代码块</span></span><br></pre></td></tr></table></figure><ul><li><code>context_expression</code>：通常是一个上下文管理器对象，它负责定义资源的获取和释放规则。</li><li><code>target</code>：通常是一个变量，用于接收上下文管理器生成的资源。</li><li>代码块：在代码块中，你可以使用 <code>target</code> 获取资源并进行操作，当代码块结束时，资源会自动被释放，无论是否发生异常。</li></ul><p>一个常见的使用案例是文件的读写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line"><span class="comment"># 在代码块结束后，文件会自动关闭，不需要显式调用 file.close()</span></span><br></pre></td></tr></table></figure><p>在你提供的代码中，<code>with torch.no_grad():</code> 语句的目的是在该上下文中执行一些操作，而在这个上下文中，PyTorch 不会跟踪梯度信息，从而避免不必要的内存占用和计算。这在进行一些不需要梯度信息的操作，如参数更新，时非常有用。当 <code>with</code> 代码块结束后，梯度追踪会自动恢复。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      
      <comments>http://example.com/2023/08/11/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/py%E7%9F%A5%E8%AF%86/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
