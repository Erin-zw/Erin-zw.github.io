<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Thu, 12 Aug 2021 14:14:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/</link>
      <guid>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/</guid>
      <pubDate>Thu, 12 Aug 2021 14:14:38 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTT线程建立</title>
      <link>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/</link>
      <guid>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/</guid>
      <pubDate>Mon, 09 Aug 2021 14:44:53 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">嵌入式操作系统</category>
      
      
      
      <comments>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>结构体基础</title>
      <link>http://example.com/2021/08/09/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%9F%BA%E7%A1%80/</link>
      <guid>http://example.com/2021/08/09/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Mon, 09 Aug 2021 14:42:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>结构是一些值的集合，这些值称为它的<strong>成员</strong>。结构变量属于标量类型。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><strong>声明格式：</strong></p><p><code>struct tag&#123;member-list&#125;  variable-list;</code></p><p><strong>例子1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">&#125;x;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">&#125;y[<span class="number">20</span>],*z;</span><br></pre></td></tr></table></figure><p>声明了一个叫x的变量，有三个成员变量，整数a，字符b，浮点数c。</p><p>声明了y数组，包含了20个结构。</p><p>声明了z指针，指向结构体的指针。</p><p>综上所述，<strong>不严谨的可以把结构体当作一种新类型对比整型</strong>。</p><p>下列语句是非法的，因为这两种声明被编译器当作两种类型，所以y，x，z类型不同，不能进行赋值。</p><p><code>z = &amp;x;</code></p><p>如何处理上述问题，看看例子2：</p><p><strong>例子2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">x</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">y</span>[20],*<span class="title">z</span>;</span></span><br></pre></td></tr></table></figure><p>标签tag为成员列表提供一个名字，以便后续声明。标签允许多个声明使用同一个成员列表。并且此时x，y，z三者属于同一种类型。</p><p><strong>例子3：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">&#125;Simple;</span><br><span class="line">Simple x;</span><br><span class="line">Simple y[<span class="number">20</span>],*z;</span><br></pre></td></tr></table></figure><p>使用typedef重新定义一种新类型是一种声明结构体的好方法。这个技巧和声明一个结构标签的效果几乎相同，区别在于Simple现在是个类型名，而SIMPLE是个结构标签。</p><h3 id="间接访问与直接访问"><a href="#间接访问与直接访问" class="headerlink" title="间接访问与直接访问"></a>间接访问与直接访问</h3><p><strong>例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">COMPLEX</span>&#123;</span></span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">long</span> *lp;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> <span class="title">sa</span>[10];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SIMPLE</span> *<span class="title">sp</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">COMPLEX</span> <span class="title">comp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">COMPLEX</span> *<span class="title">cp</span>;</span></span><br><span class="line"><span class="comment">//直接访问</span></span><br><span class="line">comp.f</span><br><span class="line">comp.sa[<span class="number">4</span>].c</span><br><span class="line"><span class="comment">//间接访问</span></span><br><span class="line">cp-&gt;f</span><br><span class="line">cp-&gt;a</span><br></pre></td></tr></table></figure><h3 id="结构体的自引用与互引用"><a href="#结构体的自引用与互引用" class="headerlink" title="结构体的自引用与互引用"></a>结构体的自引用与互引用</h3><h4 id="自引用"><a href="#自引用" class="headerlink" title="自引用"></a>自引用</h4><p>结构体内部包含结构体本身是非法的，可以包含只想结构体本身的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tag</span> *<span class="title">b</span>;</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>下面是错误定义，因为在struct内部时name尚未被定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    name *b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;name;</span><br></pre></td></tr></table></figure><p>解决方法就是定义一个结构标签声明b。</p><p>正确定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">name_tag</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">name_tag</span> *<span class="title">b</span>;</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;name;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>二叉树结点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binary_tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data    ;   <span class="comment">// Data area</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binary_tree</span> * <span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binary_tree</span> * <span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="互引用和不完整声明"><a href="#互引用和不完整声明" class="headerlink" title="互引用和不完整声明"></a>互引用和不完整声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>;</span><span class="comment">//不完整声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">B</span> *<span class="title">partner</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> *<span class="title">partner</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用不完整声明，声明一个作为结构标签的标识符，然后就可以用在不需要知道这个结构长度的声明中，比如声明指向这个结构的指针。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INIT_EX</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b[<span class="number">10</span>];</span><br><span class="line">    Simple c;</span><br><span class="line">&#125;x = &#123;</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="number">25</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">1.9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/09/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>字符串，字符和字节</title>
      <link>http://example.com/2021/08/08/C/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <guid>http://example.com/2021/08/08/C/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <pubDate>Sun, 08 Aug 2021 11:36:26 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;字符串长度&quot;&gt;&lt;a href=&quot;#字符串长度&quot; class=&quot;headerlink&quot; title=&quot;字符串长度&quot;&gt;&lt;/a&gt;字符串长度&lt;/h3&gt;&lt;p&gt;C语言标准库字符串长度函数是strlen()。返回值类型为size_t,是无符号整数类型。使用时应避免下面的错误：&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>C语言标准库字符串长度函数是strlen()。返回值类型为size_t,是无符号整数类型。使用时应避免下面的错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(x) &gt;= <span class="built_in">strlen</span>(y))</span><br><span class="line"><span class="comment">//正确的，可以比较两者大小</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(x) - <span class="built_in">strlen</span>(y) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="comment">//错误的，左边运算结果为一个无符号数，运算结果始终为一个无符号数，始终是非负的。从二进制补码角度看。</span></span><br></pre></td></tr></table></figure><h3 id="复制字符串函数"><a href="#复制字符串函数" class="headerlink" title="复制字符串函数"></a>复制字符串函数</h3><p>函数原型：</p><p><code>char *strcpy(char *dst, char const *str);</code></p><p>考虑下面例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> message[] = <span class="string">&quot;Option message&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(message,<span class="string">&quot;different&quot;</span>);<span class="comment">//如果复制字符串长度小于原字符串空间，多余的字符将被舍弃</span></span><br><span class="line">    <span class="built_in">puts</span>(message);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(message));</span><br><span class="line">    <span class="built_in">strcpy</span>(message,<span class="string">&quot;Optional message&quot;</span>);<span class="comment">//如果大于，则占用数组后面的部分内存空间，改写原先恰好存储在那里的变量</span></span><br><span class="line">    <span class="built_in">puts</span>(message);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">different</span><br><span class="line"><span class="number">9</span></span><br><span class="line">Optional message</span><br></pre></td></tr></table></figure><p>所以尽量确保目标参数能够容纳被复制的字符串。</p><p>函数返回值为message本身。</p><h3 id="getchar和putchar"><a href="#getchar和putchar" class="headerlink" title="getchar和putchar"></a>getchar和putchar</h3><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c,d;</span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    d = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(d);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>当程序调用getchar时，程序就等着用户按键，用户输入的字符被存放在键盘缓冲区中，直到用户按回车为止（回车字符也放在缓冲区中）。当用户键入回车之后，getchar才开始从stdin流中每次读入一个字符，getchar函数的返回值是用户输入的第一个字符的ASCⅡ码，如出错返回-1，且将用户输入的字符回显到屏幕。</p><p>如用户在按回车之前输入了不止一个字符，其他字符会保留在键盘缓存区中，等待后续getchar调用读取。也就是说，后续的getchar调用不会等待用户按键，而直接读取缓冲区中的字符，直到缓冲区中的字符读完为后，才等待用户按键。</p><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>((c = getchar()) != EOF)</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">sjka</span><br><span class="line">sjka</span><br><span class="line">sss</span><br><span class="line">sss</span><br></pre></td></tr></table></figure><p>解释一下上述程序就是输入的字符先存放在缓冲区，然后执行while循环getchar不断读取缓冲区字符，一边读取一边输出。</p><p>上述程序执行程序，输入：abc，然后回车。则程序就会去执行puchar(c)，然后输出abc，<strong>这个地方不要忘了，系统输出的还有一个回车</strong>。然后可以继续输入，再次遇到换行符的时候，程序又会把那一行的输入的字符输出在终端上。</p><h3 id="gets和puts"><a href="#gets和puts" class="headerlink" title="gets和puts"></a>gets和puts</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Enter a value :&quot;</span>);</span><br><span class="line">   gets( str );</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;You entered: &quot;</span>);</span><br><span class="line">   <span class="built_in">puts</span>( str );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;ok\n&quot;</span>);</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">Enter a value :<span class="number">1</span>sd</span><br><span class="line">You entered: <span class="number">1</span>sd</span><br><span class="line">ok</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>puts函数自己会打印一个换行</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/08/C/%E5%AD%97%E7%AC%A6%E4%B8%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2021/08/06/py/py%E5%9F%BA%E6%9C%AC/</link>
      <guid>http://example.com/2021/08/06/py/py%E5%9F%BA%E6%9C%AC/</guid>
      <pubDate>Thu, 05 Aug 2021 16:50:03 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;print函数&quot;&gt;&lt;a href=&quot;#print函数&quot; class=&quot;headerlink&quot; title=&quot;print函数&quot;&gt;&lt;/a&gt;print函数&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;ok?&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span>+<span class="number">200</span>)</span><br><span class="line">//输出</span><br><span class="line">hello , ok?</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><p>print函数接受多个字符串 ，字符串间逗号以空格代替</p><h3 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/python/">python</category>
      
      
      
      <comments>http://example.com/2021/08/06/py/py%E5%9F%BA%E6%9C%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ndarray对象和数据类型</title>
      <link>http://example.com/2021/08/06/numpy/numpy1/</link>
      <guid>http://example.com/2021/08/06/numpy/numpy1/</guid>
      <pubDate>Thu, 05 Aug 2021 16:43:09 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Ndarray对象&quot;&gt;&lt;a href=&quot;#Ndarray对象&quot; class=&quot;headerlink&quot; title=&quot;Ndarray对象&quot;&gt;&lt;/a&gt;Ndarray对象&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Ndarray对象"><a href="#Ndarray对象" class="headerlink" title="Ndarray对象"></a>Ndarray对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ndarray对象是用于存放同类型元素的多维数组。ndarray 中的每个元素在内存中都有相同存储大小的区域。 </p><h3 id="内部组成"><a href="#内部组成" class="headerlink" title="内部组成"></a>内部组成</h3><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code></p><p>参数说明：</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">object</td><td align="left">数组或嵌套的数列</td></tr><tr><td align="left">dtype</td><td align="left">数组元素的数据类型，可选</td></tr><tr><td align="left">copy</td><td align="left">对象是否需要复制，可选</td></tr><tr><td align="left">order</td><td align="left">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td align="left">subok</td><td align="left">默认返回一个与基类类型一致的数组</td></tr><tr><td align="left">ndmin</td><td align="left">指定生成数组的最小维度</td></tr></tbody></table><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([[<span class="number">1</span>+<span class="number">1j</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]], dtype=<span class="built_in">complex</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line">//输出</span><br><span class="line">[[<span class="number">1.</span>+<span class="number">1.j</span> <span class="number">2.</span>+<span class="number">0.j</span>]</span><br><span class="line"> [<span class="number">3.</span>+<span class="number">0.j</span> <span class="number">4.</span>+<span class="number">0.j</span>]</span><br><span class="line"> [<span class="number">5.</span>+<span class="number">0.j</span> <span class="number">6.</span>+<span class="number">0.j</span>]]</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/08/06/numpy/numpy1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识matplotlib</title>
      <link>http://example.com/2021/08/06/matplotlib/matplotlib1/</link>
      <guid>http://example.com/2021/08/06/matplotlib/matplotlib1/</guid>
      <pubDate>Thu, 05 Aug 2021 16:27:55 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/matplotlib/">matplotlib</category>
      
      
      
      <comments>http://example.com/2021/08/06/matplotlib/matplotlib1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>链表</title>
      <link>http://example.com/2021/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</link>
      <guid>http://example.com/2021/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Thu, 05 Aug 2021 14:00:50 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      
      <comments>http://example.com/2021/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数组</title>
      <link>http://example.com/2021/08/05/C/%E6%95%B0%E7%BB%84/</link>
      <guid>http://example.com/2021/08/05/C/%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Thu, 05 Aug 2021 13:59:53 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h3&gt;&lt;h4 id=&quot;数组名&quot;&gt;&lt;a href=&quot;#数组名&quot; class=&quot;headerlink&quot; title=&quot;数组名&quot;&gt;&lt;/a&gt;数组</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><p>在数组a[10]中，a[1]代表数组中的第二个元素，a代表数组中第一个元素a[0]的地址。a是一个指针常量。</p><h4 id="下标引用"><a href="#下标引用" class="headerlink" title="下标引用"></a>下标引用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *ap = <span class="built_in">array</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ap的值     ： %d\n&quot;</span>,*ap);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ap[0]的值   ： %d\n&quot;</span>,ap[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(ap+6)的值 ： %d\n&quot;</span>,*(ap+<span class="number">6</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ap[6]的值   ： %d\n&quot;</span>,ap[<span class="number">6</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ap[-1]的值  ： %d\n&quot;</span>,ap[<span class="number">-1</span>]);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">*ap的值     ： <span class="number">2</span></span><br><span class="line">ap[<span class="number">0</span>]的值   ： <span class="number">2</span></span><br><span class="line">*(ap+<span class="number">6</span>)的值 ： <span class="number">8</span></span><br><span class="line">ap[<span class="number">6</span>]的值   ： <span class="number">8</span></span><br><span class="line">ap[<span class="number">-1</span>]的值  ： <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="函数和数组"><a href="#函数和数组" class="headerlink" title="函数和数组"></a>函数和数组</h4><p>作为函数参数的数组名是将数组指针拷贝传递给函数，函数如果执行了下标引用，实际上是对指针执行<strong>间接访问</strong>，通过这种间接访问，函数可以<strong>修改</strong>调用程序中的数组元素。</p><h4 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h4><p><strong>注意：</strong>当数组的初始化局部于一个函数或代码块时，仔细考虑在程序的执行流每次进入该函数时，每一次都要初始化是否值得，如果不值得，就把数组声明为static，这样数组初始化只用在程序开始前执行一次。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h4 id="储存顺序"><a href="#储存顺序" class="headerlink" title="储存顺序"></a>储存顺序</h4><p>行主序，例如int  a[4] [6]下标依次就是最右边下标先变化，习惯上叫做4行6列。</p><p>a可以看作是一个一维数组，包含了4个元素，每个元素是包含了6个整型元素的数组。a这个名字的值是一个指向它第一个元素的指针，所以a是指向一个包含6个整型元素的数组的指针。</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p><code>int a[3][10]；</code></p><p>a的类型是“指向包含10个整形元素的数组的指针”（可以理解为指向整形指针的指针，毕竟数组名就是指针常量）</p><p>a+1的类型也是“指向包含10个整形元素的数组的指针”，只不过是指向了a的下一行</p><p>*(a+1)的类型是“指向整型的指针”，即是指向a[1][0]的指针</p><p>*(a+1)+5的类型也是“指向整型的指针”，即是指向a[1][5]的指针</p><p>*(*(a+1)+5)的类型就是整型，即是a[1][5]元素。*(a+1)等价于a[1]所以前面写成*(a[1]+5)也是可以的。</p><h4 id="指向数组的指针"><a href="#指向数组的指针" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">vector</span>[<span class="number">10</span>], *vp = <span class="built_in">vector</span>;</span><br><span class="line"><span class="keyword">int</span> matrix[<span class="number">3</span>][<span class="number">10</span>], *mp = matrix;</span><br></pre></td></tr></table></figure><p>上面两个定义，第一条是合法初始化。第二条是非法的。因为mp为指向整型的指针，matrix为指向数组的指针。</p><p>正确声明如下：</p><p><code>int (*p)[10] = matrix;//因为*p本身就是相当于数组名</code></p><p>如果要创建一个指向第一个整形元素的指针有两种方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pi = &amp;matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> *pi = matrix[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>第二个意思就是<code>pi = matrix[0]</code>,实际上matrix[0]就是指向第一个整形元素的指针。</p><h4 id="函数形参"><a href="#函数形参" class="headerlink" title="函数形参"></a>函数形参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> matrix[<span class="number">3</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//以下两种都可以</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> (*mat)[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> mat[][<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="comment">//下面这种不行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> **mat)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="数组初始化-1"><a href="#数组初始化-1" class="headerlink" title="数组初始化"></a>数组初始化</h4><p>例如a[][][][]…，从左到右维度增加，只有一维才能缺省，后几维都需给出具体数值初始化。</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>两种方案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> *keyword[] = &#123;</span><br><span class="line">    <span class="string">&quot;do&quot;</span>,</span><br><span class="line">    <span class="string">&quot;for&quot;</span>,</span><br><span class="line">    <span class="string">&quot;if&quot;</span>,</span><br><span class="line">    <span class="string">&quot;register&quot;</span>,</span><br><span class="line">    <span class="string">&quot;return&quot;</span>,</span><br><span class="line">    <span class="string">&quot;switch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;while&quot;</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;<span class="comment">//指针数组形式，一般常用这种，并且在数组最后增加一个NULL指针方便遍历数组</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span> keyword[][<span class="number">9</span>] = &#123;</span><br><span class="line"><span class="string">&quot;do&quot;</span>,</span><br><span class="line">    <span class="string">&quot;for&quot;</span>,</span><br><span class="line">    <span class="string">&quot;if&quot;</span>,</span><br><span class="line">    <span class="string">&quot;register&quot;</span>,</span><br><span class="line">    <span class="string">&quot;return&quot;</span>,</span><br><span class="line">    <span class="string">&quot;switch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;while&quot;</span>,</span><br><span class="line">&#125;;<span class="comment">//二位数组形式</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/05/C/%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据类型</title>
      <link>http://example.com/2021/08/03/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <guid>http://example.com/2021/08/03/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <pubDate>Tue, 03 Aug 2021 08:45:06 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;整数类型&quot;&gt;&lt;a href=&quot;#整数类型&quot; class=&quot;headerlink&quot; title=&quot;整数类型&quot;&gt;&lt;/a&gt;整数类型&lt;/h3&gt;&lt;p&gt;包括长整型，短整型，整型，字符。包括有符号和无符号。&lt;/p&gt;
&lt;p&gt;长整型≥整型≥短整型&lt;/p&gt;
&lt;p&gt;short int至</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>包括长整型，短整型，整型，字符。包括有符号和无符号。</p><p>长整型≥整型≥短整型</p><p>short int至少2字节，long int至少4字节，int是4字节还是2字节由编译器设计者决定，本系统为4字节。</p><p>缺省的char可以是有符号也可以是无符号的，这取决于编译器。一般为了保证可移植性不显式定义为有符号或者无符号。</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128到127或0到255</td></tr><tr><td>unsigned char</td><td>1字节</td><td>0到255</td></tr><tr><td>signed char</td><td>1字节</td><td>-128到127</td></tr><tr><td>int</td><td>4字节</td><td>-2147483648到2147483647</td></tr><tr><td>unsigned int</td><td>4字节</td><td>0到4294967295</td></tr><tr><td>short</td><td>2字节</td><td>-32768到32767</td></tr><tr><td>unsigned short</td><td>2字节</td><td>0到65535</td></tr><tr><td>long</td><td>4字节</td><td>-2147483648到2147483647</td></tr><tr><td>unsigned long</td><td>4字节</td><td>0到4294967295</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>1.2E-38到3.4E+38</td><td>7位有效位</td></tr><tr><td>double</td><td>8字节</td><td>2.3E-308到1.7E+308</td><td>16位有效位</td></tr><tr><td>long double</td><td>16字节</td><td>3.4E-4932到1.1E+4932</td><td>20位有效位</td></tr></tbody></table><p>float精度以及范围分析：</p><ol><li><a href="https://blog.csdn.net/krocwang/article/details/4444491">第一篇</a></li><li><a href="https://blog.csdn.net/fanjufei123456/article/details/116566043">第二篇</a></li><li><a href="https://blog.csdn.net/qq_45737068/article/details/108691026">第三篇</a></li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/03/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
