<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Wed, 15 Mar 2023 14:52:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>三三三</title>
      <link>http://example.com/2023/03/15/C#%E5%AD%A6%E4%B9%A0/bucuo/</link>
      <guid>http://example.com/2023/03/15/C#%E5%AD%A6%E4%B9%A0/bucuo/</guid>
      <pubDate>Wed, 15 Mar 2023 14:50:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ttest&lt;/p&gt;
&lt;p&gt;ttest&lt;/p&gt;
&lt;p&gt;ttest&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ttest</p><p>ttest</p><p>ttest</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C/">C#</category>
      
      
      
      <comments>http://example.com/2023/03/15/C#%E5%AD%A6%E4%B9%A0/bucuo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基础学习二</title>
      <link>http://example.com/2023/03/12/C#%E5%AD%A6%E4%B9%A0/%E8%AE%A4%E7%9F%A52/</link>
      <guid>http://example.com/2023/03/12/C#%E5%AD%A6%E4%B9%A0/%E8%AE%A4%E7%9F%A52/</guid>
      <pubDate>Sun, 12 Mar 2023 15:00:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ttest&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ttest</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C/">C#</category>
      
      
      
      <comments>http://example.com/2023/03/12/C#%E5%AD%A6%E4%B9%A0/%E8%AE%A4%E7%9F%A52/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>dicom影像显示</title>
      <link>http://example.com/2023/03/06/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%BD%B1%E5%83%8F%E6%98%BE%E7%A4%BA/</link>
      <guid>http://example.com/2023/03/06/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%BD%B1%E5%83%8F%E6%98%BE%E7%A4%BA/</guid>
      <pubDate>Mon, 06 Mar 2023 10:08:44 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;位图显示方法&quot;&gt;&lt;a href=&quot;#位图显示方法&quot; class=&quot;headerlink&quot; title=&quot;位图显示方法&quot;&gt;&lt;/a&gt;位图显示方法&lt;/h2&gt;&lt;p&gt;Windows位图有两种：&lt;strong&gt;DDB&lt;/strong&gt;以及&lt;strong&gt;DIB&lt;/strong</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="位图显示方法"><a href="#位图显示方法" class="headerlink" title="位图显示方法"></a>位图显示方法</h2><p>Windows位图有两种：<strong>DDB</strong>以及<strong>DIB</strong>。</p><p><strong>DDB</strong>中不包含调色板，通过硬件设备来显示图像，位图在内存中的位置和结构由硬件的驱动程序来管理,类似于MFC205中的Cbitmap类。由于不包含有调色板，图像的显示由硬件设备直接来实现，所以这种显示方式的速度非常快，与此同时，因为它的显示是依赖于设备的，所以在不同设备之间是不能够实现文件的兼容应用，从而决定了DDB的应用范围非常有限。</p><p><strong>DIB</strong>设备无关位图却克服了DDB的确定，它不再依赖于硬件设备，是一种外部图像格式，从而完全能够实现不同设备之间的文件兼容应用。由于DIB位图中包含了一个调色板，而图像中的像素值表示了对应于该调色板的查找值，虽然相对于DDB位图多了一项查找过程，但是，DIB位图实现了不同设备之间的兼容显示，当需要显示图像的时候，只需要通过像素值找到调色板中对应的颜色进行显示，而不在关心硬件设备是否支持图像显示，从而实现了独立于硬件设备，所以目前大多数应用的图像基本都属于DIB类型。Windows中所有的图像生成都是由图形设备接口GDI来管理的，GDI是通过应用高层的绘图函数来实现生成的图像的，正由于这种生成方式，所以无论何种硬件设备都能够生成同样的图形，因此GDI构成了Windows系统的核心部件。</p><h2 id="DICOM显示流程"><a href="#DICOM显示流程" class="headerlink" title="DICOM显示流程"></a>DICOM显示流程</h2><p>不同的操作系统中字节数据的排列顺序是不同的，一般主要有两种排列方式，即Big Endian和Little Endian。前者表示系统中的字节数据采用正常的顺序进行排列，而后者恰恰相反，采用高低字节调换的方式进行数据排列。通常情况下，在UNIX系统中采用正常顺序的Big Endian排列方式，而Windows中则采用髙低字节调换的Little Endian排列方式。</p><p>数据解析流程：</p><div id="flowchart-0" class="flow-chart"></div><p>DICOM-BMP显示流程：</p><div id="flowchart-1" class="flow-chart"></div><h2 id="图像标注"><a href="#图像标注" class="headerlink" title="图像标注"></a>图像标注</h2><p>做为医学图像显示系统，对图像中重点关注区域的加以标注是不可或缺的，可以辅助医生对其感兴趣区域进行锁定和定性分析。同时标记对医学教学也是非常有帮助的。本文中设计的对DICOM文件中图像的热点关注区域进行标注，并对所标注的轨迹坐标等信息进行读取和保存。对影像图像进行标记，针对影像图像可能涉及到很多部位，及不同的病状，本设计采用画线、圆形、矩形三种标记方式对其进行标记定位。</p><p>主要实现方法是通过调用Windows系统下的CClientDC类，以鼠标左键按下为坐标起点，以鼠标左键弹起为坐标终点，这样就能够画出标记线。</p><h2 id="图像的旋转和放大"><a href="#图像的旋转和放大" class="headerlink" title="图像的旋转和放大"></a>图像的旋转和放大</h2><p><strong>图像旋转</strong>就是以空间的某一点为原点，然后改变旋转角度，但是每一点的相对位置关系是不变的。从数学方法上来描述，图像的旋转就是建立一幅图像与其变换后的图像中所有像素点之间映射关系的函数:(x,y)=(X(u,v),Y(u,v)),(x,y)表示输入的图像素点的坐标，(u,v)表示输出的图像素点的坐标。x,y,u,v表示了输入图像与输出图像所有点的几何对应关系。图像的旋转计算方法为:假设在X-Y坐标体系中，将点(x,y)旋转角度θ，得到点(u,v)。</p><p>计算公式为：</p><script type="math/tex; mode=display">[u,v] = [x,y]\begin{bmatrix}cos\theta & -sin\theta \\ sin\theta & sin\theta\end{bmatrix}</script><p><strong>图像放大</strong>可以更好的帮助医生诊断，其最简单的方法就是将像素放大，变换的公式为：</p><script type="math/tex; mode=display">u = r_x * x\\v = r_y * y</script><p>其中<code>r_x</code>为X方向的放大比例，7；为y方向的放大比例，然后将变换后的像素排列在的阵列中，但是这样的放大只是像素坐标的间隔变大。所以这样的放大以后会产生马赛克，为了解决这一问题，通常采用插值法来实现像素的平稳过度。</p><p><img src="\images\毕设\dicom标准\6.jpg" style="zoom:50%;"></p><p>图中的四个边角为放大后原像素的位置，而它们之间的像素需要插值来显示，具体算法如下：</p><script type="math/tex; mode=display">g(u,v_1) = g(u_1,v_1)+\frac{u-u_1} {u_2-u_1}[g(u_2,v_1)-g(u_1,v_1)]\\g(u,v_2) = g(u_1,v_2)+\frac{u-u_1} {u_2-u_1}[g(u_2,v_2)-g(u_1,v_2)]\\g(u,v) = g(u,v_1)+\frac{v-v_1} {v_2-v_1}[g(u,v_2)-g(u,v_1)]</script><p>由于是通过线性插值的方法得到的放大图像，所以效果明显优于直接放大法，但是即使采用了插值旳方法，所得到的信息毕竟不是真实的信息，所以只能作为医学诊断辅助，不是绝对严格的医学测量。</p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始op=>operation: 读取数据cond=>condition: Big Endian?op2=>operation: 数据处理op3=>operation: 字节交换e=>end: 结束st->op->cond->op2->econd(yes)->op2cond(no)->op3op3->op2</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始e=>end: 结束op1=>operation: 打开文件op2=>operation: 提取传输输入法op3=>operation: 数据解析op4=>operation: 获取图像数据信息op5=>operation: 数据解析op6=>operation: 调用相应解压模块op7=>operation: 获取图像数据op8=>operation: 图像数据转换为8位数据op9=>operation: DIB显示cond1=>condition: DICOM？cond2=>condition: 图像是否为压缩数据？st->op1->cond1(yes)->op2->op3->op4->op5->cond2(no)->op7->op8->op9->econd1(no)->econd2(yes)->op6->op7</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/">毕业设计</category>
      
      
      
      <comments>http://example.com/2023/03/06/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%BD%B1%E5%83%8F%E6%98%BE%E7%A4%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>dicom图像灰度理解</title>
      <link>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%9B%BE%E5%83%8F%E7%81%B0%E5%BA%A6%E7%90%86%E8%A7%A3/</link>
      <guid>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%9B%BE%E5%83%8F%E7%81%B0%E5%BA%A6%E7%90%86%E8%A7%A3/</guid>
      <pubDate>Sun, 05 Mar 2023 13:17:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;图像灰阶&quot;&gt;&lt;a href=&quot;#图像灰阶&quot; class=&quot;headerlink&quot; title=&quot;图像灰阶&quot;&gt;&lt;/a&gt;图像灰阶&lt;/h2&gt;&lt;p&gt;​        所谓灰阶，是将最亮与最暗之间的亮度变化，区分为若干份。以便于进行信号输入相对应的屏幕亮度管控。每张数字影像</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="图像灰阶"><a href="#图像灰阶" class="headerlink" title="图像灰阶"></a>图像灰阶</h2><p>​        所谓灰阶，是将最亮与最暗之间的亮度变化，区分为若干份。以便于进行信号输入相对应的屏幕亮度管控。每张数字影像都是由许多点所组合而成的,这些点又称为像素(pixels)，通常每一个像素可以呈现出许多不同的颜色，它是由红、绿、蓝（RGB）三个子像素组成的。每一个子像素，其背后的光源都可以显现出不同的亮度级别。而灰阶代表了由最暗到最亮之间不同亮度的层次级别。这中间层级越多，所能够呈现的画面效果也就越细腻。以8bit panel为例，能表现2的8次方，等于256个亮度层次，我们就称之为256灰阶。LCD屏幕上每个像素，均由不同亮度层次的红、绿、蓝组合起来，最终形成不同的色彩点。也就是说，屏幕上每一个点的色彩变化，其实都是由构成这个点的三个RGB子像素的灰阶变化所带来的。</p><h2 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h2><p>​        我们生活中通过三原色深浅组成不同的颜色，前端开发中常用RGB来指定色彩，R、G、B 都是 0-255， 比如 （255,255,255） 表示白色，用16进制表示255就是ff, 所以255,255,255 可以表示为 ffffff,  在css样式表中写为 #ffffff。</p><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>​        图片我们都知道是由多个像素组成的，是图像的最小单元，如果这个单元里只有一个bit大小，也就是只有0和1两个值，由这种像素组成的图像称二值图像，显然它可以表示一个黑白图。这个单位里也可以存一个16位二进制数，24位…, 可以想象存储的越大，一个像素能表达的颜色就越丰富，整体图像呈现就越精细，当然图片占用的空间也就越大。</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>​        1位图像（即二值图像）只能表示黑白，那二位图像就可以表示4种颜色（00,01,10,11，VGA），依次类推，4位（16色，VGA），8位（256色），16位（增强色），24位和32位（真彩色）等。</p><p>这其中8位RGB指的是3位元是R，3位元是G，2位元是B，故有8位RGB有256种颜色。其他以此类推。</p><p><strong>色彩图像</strong>：以RGB图像为例，RGB图像每一个像素的颜色值（由RGB三原色表示）直接存放在图像矩阵中，由于每一像素的颜色需由R、G、B三个分量来表示，M、N分别表示图像的行列数，<strong>三个</strong>M x N的二维矩阵分别表示各个像素的R、G、B三个颜色分量，假设我们在绘图的时候只取第一个矩阵，那么绘制出来的就是红色分量的图片。<br> <strong>灰度图像</strong>：每个像素只有一个采样颜色，这类图像通常显示为从最暗黑色到最亮的白色的灰度，尽管理论上这个采样可以任何颜色的不同深浅，甚至可以是不同亮度上的不同颜色。</p><h2 id="灰度级"><a href="#灰度级" class="headerlink" title="灰度级"></a>灰度级</h2><p>​        灰度级表明图像中不同灰度的最大数量。灰度级越大，图像的亮度范围越大。二值图像一个像素只能存0和1，它的灰度级就为2，8位图一个像素表示0-255共256个灰度值，所有它的灰度级为256， 那么存储一张512*512,256级灰度的图片需要的空间就为</p><script type="math/tex; mode=display">512*512*8 = 2097152\ bit ≈ 1.7\ Mb</script><h2 id="图像灰度化"><a href="#图像灰度化" class="headerlink" title="图像灰度化"></a>图像灰度化</h2><p>​        图像的灰度化是让像素点矩阵中的每一个像素点都满足关系：R=G=B，此时的这个值叫做灰度值。如RGB(100,100,100)就代表灰度值为100,RGB(50,50,50)代表灰度值为50。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/">毕业设计</category>
      
      
      
      <comments>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E5%9B%BE%E5%83%8F%E7%81%B0%E5%BA%A6%E7%90%86%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>dicom窗位和窗宽</title>
      <link>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AA%97%E4%BD%8D%E7%AA%97%E5%AE%BD/</link>
      <guid>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AA%97%E4%BD%8D%E7%AA%97%E5%AE%BD/</guid>
      <pubDate>Sun, 05 Mar 2023 12:27:05 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;普通显示器能显示的最大灰度值是8bit (256位，即0~255)， 而医学图像的最大灰度值通常不低于12bit，所以普通的显示器就难以直接</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>普通显示器能显示的最大灰度值是8bit (256位，即0~255)， 而医学图像的最大灰度值通常不低于12bit，所以普通的显示器就难以直接显示医学图像的全部灰度信息。</p><h2 id="CT值定义"><a href="#CT值定义" class="headerlink" title="CT值定义"></a>CT值定义</h2><p>是测定人体某一局部组织或器官密度大小的一种计量单位，通常称亨氏单位（hounsfield unit ，HU）空气为-1000，致密骨为+1000。</p><p><strong>CT 值</strong>是CT 图像中各组织与X 线衰减系数相当的对应值。无论是矩阵图像或矩阵数字都是CT 值的代表，而CT 值又是从人体组织、器官的μ值换算而来的。 CT 值不是绝对不变的数值，它不仅与人体内在因素如呼吸、血流等有关，而且与X 线管电压、CT 装置、室内温度等外界因素有关。</p><p>人体常见组织CT值：</p><p><img src="\images\毕设\dicom标准\5.jpg" style="zoom:80%;"></p><h2 id="窗位窗宽调节"><a href="#窗位窗宽调节" class="headerlink" title="窗位窗宽调节"></a>窗位窗宽调节</h2><p><strong><em>定义</em>：</strong> 在不影响视觉效果的前提下，将高精度医学图像的较大范围内的灰度值<strong>逐段映射</strong>为普通显示器可以显示的0~255范围内的灰度，通过不断调节窗宽窗位将所有的高精度医学图像信息逐段显示出来，这个过程称为窗宽窗位调节。</p><ul><li><p><strong>窗宽：</strong>window width (ww) 图像数据的显示范围，是CT图像上显示的CT值范围。</p><p>在此CT值范围内的组织和病变均以不同的模拟灰度显示。而CT值高于此范围的组织和病变，无论高出程度有多少，均以白影显示，不再有灰度差异；反之，低于此范围的组织结构，不论低的程度有多少，均以黑影显示，也无灰度差别。增大窗宽，则图像所示CT值范围加大，显示具有不同密度的组织结构增多，但各结构之间的灰度差别减少。减小窗宽，则显示的组织结构减少，然而各结构之间的灰度差别增加。如观察脑质的窗宽常为-15～+85H，即密度在-15～+85H范围内的各种结构如脑质和脑脊液间隙均以不同灰度显示。而高于+85H的组织结构如骨质几颅内钙化，其间虽有密度差，但均以白影显示，无灰度差别；而低于-15H组织结构如皮下脂肪及乳突内气体均以黑影显示，其间也无灰度差别。</p></li><li><p><strong>窗位：</strong>window level (wl) 图像数据显示的中心值，即CT值范围的中心值。</p><p>窗位是窗的中心位置，同样的窗宽，由于窗位不同，其所包括CT值范围的CT值也有差异。例如窗宽同为100H，当窗位为0H时，其CT值范围为-50～+50H；如窗位为+35H时，则CT值范围为-15～+85H。通常，欲观察某以组织结构及发生的病变，应以该组织的CT值为窗位。例如脑质CT值约为+35H，则观察脑组织及其病变时，选择窗位以+35H为妥。</p></li></ul><p>拿 ww: 500 wl: 200 举例说明。它表示将窗宽是500，窗位200的灰度映射到8bit来显示，即将灰度范围是 -50 ~ 450 的像素映射到 0 ~ 255。</p><p><img src="\images\毕设\dicom标准\4.jpg" style="zoom:80%;"></p><p>设窗宽为w, 窗位为c，要映射的区间宽度为g (0~255的宽度是256)，那么对于图像中灰度大于<code>c + w/2</code> 的全部设置为255，  小于 <code>c -w/2</code> 的全部设置为0； 也就是大于450的全部映射为255，而小于-50的全部映射为0； 在-50 ~ 450 范围的则采用线性映射函数<code>y = ax + b</code> 进行映射，其中 <code>a = g/w , b = (w/2-c)g/w</code>。具体计算公式如下：</p><script type="math/tex; mode=display">f(x) =\left \{ \begin{array}{c}0\ \ \  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ,x < c-\frac{w}{2} \\ \frac{g}{w}*x+(\frac{w}{2}-c)*\frac{g}{w}\ \ ,c-\frac{w}{2}≤ x < c+\frac{w}{2}\\ 255\  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ,x≥c+\frac{w}{2}\end{array}\right.</script><p>上述只是线性转换的一种，也有博客或者书本中将256 取值为255。如果窗宽非常大，比如25500 压缩到0~255就是100:1, 这样的损失可能会很大，这时候可以考虑使用非线性转换，常用算法有log和gamma。</p><h2 id="窗宽窗位选择"><a href="#窗宽窗位选择" class="headerlink" title="窗宽窗位选择"></a>窗宽窗位选择</h2><p>在医院领域，不同组织使用不同窗宽窗位,能较充分反映解剖内容和病灶影像表现，比如头颅,脑组织的窗宽设定为80Hu~100Hu,窗位为30 Hu~40 Hu。</p><p>DICOM中，Hu = pixel * slope + intercept 其中pixel是像素值（DICOM是灰度图像，像素值即灰度值），slope是斜率，intercept是截距。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/">毕业设计</category>
      
      
      
      <comments>http://example.com/2023/03/05/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AA%97%E4%BD%8D%E7%AA%97%E5%AE%BD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>dicom简介</title>
      <link>http://example.com/2023/03/04/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AE%80%E4%BB%8B/</link>
      <guid>http://example.com/2023/03/04/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AE%80%E4%BB%8B/</guid>
      <pubDate>Sat, 04 Mar 2023 11:47:57 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;dicom基本概念和定义&quot;&gt;&lt;a href=&quot;#dicom基本概念和定义&quot; class=&quot;headerlink&quot; title=&quot;dicom基本概念和定义&quot;&gt;&lt;/a&gt;dicom基本概念和定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;实体(Entity):&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="dicom基本概念和定义"><a href="#dicom基本概念和定义" class="headerlink" title="dicom基本概念和定义"></a>dicom基本概念和定义</h2><ul><li><p><strong>实体(Entity):</strong>表示一个或者一类具有相同特性的应用对象。 </p></li><li><p><strong>关系(Relation):**</strong>表示各个实体之间的相互关系。比如医疗影像设备和患者之间，存在的就是检查的关系。</p></li><li><p><strong>实体-关系（E-R)模型：</strong>描述实际中具体的物体或者概念的一种信息模型。通过定义实体和实体间的关系，从而表达出系统所实现的功能。</p></li><li><p><strong>对象(Object):</strong>即现实中的实际事物在计算机内部的抽象表达，它包含了事物的属性以及对事物的处理方法，并且具有封装与继承的特征。</p></li><li><p><strong>唯一标识符UID:</strong>此标志无论在世界上的任何地点都是独一无二的，为了保证其唯一性，它的产生机制如下：&lt;根&gt;.&lt;后缀&gt;，即由根和后缀两部分组成，其中根部分是由权威部门来制定的，通过权威部门来确保它的唯一性，之后再通过其他的机构部门分配到医院，同时也必须要保证其在内部网络的唯一性。</p></li><li><p><strong>信息对象定义(Information Object Definition,==lOD==)：**</strong>指的是信息实体的集合。每一个信息实体都是一个单独的对象属性，例如人的名字就是人这一对象的信息实体，当这些信息实体组合到特定的模块中就会形成数据集。在DICOM中一个IOD可以包含单个的信息实体也可以包含多个信息实体。通常情况下，管理功能的服务类使用的是包含单个信息实体的IOD，而处理图像的服务类使用的则是包含有多个信息实体的IOD。</p></li><li><p><strong>服务(Service):**</strong>服务指的是为其他应用程序所提供的功能，通过下层服务原语和信息对象来实现服务的功能。服务类指的是将一项用于对象的指令抽象出来进行描述，比如用于对象的命令和结果。服务类中包含了应用实体的概念，指的是一个实际的应用程序。服务中包括有服务类提供者和服务类使用者，服务类提供者是提供DICOM服务的应用实体，服务类使用者则是通过网络要求DICOM服务的应用实体。</p></li></ul><ul><li><strong>服务对象对(Service Object Pair,==SOP==)：</strong>它是传递DICOM信息的基本单位。每一个DICOM都包含一个SOP类，而这个SOP类表示的是实际对象，SOP根据UID来进行唯一表示，并且其类型可根据UID来识别，DICOM应用实体可以支持一个或多个SOP类。</li></ul><h2 id="dicom标准信息模型"><a href="#dicom标准信息模型" class="headerlink" title="dicom标准信息模型"></a>dicom标准信息模型</h2><p>DICOM的信息模型中主要包含有四个层次：病人层次(Patient)、研究层次(Study)、序列层次(Series)以及图像层次(Image)。</p><ul><li><p><strong>病人层次（Patient):</strong>病人IOD封装了该病人的基本信息。如病人姓名、性别、年龄、身高以及体重等基本信息。</p></li><li><p><strong>研究层次（Study):</strong>研究层次表示对特定类型请求的一个结果，它是DICOM信息模型中最为关键的一部分，因为整个DICOM影像都以研究层次的正确引导而进行。研究层次也包含了一些标识信息，通过该标识信息可以连接医院的影像管理系统(HIS)。</p></li><li><p><strong>序列层次（Series):</strong>序列层次中包含的是图像的序列，同时也标识了图像相关的一些属性，如图像属于何种类型，图像生成的日期以及生成该图像所使用的设备等等。序列层次中规定了图像序列的排列类型，而图像序列的排列类型可根据具体的临床应用来决定。</p></li><li><p><strong>图像层次（Image):</strong>图像层次包含的就是DICOM中的图像数据，它也是整个信息模型的最底层。由于不同设备产生的图像不同，可以是单层的图像，也可以是双层的图像，甚至还会有一些器官的运动图像。</p></li></ul><h2 id="dicom文件结构"><a href="#dicom文件结构" class="headerlink" title="dicom文件结构"></a>dicom文件结构</h2><p>DICOM文件的组成包括两部分：即文件头和数据集，同时每个DICOM文件中还包含一个服务对象的SOP实例，其中包含了一个图像实例。</p><h3 id="dicom文件头"><a href="#dicom文件头" class="headerlink" title="dicom文件头"></a>dicom文件头</h3><p>文件头是为了保持与通用文件结构的兼容性。</p><div class="table-container"><table><thead><tr><th>组成</th><th>功能</th></tr></thead><tbody><tr><td>文件导读</td><td>由128个字节16进制数组成，主要是为了进行一些特定的操作和应用协议，方便访问其内部的图像数据以及其他的信息，通常情况下这部分无内容，即用128个字节的00H来表示</td></tr><tr><td>DICOM前缀</td><td>由4个字节组成，对应的ASCII码为“DICM”，是用来判定该文件的格式是否为DICOM</td></tr><tr><td>文件元信息元素</td><td>一些其他的信息，如文件的元信息版本、传输语法、媒介存储SOP类、文件应用类、源AE标题、私有信息以及程序生成器等等。</td></tr></tbody></table></div><h3 id="dicom数据集"><a href="#dicom数据集" class="headerlink" title="dicom数据集"></a>dicom数据集</h3><p>​        数据集是由大量的按照一定顺序排列的数据元所组成，而数据元又由四部分组成：TAG(标签)、VR(值表示)、值长度和值域。DICOM数据集描述的就是现实中一个具体事物抽象成的实例，而数据元表示的则是实例的各个属性，数据元包含的信息可以是简单的字符信息，也可以是数字信息，每个数据元按照其标签的递增方式进行排列。比如，如果将一个患者抽象成为一个实例，那么数据元表示的可以是患者的名字、年龄、性别以及患者所做的检查中包含的图像生成的日期、图像的类型和图像数据本身等等。</p><p><img src="\images\毕设\dicom标准\2.jpg" style="zoom:50%;"></p><p>（1）<strong>TAG(标签)</strong>：在DICOM数据元中，标签是用来对数据元做唯一的标识，即同一个标签在数据元中只能出现一次，但是有一种情况例外，就是当数据元使用嵌套模式的时候。标签是一个4字节的无符号整数，它由两部分组成，即组号和元素号。标签分为标准标签（Standard Data Elements Tag)和留给用户自定义的标签，一般来说，组号为偶数的标签就是标准标签，但是在制定DICOM标准的时候为了以后对DICOM的发展进行更新应用，一些特殊的标签暂时没做任何定义，也不允许自定义，包括组号为：0000、0002、0004和0006的标签，每一个标准标签的详细定义和说明都可以通过数据字典来进行查阅。组号为奇数的标签通常是留给用户自定义的标签，同样有一些特殊的例外，其中包括组号为：0001、0003、0005和0007的标签。</p><p>（2）<strong>VR(值表示）：</strong>VR表示数据元素的数据类型，由2个字节的整数组成。例如，当VR为<strong>“PN”</strong>时，表示的是病人的姓名，当VR为<strong>“UI”</strong>时，表示的是统一标识符，当VR为<strong>“AT”</strong>时，表示的是属性标签，当VR为<strong>“FL”</strong>时，表示的是数据域采用的是单精度浮点型的类型。根据传输语法的可选性，VR可分为两类：即显式和隐式，如图2-3和图2-4所示。当为显式的时候，VR不可以被省略，但是当为隐式的时候VR必须被置零省略。随着DICOM版本的发展，以前版本的一些数据类型可能在新版本不再在被支持，当VR为“RET”时，就表示该类型在DICOM3.0中不被支持，如果为了兼容使用，必须包含以前版本标准的全部有效数据，但是如果仅仅是为了兼容，而不使用这些数据，也可以不包含。当VR为“SQ”时，表示数据域里还有嵌套的子数据元，而当子数据元里的数据类型依然为“SQ”时，就形成了递归的嵌套模式，在嵌套的递归模式下，要求对DICOM进行数据解析的时候必须能够遍及所有的嵌套数据。</p><p><img src="\images\毕设\dicom标准\3.jpg" style="zoom:50%;"></p><p>（3）<strong>值长度：</strong>值长度分为两种。首先，是根据VR值是显式还是隐式的类型决定值长度用十六位或者三十二位无符号整数来表示，它说明了是值域中数据的长度的字节数，这个字节数必须是偶数。值长度仅仅表示数据元中值域数据的长度，而不包含标签、值表示和它本身的字节长度。其次，是一个固定的三十二位的字段，表示SQ嵌套模式下或者未知的数据长度，对于0B和OW的数据类型，根据协商的语法未定义的部分也可使用。</p><p>（4）<strong>值域：</strong>长度为偶数个字节，表示数据元的具体数据，VR决定了值域中数据的类型。当表示值的多重性的VM大于1的时候，说明了元素可以是多重取值。</p><h2 id="dicom图像编码"><a href="#dicom图像编码" class="headerlink" title="dicom图像编码"></a>dicom图像编码</h2><p>在图像显示方式上，DICOM采用的是位图的编码的方式，即以像素点为单位，按照从左向右，从上向下的排列方式显示出每个点的颜色和光度。不同的光度变现出DICOM图像的不同特征，DICOM标准中用Tag(0028，0004)来表示光度，通常有以下5种：</p><ul><li>MONOCHROMEI：用白色显示灰阶图像的最小值，黑色显示图像的最大值</li><li>MONOCHROMEZ：用黑色显示灰阶图像的最小值，白色显示图像的最大值</li><li>RGB：用红色、绿色和蓝色的组合显示彩色图像</li><li>HUE：用色调、饱和度和亮度的组合显示彩色图像</li><li>PALLETEC0L0R：利用调色板进行显示的彩色图像</li></ul><p>DICOM图像分为两类，即灰度图像和彩色图像。DICOM图像的像素数据分为按字节编码（VR显示为OB)和按字编码（VR显示为OW)两种。灰度图像的色彩范围就是从黑色到白色，因此每一个像素只用亮度值就可以表示。彩色图像如上所述有三种实现的方式，通常24位的RGB图像称为真彩图像，包含了计算机领域所有的颜色，显示效果最好。每一个像素的数据有以下3个因素来表示：</p><p>(1)<strong>分配位数(Bits Allocate):</strong>定义了分配给该采样值的二进制位数，数据元的标签为(0028，0100)。</p><p>(2)<strong>存储位数(Bits Stored):</strong>定义了实际使用中该采样值所占用的位数，数据元的标签为(0028，0101)表示。</p><p>(3)<strong>最高位位置(High Bit):</strong>定义了采样值最高位的位置，数据元的标签为(0028，0102)。</p><p>一个像素单元由上述的三个元素来决定，分配位数、存储位数和最高位位置分别规定了像素数据的大小、存储位数和最高位的位置。分配位数必须大于等于存储位数。当该像素点由多个采样值组合而成的时候，多个采样值将会按照一定语法规则进行排列，而当采样值小于8位时，就会按照字节的方式进行编码，当采样值大于8的时候则会以字的方式进行编码。根据语法的不同，字节的高地位顺序也会有所不同。由于原始的DICOM图像所占用的空间极其庞大，既浪费空间，输出效率也十分低下，所以在不丢失图像数据信息的条件下，去除图像的冗余部分，释放存储空间，提高传输效率是十分必要的，通常会采用压缩的方式对DICOM图像进行处理，而压缩方法包括有损压缩和无损压缩。</p><p>(1)<strong>无损压缩：</strong>顾名思义，就是在不丢失原始数据的条件下，对图像进行压缩，降低图像占用空间的一种方法。其优点就是完全不破坏原始的DICOM数据，但是缺点是压缩比较低，通常只能压缩到原始图像的二分之一到十分之一的范围内。根据其不破坏原始图像的特点，一般我们将此种压缩方法应用到对文本信息的压缩，例如患者的名字、年龄等等，这些信息必须要完整，否则无法识别。无损压缩使用的方法游程编码(Run Length Encode,RLE)以及霍夫曼(Huffman)编码等等。</p><p>(2)<strong>有损压缩：</strong>与无损压缩正好互补，它的优点就是有非常高的压缩比，可以压缩到原始图像的十分之一到二百分之一，极其有效的释放占用的存储空间，提高传输效率，可是缺点就是会丢失一些原始数据，不过对于图像声音等用人体的感觉器官感受的信息其实在一般情况下是有着很大的冗余度的，适当的丢失部分休息并不会对患者的诊断带来影响，所以这种方式通常用到DICOM图像以及动态的画面中。有损压缩通常使用的方法是变换数据的表示域，比如将数据进行傅里叶变换到频域里，然后将频域中的低频部分去掉，然后再进行傅里叶反变换，就能实现压缩。类似的方法还有很多，但是考虑到医学是一门极其严谨的学科，所以国外很多地方不提倡有损压缩，因此DICOM通常会使用RLE游程编码的无损压缩和JPEG-LS的无损压缩方式。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/">毕业设计</category>
      
      
      
      <comments>http://example.com/2023/03/04/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/dicom%E7%AE%80%E4%BB%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基础学习一</title>
      <link>http://example.com/2023/02/07/C#%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <guid>http://example.com/2023/02/07/C#%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <pubDate>Tue, 07 Feb 2023 07:01:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-程序结构&quot;&gt;&lt;a href=&quot;#C-程序结构&quot; class=&quot;headerlink&quot; title=&quot;C#程序结构&quot;&gt;&lt;/a&gt;C#程序结构&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C#程序结构"></a>C#程序结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">namespace HelloWorldApplication</span><br><span class="line">&#123;</span><br><span class="line">   class HelloWorld</span><br><span class="line">   &#123;</span><br><span class="line">      static void Main(string[] args)</span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(&quot;Hello World&quot;);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个C#程序包含以下部分：</p><ul><li><strong>使用using关键字包含命名空间，一个程序一般有多个using语句。</strong>相当于System是一个系统命名空间，可以使用其中的类和方法。类比一下java的package，但是还是有去别的。</li><li><strong>命名空间声明。</strong>使用namespace关键字定义一个命名空间。</li><li><strong>一个class。</strong>class声明类包含了程序使用的数据和方法声明。类一般包含多个方法。方法定义了类的行为。只有一个  Main 方法。</li><li><strong>Class方法。</strong></li><li><strong>Class属性</strong>。</li><li><strong>一个Main方法。</strong></li><li><strong>语句&amp;表达式</strong></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>直接来看一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using System;//包含系统包</span><br><span class="line">namespace RectangleApplication//定义命名空间</span><br><span class="line">&#123;</span><br><span class="line">    class Rectangle//定义矩形类</span><br><span class="line">    &#123;</span><br><span class="line">        // 成员变量</span><br><span class="line">        double length;</span><br><span class="line">        double width;</span><br><span class="line">        public void Acceptdetails()//定义获取成员变量值的函数</span><br><span class="line">        &#123;</span><br><span class="line">            length = 4.5;    </span><br><span class="line">            width = 3.5;</span><br><span class="line">        &#125;</span><br><span class="line">        public double GetArea()//定义计算面积的函数</span><br><span class="line">        &#123;</span><br><span class="line">            return length * width;</span><br><span class="line">        &#125;</span><br><span class="line">        public void Display()//定义显示函数</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Length: &#123;0&#125;&quot;, length);</span><br><span class="line">            Console.WriteLine(&quot;Width: &#123;0&#125;&quot;, width);</span><br><span class="line">            Console.WriteLine(&quot;Area: &#123;0&#125;&quot;, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    class ExecuteRectangle//定义主函数类</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)//Main方法，程序入口</span><br><span class="line">        &#123;</span><br><span class="line">            Rectangle r = new Rectangle();//实例化矩形类，r为标识符，避免和C#关键字重复，如果非要用加一个@</span><br><span class="line">            r.Acceptdetails();//调用类的方法</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadLine();//等待输入退出程序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-封装"><a href="#C-封装" class="headerlink" title="C#封装"></a>C#封装</h2><ul><li><strong>public</strong>：所有对象都可以访问；</li><li><strong>private</strong>：对象本身在对象内部可以访问；</li><li><strong>protected</strong>：只有该类对象及其子类对象可以访问</li><li><strong>internal</strong>：同一个程序集的对象可以访问；</li><li><strong>protected</strong> <strong>internal</strong>：访问限于当前程序集或派生自包含类的类型。</li></ul><p><img src="/images/C#/认知/1.jpg" style="zoom:67%;"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C/">C#</category>
      
      
      
      <comments>http://example.com/2023/02/07/C#%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大纲</title>
      <link>http://example.com/2023/02/07/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E7%BA%B2/</link>
      <guid>http://example.com/2023/02/07/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E7%BA%B2/</guid>
      <pubDate>Tue, 07 Feb 2023 06:35:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;选题&quot;&gt;&lt;a href=&quot;#选题&quot; class=&quot;headerlink&quot; title=&quot;选题&quot;&gt;&lt;/a&gt;选题&lt;/h2&gt;&lt;p&gt;基于fo-dicom的医学影像客户端系统设计与开发&lt;/p&gt;
&lt;h2 id=&quot;内容要求&quot;&gt;&lt;a href=&quot;#内容要求&quot; class=&quot;hea</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h2><p>基于fo-dicom的医学影像客户端系统设计与开发</p><h2 id="内容要求"><a href="#内容要求" class="headerlink" title="内容要求"></a>内容要求</h2><p>1.选用一种编程语言实现DICOM协议中的C-FIND和C-MOVE功能</p><p>2.设计并实现影像数据传输的客户端系统，完成向服务器查询、申请并接收下载影像数据。完成对下载医学影像的展示、移动、缩放、旋转、调窗、加标注等操作</p><h2 id="参考论文"><a href="#参考论文" class="headerlink" title="参考论文"></a>参考论文</h2><p>1<a href="https://webvpn.whut.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/KCMS/detail/detail.aspx?filename=1014269763.nh&amp;dbname=CMFD201402&amp;dbcode=cdmd&amp;uid=WEEvREcwSlJHSldSdmVpa3VEMHZFclhEcXpKSTNqc3ZFVE5nSnJqTk8rMD0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MTU1MzZWNzNNVkYyNkdyRytGOWJLckpFYlBJUitmbnM0eVJZYW16MTFQSGJrcVdBMEZyQ1VSN21mWk9ackZ5RG4=">医学影像DICOM的显示和处理</a></p><p>2 高效完善DICOM图像显示软件的开发研究</p><p>3 DICOM医学图像查看器的设计与实现</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/">毕业设计</category>
      
      
      
      <comments>http://example.com/2023/02/07/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E7%BA%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数制和码制</title>
      <link>http://example.com/2023/01/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <guid>http://example.com/2023/01/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <pubDate>Wed, 11 Jan 2023 02:32:46 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/">数字电路</category>
      
      
      
      <comments>http://example.com/2023/01/11/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2022/09/09/%E7%A1%AC%E4%BB%B6/CPU1/</link>
      <guid>http://example.com/2022/09/09/%E7%A1%AC%E4%BB%B6/CPU1/</guid>
      <pubDate>Fri, 09 Sep 2022 01:03:31 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2022/09/09/%E7%A1%AC%E4%BB%B6/CPU1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
