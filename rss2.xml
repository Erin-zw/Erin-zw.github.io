<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Fri, 17 Sep 2021 14:35:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>面向对象高级Ⅱ</title>
      <link>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/</link>
      <guid>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/</guid>
      <pubDate>Fri, 17 Sep 2021 14:03:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;枚举类&quot;&gt;&lt;a href=&quot;#枚举类&quot; class=&quot;headerlink&quot; title=&quot;枚举类&quot;&gt;&lt;/a&gt;枚举类&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>,(<span class="string">&#x27;Jan&#x27;</span>,<span class="string">&#x27;Feb&#x27;</span>,<span class="string">&#x27;Mar&#x27;</span>,<span class="string">&#x27;Apr&#x27;</span>,<span class="string">&#x27;May&#x27;</span>,<span class="string">&#x27;Jun&#x27;</span>,<span class="string">&#x27;Jul&#x27;</span>,<span class="string">&#x27;Aug&#x27;</span>,<span class="string">&#x27;Sep&#x27;</span>,<span class="string">&#x27;Oct&#x27;</span>,<span class="string">&#x27;Nov&#x27;</span>,<span class="string">&#x27;Dec&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(a, <span class="string">&#x27;=&gt;&#x27;</span>, b, <span class="string">&#x27;,&#x27;</span>, b.value )</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Jan =&gt; Month.Jan , <span class="number">1</span></span><br><span class="line">Feb =&gt; Month.Feb , <span class="number">2</span></span><br><span class="line">Mar =&gt; Month.Mar , <span class="number">3</span></span><br><span class="line">Apr =&gt; Month.Apr , <span class="number">4</span></span><br><span class="line">May =&gt; Month.May , <span class="number">5</span></span><br><span class="line">Jun =&gt; Month.Jun , <span class="number">6</span></span><br><span class="line">Jul =&gt; Month.Jul , <span class="number">7</span></span><br><span class="line">Aug =&gt; Month.Aug , <span class="number">8</span></span><br><span class="line">Sep =&gt; Month.Sep , <span class="number">9</span></span><br><span class="line">Oct =&gt; Month.Oct , <span class="number">10</span></span><br><span class="line">Nov =&gt; Month.Nov , <span class="number">11</span></span><br><span class="line">Dec =&gt; Month.Dec , <span class="number">12</span>    </span><br></pre></td></tr></table></figure><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份。好处是简单，缺点是类型是int，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了Enum类来实现这个功能。这样我们就获得了Month类型的枚举类，可以直接使用Month.Jan来引用一个常量，或者枚举它的所有成员。不能Month.Jan.value进行赋值。</p><p>value属性则是自动赋给成员的int常量，默认从1开始计数。</p><p>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：@unique装饰器可以帮助我们检查保证没有重复值。访问这些枚举类型可以有若干种方法：可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,unique</span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    Sun = <span class="number">0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Sun)</span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Tue&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Weekday.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&#x27;=&gt;&#x27;</span>, member)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Weekday.Sun</span><br><span class="line">Weekday.Tue</span><br><span class="line">Weekday.Mon</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat    </span><br></pre></td></tr></table></figure><h2 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h2><h3 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self, name = <span class="string">&#x27;world&#x27;</span></span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s.&#x27;</span> %name )</span><br><span class="line"><span class="comment">#test2</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> Hello</span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">test1</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。比方说我们要定义一个Hello的class，就写一个test3.py模块. 当Python解释器载入test3模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个Hello的class对象。Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello</p><p>type()函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过type()函数创建出Hello类，而无需通过class Hello(object)…的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">self, name = <span class="string">&#x27;world&#x27;</span></span>):</span><span class="comment">#定义函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s.&#x27;</span> %name )</span><br><span class="line">Hello = <span class="built_in">type</span>(<span class="string">&#x27;Hello&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(hello = fn))<span class="comment">#创建Hello class</span></span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><p>metaclass直译就是元类的意思，我们创造一个实例需要先定义一个类，所以我们要创建一个类，就需要定义一个元类metaclass。连接起来就是：先定义metaclass，就可以创建类，最后创建实例。metaclass允许你创建类或者修改类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, attrs </span>):</span></span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>(<span class="params"><span class="built_in">list</span>, metaclass = ListMetaclass</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">L = MyList()</span><br><span class="line">L.add(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个add方法：定义ListMetaclass，按照默认习惯metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass。有了ListMetaclass，我们在定义类的时候还要指示使ListMetaclass来定制类，传入关键字参数metaclass。当我们传入关键字参数metaclass时，魔术就生效了，它指示Python解释器在创建MyList时，要通过ListMetaclass._<em>new</em>_()来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p>_<em>new</em>_()方法接收到的参数依次是：1.当前准备创建的类的对象；2.类的名字；3.类继承的父类集合；4.类的方法集合。</p><p>如果把Mylist中的list去掉，会报如下错误。显示没有append()这个函数，因为此时这个list是作为_<em>new</em>_()方法的输入参数，作为所要创建类的继承的父类集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test2.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    L.add(<span class="number">1</span>)</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test2.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;<span class="keyword">lambda</span>&gt;</span><br><span class="line">    attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">AttributeError: <span class="string">&#x27;MyList&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;append&#x27;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向对象高级Ⅰ</title>
      <link>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/</link>
      <guid>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/</guid>
      <pubDate>Fri, 17 Sep 2021 12:41:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;MethodType&quot;&gt;&lt;a href=&quot;#MethodType&quot; class=&quot;headerlink&quot; title=&quot;MethodType&quot;&gt;&lt;/a&gt;MethodType&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="MethodType"><a href="#MethodType" class="headerlink" title="MethodType"></a>MethodType</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">s = Student()</span><br><span class="line">s.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span>(<span class="params">self,age</span>):</span></span><br><span class="line">    self.age = age</span><br><span class="line">s.set_age = MethodType(set_age,s)</span><br><span class="line">s.set_age(<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_sorce</span>(<span class="params">self,score</span>):</span></span><br><span class="line">    self.score = score</span><br><span class="line">Student.set_score = set_sorce</span><br><span class="line">s.set_score(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>可以直接给实例绑定属性，也可以使用MethodType给实例绑定方法</p><p>MethodType（方法，实例）。但是其他实例不可以使用此方法。如果想要其他实例也可以使用此方法，就要给类绑定方法</p><h2 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用__slots__"></a>使用__slots__</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)<span class="comment">#用tuple定义允许绑定的属性名称</span></span><br><span class="line">s = Student()<span class="comment">#创建新的实例</span></span><br><span class="line">s.name = <span class="string">&#x27;Michael&#x27;</span><span class="comment">#绑定属性name</span></span><br><span class="line">s.age = <span class="number">25</span><span class="comment">#绑定属性age</span></span><br><span class="line"><span class="comment">#s.score = 99#绑定属性score</span></span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraduateStdent</span>(<span class="params">Student</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">g = GraduateStdent()</span><br><span class="line">g.score = <span class="number">9999</span></span><br><span class="line"><span class="built_in">print</span>(g.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">9999</span></span><br></pre></td></tr></table></figure><p>可以使用此关键字限制实例的属性，GraduateStudent作为Student的子类不受__slots__关键字的限制</p><h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._wscore</span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0-100!&#x27;</span>)</span><br><span class="line">        self._wscore = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self._birth = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br></pre></td></tr></table></figure><p>因为想要限制score的范围，又想简便赋值，所以采用装饰器。@property装饰器可以把一个方法变成属性调用的，@property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值。两个函数名称要相同。并且实例绑定的属性名称就是函数名称。因为是把属性转化为方法来执行的如果不设置setter方法，则就只有只读属性。</p><p>补充：@property（获取），@xxx(方法名).srtter(设置）,@xxx.deleter(删除）</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#父类动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span>(<span class="params">Animal</span>):</span><span class="comment">#哺乳动物</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>(<span class="params">Animal</span>):</span><span class="comment">#鸟类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#功能父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Flying...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Mammal,Runnable</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>用法如图所示，通过多重继承，一个子类就可以同时获得多个父类的所有功能。这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类</p><h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><h3 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__str__和__repr__"></a>__str__和__repr__</h3><img src="/images/py/面向对象高级/1.png" style="zoom:50%;"><img src="/images/py/面向对象高级/2.png" style="zoom:40%;"><p>上面打印类对象并不是很友好，显示的是对象的内存地址。此时我们重构 __repr__</p><p>当重构__str__时，此时，直接输出对象（面向开发者）显示对象的内存地址，使用print输入对象显示的是友好提示</p><img src="/images/py/面向对象高级/3.png" style="zoom:50%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a>__iter__</h2><p>如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环</p><h2 id="getitem-方法"><a href="#getitem-方法" class="headerlink" title="__getitem__方法"></a>__getitem__方法</h2><p>Fib实例虽然能作用于for循环，看起来和list有点像但是，把它当成list来使用还是不行。要表现得像list那样按照下标取出元素，需要实现__getitem__()方法.但是list有个神奇的切片方法：对于Fib却报错。原因是__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice，所以要做判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, n </span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span> ):</span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n,<span class="built_in">slice</span>):</span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        L = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(stop):</span><br><span class="line">            <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                L.append(a)</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line">f = Fib()</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">3</span>])</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="getattr-方法"><a href="#getattr-方法" class="headerlink" title="__getattr__方法"></a>__getattr__方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self,attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p>错误信息很清楚地告诉我们，没有找到score这个attribute。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个_<em>getattr</em>_()方法，动态返回一个属性, 返回函数也是完全可以的,调用形式进行改变。这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self,attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="built_in">print</span>(s.age())</span><br><span class="line"><span class="built_in">print</span>(s.ok)</span><br><span class="line"><span class="built_in">print</span>(s.ok())   </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">99</span></span><br><span class="line">&lt;function Student.__getattr__.&lt;<span class="built_in">locals</span>&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x000002850F3A5160</span>&gt;</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test1.py&quot;</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(s.ok())</span><br><span class="line">TypeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br></pre></td></tr></table></figure><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="__call__方法"></a>__call__方法</h2><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用instance.method()来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。任何类，只需要定义一个_<em>call</em>_()方法，就可以直接对实例进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;My name is %s.&#x27;</span>%self.name)</span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">s()</span><br><span class="line">Student(<span class="string">&#x27;Michael&#x27;</span>)()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>广播</title>
      <link>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/</link>
      <guid>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/</guid>
      <pubDate>Fri, 17 Sep 2021 03:19:04 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>聚合</title>
      <link>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/</link>
      <guid>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/</guid>
      <pubDate>Fri, 17 Sep 2021 02:49:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;求和&quot;&gt;&lt;a href=&quot;#求和&quot; class=&quot;headerlink&quot; title=&quot;求和&quot;&gt;&lt;/a&gt;求和&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">L = np.random.random(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(L))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">45.0698150033394</span></span><br></pre></td></tr></table></figure><h2 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(big_array), np.<span class="built_in">max</span>(big_array))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">2.0632153620026017e-06</span> <span class="number">0.9999991348477495</span></span><br></pre></td></tr></table></figure><p>对于 min、max、sum 和其他 NumPy 聚合，一种更简洁的语法形式是数 组对象直接调用这些方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line"><span class="built_in">print</span>(big_array.<span class="built_in">min</span>(), big_array.<span class="built_in">max</span>(), big_array.<span class="built_in">sum</span>())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">4.051526761639224e-06</span> <span class="number">0.9999997959904566</span> <span class="number">500274.7846662359</span></span><br></pre></td></tr></table></figure><h2 id="多维度聚合"><a href="#多维度聚合" class="headerlink" title="多维度聚合"></a>多维度聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.core.arrayprint <span class="keyword">import</span> printoptions</span><br><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#print(M)</span></span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">min</span>(axis=<span class="number">0</span>))<span class="comment">#每一列的最小值</span></span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">max</span>(axis=<span class="number">1</span>))<span class="comment">#每一行的最小值</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">7.863562459365775</span></span><br><span class="line">[<span class="number">0.58394473</span> <span class="number">0.41008368</span> <span class="number">0.65217043</span> <span class="number">0.28077708</span>]</span><br><span class="line">[<span class="number">0.71819992</span> <span class="number">0.91296865</span> <span class="number">0.93953933</span>]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通用函数</title>
      <link>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Sun, 12 Sep 2021 13:00:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;通用函数&quot;&gt;&lt;a href=&quot;#通用函数&quot; class=&quot;headerlink&quot; title=&quot;通用函数&quot;&gt;&lt;/a&gt;通用函数&lt;/h1&gt;&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th>运算符</th><th>对应的通用函数</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>np.add</td><td>//</td></tr><tr><td>-</td><td>np.subtract</td><td>//</td></tr><tr><td>-</td><td>np.negative</td><td>//</td></tr><tr><td>*</td><td>np.multiply</td><td>//</td></tr><tr><td>/</td><td>np.divide</td><td>//</td></tr><tr><td>//</td><td>np.floor_divide</td><td>3 // 2 = 1</td></tr><tr><td>**</td><td>np.power</td><td>2 ** 3 = 8</td></tr><tr><td>%</td><td>np.mod</td><td>//</td></tr></tbody></table><h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">3</span> - <span class="number">4j</span>, <span class="number">4</span> - <span class="number">3j</span>, <span class="number">2</span> + <span class="number">0j</span>, <span class="number">1</span> + <span class="number">1j</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">5.</span>         <span class="number">5.</span>         <span class="number">2.</span>         <span class="number">1.41421356</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;theta = &quot;</span>, theta)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sin(theta) = &quot;</span>, np.sin(theta))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cos(theta) = &quot;</span>, np.cos(theta))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tan(theta) = &quot;</span>, np.tan(theta))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">theta =  [<span class="number">0.</span>         <span class="number">1.57079633</span> <span class="number">3.14159265</span>]</span><br><span class="line">sin(theta) =  [<span class="number">0.0000000e+00</span> <span class="number">1.0000000e+00</span> <span class="number">1.2246468e-16</span>]</span><br><span class="line">cos(theta) =  [ <span class="number">1.000000e+00</span>  <span class="number">6.123234e-17</span> -<span class="number">1.000000e+00</span>]</span><br><span class="line">tan(theta) =  [ <span class="number">0.00000000e+00</span>  <span class="number">1.63312394e+16</span> -<span class="number">1.22464680e-16</span>]</span><br></pre></td></tr></table></figure><h2 id="指数和对数"><a href="#指数和对数" class="headerlink" title="指数和对数"></a>指数和对数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e^x =&quot;</span>, np.exp(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2^x =&quot;</span>, np.exp2(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3^x =&quot;</span>, np.power(<span class="number">3</span>, x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">e^x = [ <span class="number">2.71828183</span>  <span class="number">7.3890561</span>  <span class="number">20.08553692</span>]</span><br><span class="line"><span class="number">2</span>^x = [<span class="number">2.</span> <span class="number">4.</span> <span class="number">8.</span>]</span><br><span class="line"><span class="number">3</span>^x = [ <span class="number">3</span>  <span class="number">9</span> <span class="number">27</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ln(x) =&quot;</span>, np.log(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log2(x) =&quot;</span>, np.log2(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log10(x) =&quot;</span>, np.log10(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">e^x = [ <span class="number">2.71828183</span>  <span class="number">7.3890561</span>  <span class="number">20.08553692</span>]</span><br><span class="line"><span class="number">2</span>^x = [<span class="number">2.</span> <span class="number">4.</span> <span class="number">8.</span>]</span><br><span class="line"><span class="number">3</span>^x = [ <span class="number">3</span>  <span class="number">9</span> <span class="number">27</span>]</span><br></pre></td></tr></table></figure><p>还有一些特殊的版本，对于非常小的输入值可以保持较好的精度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.01</span>, <span class="number">0.1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;exp(x) - 1 =&quot;</span>, np.expm1(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log(1 + x) =&quot;</span>, np.log1p(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">exp(x) - <span class="number">1</span> = [<span class="number">0.</span>         <span class="number">0.0010005</span>  <span class="number">0.01005017</span> <span class="number">0.10517092</span>]</span><br><span class="line">log(<span class="number">1</span> + x) = [<span class="number">0.</span>         <span class="number">0.0009995</span>  <span class="number">0.00995033</span> <span class="number">0.09531018</span>]</span><br></pre></td></tr></table></figure><h2 id="专用的通用函数"><a href="#专用的通用函数" class="headerlink" title="专用的通用函数"></a>专用的通用函数</h2><p><code>from scipy import special</code></p><h1 id="高级通用函数特性"><a href="#高级通用函数特性" class="headerlink" title="高级通用函数特性"></a>高级通用函数特性</h1><h2 id="指定输出"><a href="#指定输出" class="headerlink" title="指定输出"></a>指定输出</h2><p>所有的通用函数都可以通过 out 参数 来指定计算结果的存放位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">2.</span>  <span class="number">0.</span>  <span class="number">4.</span>  <span class="number">0.</span>  <span class="number">8.</span>  <span class="number">0.</span> <span class="number">16.</span>  <span class="number">0.</span>]</span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">#一个 reduce 方法会对给定的元素和操作重复执行，直至得到单个的结果。</span></span><br><span class="line"><span class="built_in">print</span>(np.add.reduce(x))</span><br><span class="line"><span class="built_in">print</span>( np.multiply.reduce(x))</span><br><span class="line"><span class="comment">#如果需要存储每次计算的中间结果，可以使用 accumulate：</span></span><br><span class="line"><span class="built_in">print</span>(np.add.accumulate(x))</span><br><span class="line"><span class="built_in">print</span>(np.multiply.accumulate(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line">[ <span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span>   <span class="number">6</span>  <span class="number">24</span> <span class="number">120</span>]</span><br></pre></td></tr></table></figure><h2 id="外积"><a href="#外积" class="headerlink" title="外积"></a>外积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(np.multiply.outer(x, x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span> <span class="number">12</span> <span class="number">15</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span>]</span><br><span class="line"> [ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span> <span class="number">25</span>]]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向对象编程</title>
      <link>http://example.com/2021/09/12/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2021/09/12/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Sun, 12 Sep 2021 06:41:06 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;类和实例的概念&quot;&gt;&lt;a href=&quot;#类和实例的概念&quot; class=&quot;headerlink&quot; title=&quot;类和实例的概念&quot;&gt;&lt;/a&gt;类和实例的概念&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="类和实例的概念"><a href="#类和实例的概念" class="headerlink" title="类和实例的概念"></a>类和实例的概念</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score </span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span>%(self.name, self.score ))</span><br><span class="line">yi = Student(<span class="string">&#x27;zw&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">yi.print_score()</span><br><span class="line"><span class="built_in">print</span>(yi.score)</span><br><span class="line"><span class="built_in">print</span>(yi)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">zw: <span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x0000022DBFB973D0</span>&gt;</span><br></pre></td></tr></table></figure><p>Py中所有数据类型都可以视为对象，采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是Student这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个print_score消息，让对象自己把自己的数据打印出来。</p><p>定义类使用class关键字，Student为类的名称，一般大写开头，(object)表示该类是从哪个类继承下来的，通常没有合适的继承类就用object，这是所有类都会继承的类。由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去。注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。这里的话print_score叫做方法。</p><p>普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><p>如图yi被赋值Student类，yi相当于定义中的self，因此也可以调用相关属性。这里yi就叫做实例。类是创建实例的模板，实例则是一个个对象，方法就是与实例绑定的函数。</p><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法。如果又要允许外部代码修改score怎么办？可以再给Student类增加set_score方法。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量。如yi. _Student__name来访问。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score </span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span>%(self.__name, self.__score))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self,score</span>):</span></span><br><span class="line">        self.__score = score</span><br><span class="line">yi = Student(<span class="string">&#x27;zw&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">yi.print_score()</span><br><span class="line"><span class="built_in">print</span>(yi.get_name())</span><br><span class="line">yi.set_score(<span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(yi.get_score())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">zw: <span class="number">18</span></span><br><span class="line">zw</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><p>一个类可以有很多子类，这个类括号里就是它的父类，并且子类继承了父类的所有方法，当然了也可以重新在子类中定义父类中同名的方法，如图中Dog的run函数可以覆盖Animal的run函数。就如图中来说Dog类型是Animal，但是Animal的类型不是Dog。这就叫多态。新增一个Animal的子类，不必对run_twice()做任何修改，实际上，任何依赖Animal作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。多态的好处就是，当我们需要传入Dog、Cat、Tortoise……时，我们只需要接收Animal类型就可以了，因为Dog、Cat、Tortoise……都是Animal类型，然后，按照Animal类型进行操作即可。由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态的意思。</p><p>对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><p>对扩展开放：允许新增Animal子类；</p><p>对修改封闭：不需要修改依赖Animal类型的run_twice()等函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test2文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is rnning...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Eating meat...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cat is running...&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span>(<span class="params">animal</span>):</span></span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br><span class="line">run_twice(Dog())</span><br><span class="line">run_twice(Cat())</span><br><span class="line">a = Animal()</span><br><span class="line">b = Dog()</span><br><span class="line">c = Cat()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b,Animal))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a,Dog))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="type函数"><a href="#type函数" class="headerlink" title="type函数"></a>type函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test3文件</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> test2</span><br><span class="line"><span class="keyword">from</span> test2 <span class="keyword">import</span> Animal</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">abs</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fn))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(time))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="keyword">lambda</span> x: x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test2.run_twice))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vaue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dn = Animal()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Vaue))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Vaue()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dn))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">PS D:\VsPython&gt; &amp; D:/python38/python.exe d:/VsPython/test3.py</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">NoneType</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">builtin_function_or_method</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">module</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">module</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Vaue</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">test2</span>.<span class="title">Animal</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>Type可以判断类型</p></li><li><p>函数的类型判断。FunctionType代表普通定义函数或者从模块引入的函数。模块可以是第三方写的或者自己写的。BuiltinFunctionType代表内置函数。LambdaType代表匿名函数。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">import</span> test3</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func) == types.FunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test3.fn) == types.FunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(deepcopy) == types.FunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">max</span>) == types.BuiltinFunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">min</span>) == types.BuiltinFunctionType)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">abs</span>) == types.BuiltinFunctionType)</span><br><span class="line">f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f) == types.LambdaType)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">NoneType</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">builtin_function_or_method</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">module</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">module</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">function</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">test3</span>.<span class="title">Vaue</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">test2</span>.<span class="title">Animal</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br></pre></td></tr></table></figure><h2 id="class-方法"><a href="#class-方法" class="headerlink" title="__class__方法"></a>__class__方法</h2><p>__class__方法可以判断一个实例是由谁实例化的。由实例返回类的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    Country = <span class="string">&#x27;SH&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(People().Country)</span><br><span class="line"><span class="built_in">print</span>(People.__class__)</span><br><span class="line"><span class="built_in">print</span>((<span class="number">123</span>).__class__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>.__class__)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.2</span>.__class__)</span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>,).__class__)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">None</span>.__class__)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">SH</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">NoneType</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h2><p>如果判断两个对象类型是否相等，PEP8 规范推荐使用isinstance 函数。type 函数不认为子类是父类类型的一种，即不考虑继承关系。isinstance 函数，认为子类是父类类型的一种，即考虑继承关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = People()</span><br><span class="line">    t1 = Teacher()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(t1,People))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(t1) == People)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(t1,Teacher))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(t1) == Teacher)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span>    </span><br></pre></td></tr></table></figure><h2 id="bases-方法，type，object，class的区别和联系"><a href="#bases-方法，type，object，class的区别和联系" class="headerlink" title="__bases__方法，type，object，class的区别和联系"></a>__bases__方法，type，object，class的区别和联系</h2><p>__bases__方法的用处是判断一个类的父类是什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">People</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = People()</span><br><span class="line">    t1 = Teacher()</span><br><span class="line">    <span class="built_in">print</span>(People.__bases__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>.__bases__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>.__bases__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">object</span>.__bases__)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;,)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,</span>)</span></span><br><span class="line"><span class="class">()</span></span><br></pre></td></tr></table></figure><p>如上图下图所示，可以看出，object是所有类的基类，type是object的继承，而object是type的实例，type自己是自己的实例，所有对象都是type实例化的。</p><img src="/images/py/面向对象编程/1.png" style="zoom:67%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ABC&#x27;</span>.__len__())</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.x * self.x</span><br><span class="line">obj = MyObject()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;x&#x27;</span>))<span class="comment">#有属性x吗</span></span><br><span class="line"><span class="built_in">print</span>(obj.x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;y&#x27;</span>))<span class="comment">#有属性y吗</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">setattr</span>(obj,<span class="string">&#x27;y&#x27;</span>,<span class="number">19</span>))<span class="comment">#设置一个属性y</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;y&#x27;</span>))<span class="comment">#有属性y吗</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;y&#x27;</span>))<span class="comment">#设置属性y</span></span><br><span class="line"><span class="built_in">print</span>(obj.y)<span class="comment">#获取属性y</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;z&#x27;</span>,<span class="number">404</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;power&#x27;</span>))<span class="comment">#有属性power吗</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(obj,<span class="string">&#x27;power&#x27;</span>))<span class="comment">#获取属性power</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isascii&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>]</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">404</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject <span class="built_in">object</span> at <span class="number">0x000001BA8B450760</span>&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="dir方法"><a href="#dir方法" class="headerlink" title="dir方法"></a>dir方法</h2><p>dir方法可以继承对象的所有属性和方法</p><h2 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h2><ul><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(Student.name)</span><br><span class="line">s.name = <span class="string">&#x27;Mary&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(Student.name)</span><br><span class="line"><span class="keyword">del</span> s.name</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Student</span><br><span class="line">Student</span><br><span class="line">Mary</span><br><span class="line">Student</span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p>下面这个例子输出为2，事实上实例化时__init__方法就跟随执行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Student.count += <span class="number">1</span></span><br><span class="line">O = Student(<span class="string">&#x27;Mary&#x27;</span>)</span><br><span class="line">T = Student(<span class="string">&#x27;Mike&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Student.count)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/12/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://example.com/2021/09/11/py/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <guid>http://example.com/2021/09/11/py/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Sat, 11 Sep 2021 12:16:32 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;返回函数&quot;&gt;&lt;a href=&quot;#返回函数&quot; class=&quot;headerlink&quot; title=&quot;返回函数&quot;&gt;&lt;/a&gt;返回函数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">f = lazy_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">f1 = lazy_sum(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">f2 = lazy_sum(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(f1 == f2)</span><br><span class="line"><span class="built_in">print</span>(f,f1,f2)</span><br><span class="line"><span class="built_in">print</span>(f(),f1(),f2())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x000001712A9790D0</span>&gt; &lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x000001712A979160</span>&gt; &lt;function lazy_sum.&lt;<span class="built_in">locals</span>&gt;.<span class="built_in">sum</span> at <span class="number">0x000001712A9791F0</span>&gt;</span><br><span class="line"><span class="number">10</span> <span class="number">25</span> <span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>关于gobal关键字：如果真的想要在函数体内修改全局变量的值，就要使用global关键字。使用global关键字就是告诉python编译器这个变量不是局部变量而是全局变量，其实有点像是”引用”的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num1</span><br><span class="line">    num1 = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;修改后num1为&#x27;</span>,num1)</span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;初始num1&#x27;</span>,num1)</span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;运行函数后num1&#x27;</span>,num1)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">初始num1 <span class="number">1</span></span><br><span class="line">修改后num1为 <span class="number">2</span></span><br><span class="line">运行函数后num1 <span class="number">2</span></span><br></pre></td></tr></table></figure><p>关于nonlocal关键字</p><p>nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量。</p><p>关键字：nonlocal</p><p>　　1.外部必须有这个变量（对全局变量无效）</p><p>　　2.在内部函数声明nonlocal变量之前不能再出现同名变量</p><p>　　3.内部修改这个变量如果想在外部有这个变量的第一层函数中生效（只是对最近的一层的局部变量有效）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    num2 = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num2</span><br><span class="line">        num2 *= <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;num2 =&quot;</span>,num2)</span><br><span class="line">    <span class="keyword">return</span> fun2()</span><br><span class="line">fun()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">num2 = <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>闭包（Closure）是Python中的高级概念，它只出现在嵌套函数中，但和嵌套函数有很大的不同，那就是闭包使用了一个叫自由变量的东西。</p><p>实际中，闭包就是一个函数，只不过这个函数可以引用没有在该函数内部定义的变量，这个函数本身可以是匿名函数也可以是非匿名函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;series in averager:&quot;</span>,series)</span><br><span class="line">        total = <span class="built_in">sum</span>(series)</span><br><span class="line">        <span class="keyword">return</span> total / <span class="built_in">len</span>(series)</span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line">avg = make_averager()</span><br><span class="line"><span class="built_in">print</span>(avg(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(avg(<span class="number">11</span>))<span class="comment">#实际上此处avg调用都是同一个函数averager</span></span><br><span class="line">avg1 = make_averager()</span><br><span class="line"><span class="built_in">print</span>(avg1(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">series <span class="keyword">in</span> averager: [<span class="number">10</span>]</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line">series <span class="keyword">in</span> averager: [<span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line">series <span class="keyword">in</span> averager: [<span class="number">10</span>]</span><br><span class="line"><span class="number">10.0</span></span><br></pre></td></tr></table></figure><p>看出端倪了吗?通过调用avg(n）就可以实现更新历史series并且计算当前series的平均值。那么到底是如何实现更新series 呢?讲道理，series是 make_averager函数中定义的一个局部变量，并且当通过avg(n)调用时，明显make_averager已经被执行过了，应该就访问不到series变量了。<br>实际上在嵌套函数 averager中，series是一个自由变量(free variable)，表明这个变量没有被绑定在局部作用域中，同时averager函数的闭包行为使得它可以访问到这个自由变量。</p><img src="/images/py/函数式编程/1.png" style="zoom:67%;"><p>上面代码中的 series 是可变变量，在内部函数中使用时没有问题，但如果是不可变变量，如 string、number、tuple 等，在内部函数引用则会报错。</p><h3 id="闭包的各种解释"><a href="#闭包的各种解释" class="headerlink" title="闭包的各种解释"></a>闭包的各种解释</h3><h4 id="解释1"><a href="#解释1" class="headerlink" title="解释1"></a>解释1</h4><p>通过一个函数返回父函数里的一个局部变量，延长那个变量的生命周期。</p><h4 id="解释2"><a href="#解释2" class="headerlink" title="解释2"></a>解释2</h4><ul><li>在一个外函数中定义了一个内函数</li><li>内函数用到了外函数的临时变量</li><li>外函数的返回值是内函数的引用</li></ul><h4 id="解释3"><a href="#解释3" class="headerlink" title="解释3"></a>解释3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#闭包函数的实例</span></span><br><span class="line"><span class="comment">#outer是外部函数，a和b都是外函数的临时变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">a</span>):</span></span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line">    <span class="comment">#inner是内函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="comment">#在内函数中用到了外函数的临时变量</span></span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line">    <span class="comment">#外函数的返回值是内函数的引用</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在这里我们调用外函数传入参数5</span></span><br><span class="line">    <span class="comment">#此时外函数两个临时变量a是5，b是10，并创建了内函数，然后把内函数的引用返回存给了demo</span></span><br><span class="line">    <span class="comment">#外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定</span></span><br><span class="line">    demo = outer(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">#我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span></span><br><span class="line">    <span class="comment">#demo存了外部函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span></span><br><span class="line">    demo()<span class="comment">#15</span></span><br><span class="line">    </span><br><span class="line">    demo2 = outer(<span class="number">7</span>)</span><br><span class="line">    demo2()<span class="comment">#17</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><h4 id="我的解释"><a href="#我的解释" class="headerlink" title="我的解释"></a>我的解释</h4><p>如下所示，我来做一个解释，fs.append(f)向列表里添加的实际上是一个函数，当循环完过后返回的列表fs实际上是三个函数变量，至于输出为什么不是1，4，9而是9，9，9。原因是i三次循环过后变成了3，所以输出都为9.实际上运行三次循环给列表赋值后，i就已经变成了3，下面调用时则都是9.。如第二段代码所示，f（i)立即被执行所以输出会变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">            <span class="keyword">return</span> i * i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1,f2,f3 = count()</span><br><span class="line"><span class="built_in">print</span>(f1(),f2(),f3())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">9</span> <span class="number">9</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j * j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        fs.append(f(i))</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1,f2,f3 = count()</span><br><span class="line"><span class="built_in">print</span>(f1(),f2(),f3())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="关于判断闭包函数的方法"><a href="#关于判断闭包函数的方法" class="headerlink" title="关于判断闭包函数的方法"></a>关于判断闭包函数的方法</h3><p>若输出有cell关键字则表示是一个闭包函数。若是None则表明不是一个闭包函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;eva&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(inner.__closure__)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">f = func()</span><br><span class="line">f()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">(&lt;cell at <span class="number">0x000002017FE206D0</span>: <span class="built_in">str</span> <span class="built_in">object</span> at <span class="number">0x000002017FD8DB70</span>&gt;,)</span><br><span class="line">eva</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>lambda可以作为函数返回值，也可以赋值给变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mypow3</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x * x * x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(mypow3(),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])))</span><br><span class="line">L = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>)))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。装饰器要写在函数定义前面。本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator。我们要借助Python的@语法，把decorator置于函数的定义处。</p><p>此处来讲一下now函数运行的调用过程，调用now时，首先要明白@log的实际上是一个赋值，now = log（‘execute’）（now），这样的话先调用log返回decorator，decorator无内容返回wrapper，wrapper执行打印返回func函数。因为我们讲了函数也是对象，它有__name__等属性，但你去看经过decorator装饰之后的函数，它们的__name__已经从原来的’now’变成了’wrapper’。因为返回的那个wrapper()函数名字就是’wrapper’，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写wrapper.__name__ = func.__name__这样的代码，Python内置的functools.wraps就是干这个事的，所以，一个完整的decorator的写法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw </span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span>%(text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw )</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2021-9-11&#x27;</span>)</span><br><span class="line">f = now</span><br><span class="line"><span class="built_in">print</span>(f.__name__)</span><br><span class="line">now()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">wrapper</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2021</span>-<span class="number">9</span>-<span class="number">11</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw </span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span>%(text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw )</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2021-9-11&#x27;</span>)</span><br><span class="line">f = now</span><br><span class="line"><span class="built_in">print</span>(f.__name__)</span><br><span class="line">now()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">now</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2021</span>-<span class="number">9</span>-<span class="number">11</span></span><br></pre></td></tr></table></figure><p>对如下代码做一个解释，res实际上是None，他是fn函数执行后的返回值，由于fn函数没有实际返回值所以返回None，实际上可以去掉res = fn和return res这两句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">fn</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw </span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;begin call %s():&#x27;</span> %fn.__name__)</span><br><span class="line">        res = fn(*args, **kw )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;end call %s():&#x27;</span> %fn.__name__)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2021-9-11&#x27;</span>)</span><br><span class="line">f = now</span><br><span class="line">now()</span><br><span class="line"><span class="built_in">print</span>(now())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">begin call now():</span><br><span class="line"><span class="number">2021</span>-<span class="number">9</span>-<span class="number">11</span></span><br><span class="line">end call now():</span><br><span class="line">begin call now():</span><br><span class="line"><span class="number">2021</span>-<span class="number">9</span>-<span class="number">11</span></span><br><span class="line">end call now():</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base = <span class="number">2</span> )</span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;1101&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(int2(<span class="string">&#x27;10000&#x27;</span>, base = <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1101</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="number">1101</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/11/py/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高阶函数</title>
      <link>http://example.com/2021/09/10/py/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/09/10/py/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Fri, 10 Sep 2021 14:00:50 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h2&gt;&lt;p&gt;函数名称也是变量&lt;/p&gt;
&lt;p&gt;传入函数&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>函数名称也是变量</p><p>传入函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y,f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x),f(y)</span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">1</span>,<span class="number">2</span>,<span class="built_in">abs</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h2><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><p>再看reduce的用法。reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</p><p>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</p><p>如下例子，将字符串转化成浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">    digits = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;4&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;5&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;6&#x27;</span>:<span class="number">6</span>,<span class="string">&#x27;7&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;8&#x27;</span>:<span class="number">8</span>,<span class="string">&#x27;9&#x27;</span>:<span class="number">9</span>,<span class="string">&#x27;.&#x27;</span>:<span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> digits[s]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    L = <span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(L):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            k = i</span><br><span class="line">    L.pop(k)</span><br><span class="line">    d = <span class="built_in">len</span>(L) - k</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y:x * <span class="number">10</span> + y, <span class="built_in">map</span>(char2num,L))/<span class="built_in">pow</span>(<span class="number">10</span>,d)</span><br><span class="line"><span class="built_in">print</span>(fn(<span class="string">&#x27;2787.114514&#x27;</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">2787.114514</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>过滤函数。 判断为False的数据，filter函数返回值类型为Iterator </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">filter</span>(is_odd,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>])))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure><h2 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h2><p>排序函数用法如下所示，可以加上key关键字对每一个数据使用函数后进行判断排序，并且可以加上reverse关键字进行反向排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;about&#x27;</span>,<span class="string">&#x27;Zoo&#x27;</span>,<span class="string">&#x27;Credit&#x27;</span>],key = <span class="built_in">str</span>.lower, reverse = <span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([-<span class="number">7</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">3</span>],key = <span class="built_in">abs</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, -<span class="number">7</span>, <span class="number">34</span>]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/10/py/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>numpy随机函数</title>
      <link>http://example.com/2021/09/09/numpy/numpy%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/09/09/numpy/numpy%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Thu, 09 Sep 2021 15:27:37 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/09/numpy/numpy%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>numpy.random.seed</title>
      <link>http://example.com/2021/09/09/numpy/numpy%20random%20seed/</link>
      <guid>http://example.com/2021/09/09/numpy/numpy%20random%20seed/</guid>
      <pubDate>Thu, 09 Sep 2021 15:24:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;1, 利用随机数种子，每次生成的随机数相同。这是什么意思?&lt;/p&gt;
&lt;p&gt;2,随机数种子的参数怎么选择？在别人的代码中经常看到np.random.seed(Argument),这个参数不一样，有的是0，有的是１，当然还有其他数。那这个参数应该怎么选择呢？&lt;/p&gt;
&lt;h3 i</description>
        
      
      
      
      <content:encoded><![CDATA[<p>1, 利用随机数种子，每次生成的随机数相同。这是什么意思?</p><p>2,随机数种子的参数怎么选择？在别人的代码中经常看到np.random.seed(Argument),这个参数不一样，有的是0，有的是１，当然还有其他数。那这个参数应该怎么选择呢？</p><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">3</span>):</span><br><span class="line">            np.random.seed(<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(np.random.randn(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.76405235</span> <span class="number">0.40015721</span> <span class="number">0.97873798</span> <span class="number">2.2408932</span>  <span class="number">1.86755799</span>]]</span><br><span class="line">[[<span class="number">1.76405235</span> <span class="number">0.40015721</span> <span class="number">0.97873798</span> <span class="number">2.2408932</span>  <span class="number">1.86755799</span>]]</span><br><span class="line">[[<span class="number">1.76405235</span> <span class="number">0.40015721</span> <span class="number">0.97873798</span> <span class="number">2.2408932</span>  <span class="number">1.86755799</span>]]</span><br><span class="line">[[<span class="number">-0.97727788</span>  <span class="number">0.95008842</span> <span class="number">-0.15135721</span> <span class="number">-0.10321885</span>  <span class="number">0.4105985</span> ]]</span><br><span class="line">[[<span class="number">0.14404357</span> <span class="number">1.45427351</span> <span class="number">0.76103773</span> <span class="number">0.12167502</span> <span class="number">0.44386323</span>]]</span><br><span class="line">[[ <span class="number">0.33367433</span>  <span class="number">1.49407907</span> <span class="number">-0.20515826</span>  <span class="number">0.3130677</span>  <span class="number">-0.85409574</span>]]</span><br><span class="line">[[<span class="number">-2.55298982</span>  <span class="number">0.6536186</span>   <span class="number">0.8644362</span>  <span class="number">-0.74216502</span>  <span class="number">2.26975462</span>]]</span><br><span class="line">[[<span class="number">-1.45436567</span>  <span class="number">0.04575852</span> <span class="number">-0.18718385</span>  <span class="number">1.53277921</span>  <span class="number">1.46935877</span>]]</span><br><span class="line">[[ <span class="number">0.15494743</span>  <span class="number">0.37816252</span> <span class="number">-0.88778575</span> <span class="number">-1.98079647</span> <span class="number">-0.34791215</span>]</span><br><span class="line"> [ <span class="number">0.15634897</span>  <span class="number">1.23029068</span>  <span class="number">1.20237985</span> <span class="number">-0.38732682</span> <span class="number">-0.30230275</span>]]</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">[[<span class="number">1.76405235</span> <span class="number">0.40015721</span> <span class="number">0.97873798</span> <span class="number">2.2408932</span>  <span class="number">1.86755799</span>]]</span><br><span class="line">[[<span class="number">-0.97727788</span>  <span class="number">0.95008842</span> <span class="number">-0.15135721</span> <span class="number">-0.10321885</span>  <span class="number">0.4105985</span> ]]</span><br><span class="line">[[<span class="number">0.14404357</span> <span class="number">1.45427351</span> <span class="number">0.76103773</span> <span class="number">0.12167502</span> <span class="number">0.44386323</span>]]</span><br><span class="line">[[ <span class="number">0.33367433</span>  <span class="number">1.49407907</span> <span class="number">-0.20515826</span>  <span class="number">0.3130677</span>  <span class="number">-0.85409574</span>]]</span><br><span class="line">[[<span class="number">-2.55298982</span>  <span class="number">0.6536186</span>   <span class="number">0.8644362</span>  <span class="number">-0.74216502</span>  <span class="number">2.26975462</span>]]</span><br><span class="line">[[<span class="number">-1.45436567</span>  <span class="number">0.04575852</span> <span class="number">-0.18718385</span>  <span class="number">1.53277921</span>  <span class="number">1.46935877</span>]]</span><br><span class="line">[[ <span class="number">0.15494743</span>  <span class="number">0.37816252</span> <span class="number">-0.88778575</span> <span class="number">-1.98079647</span> <span class="number">-0.34791215</span>]]</span><br><span class="line">[[ <span class="number">0.15634897</span>  <span class="number">1.23029068</span>  <span class="number">1.20237985</span> <span class="number">-0.38732682</span> <span class="number">-0.30230275</span>]]</span><br></pre></td></tr></table></figure><p>两次利用随机数种子后，即便是跳出循环后，生成随机数的结果依然是相同的。第一次跳出while循环后，进入第二个while循环，得到的两个随机数组确实和加了随机数种子不一样。但是，后面的加了随机数种子的，八次循环中的结果和前面的结果是一样的。<strong>说明，随机数种子对后面的结果一直有影响。同时，加了随机数种子以后，后面的随机数组都是按一定的顺序生成的。</strong></p><p>在同样的随机种子后第六次的随机数生成结果，(结果高亮部分)，两行五列的数组和两个一行五列的数组结果相同。说明，在生成多行随机数组时，是由单行随机数组组合而成的。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    np.random.seed(<span class="number">1</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(np.random.randn(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">1.76405235</span>  <span class="number">0.40015721</span>  <span class="number">0.97873798</span>  <span class="number">2.2408932</span>   <span class="number">1.86755799</span>]]</span><br><span class="line">[[<span class="number">-0.97727788</span>  <span class="number">0.95008842</span> <span class="number">-0.15135721</span> <span class="number">-0.10321885</span>  <span class="number">0.4105985</span> ]]</span><br><span class="line">[[ <span class="number">0.14404357</span>  <span class="number">1.45427351</span>  <span class="number">0.76103773</span>  <span class="number">0.12167502</span>  <span class="number">0.44386323</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">1.62434536</span> <span class="number">-0.61175641</span> <span class="number">-0.52817175</span> <span class="number">-1.07296862</span>  <span class="number">0.86540763</span>]]</span><br><span class="line">[[<span class="number">-2.3015387</span>   <span class="number">1.74481176</span> <span class="number">-0.7612069</span>   <span class="number">0.3190391</span>  <span class="number">-0.24937038</span>]]</span><br><span class="line">[[ <span class="number">1.46210794</span> <span class="number">-2.06014071</span> <span class="number">-0.3224172</span>  <span class="number">-0.38405435</span>  <span class="number">1.13376944</span>]]</span><br></pre></td></tr></table></figure><p>你可以实验，在你的电脑上，当随机数种子参数为0和1时，生成的随机数和我上面高亮的结果相同。说明该参数指定了一个随机数生成的起始位置。每个参数对应一个位置。并且在该参数确定后，其后面的随机数的生成顺序也就确定了。</p><p>把seed()中的参数比喻成“堆”；np. seed(5)：表示第5堆种子。</p><p>所以，现在我们回答了我的第二个疑问：随机数种子的参数怎么选择？我认为随意，这个参数只是确定一下随机数的起始位置。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/09/numpy/numpy%20random%20seed/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
