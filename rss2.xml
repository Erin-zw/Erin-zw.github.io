<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Tue, 07 Sep 2021 12:42:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>字符串和编码</title>
      <link>http://example.com/2021/09/07/py/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
      <guid>http://example.com/2021/09/07/py/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
      <pubDate>Tue, 07 Sep 2021 12:05:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;编码&quot;&gt;&lt;a href=&quot;#编码&quot; class=&quot;headerlink&quot; title=&quot;编码&quot;&gt;&lt;/a&gt;编码&lt;/h2&gt;&lt;h3 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>ASCII编码能表示的整数0-255，一个字节，表示不了中文，Unicode通常用两个字节表示一个字符，汉字中用Unicode编码为01001110 00101101，A用Unicode编码为00000000 01000001，所以占用无用内存。因此又产生了UTF-8编码，可以根据字符大小占用内存，A的编码为1000001。UTF-8一般用一个字节表示字母，三个字节表示汉字。</p><h3 id="ord和chr函数"><a href="#ord和chr函数" class="headerlink" title="ord和chr函数"></a>ord和chr函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))<span class="comment">#65</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;中&#x27;</span>))<span class="comment">#20013</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">66</span>))<span class="comment">#B</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">25991</span>))<span class="comment">#文</span></span><br></pre></td></tr></table></figure><p>如果知道字符的十六进制表示可以直接使用转移字符表示</p><p><code>print(&#39;\u4e2d\u6587&#39;)#中文</code></p><h3 id="编码解码函数和字符串长度函数"><a href="#编码解码函数和字符串长度函数" class="headerlink" title="编码解码函数和字符串长度函数"></a>编码解码函数和字符串长度函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line">中文</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>))<span class="comment">#6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;abc&#x27;</span>))<span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;123&#x27;</span>))<span class="comment">#3</span></span><br></pre></td></tr></table></figure><h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="%格式化"></a>%格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, %s&#x27;</span>   %  <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="comment">#hello, world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%2d %02d %s&#x27;</span> %(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="comment"># 3 01 abc</span></span><br></pre></td></tr></table></figure><p>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串。%2d如果占不满则用空格填补，%02d用0填补。并且%.2f表示保留两位小数。</p><h3 id="format格式化"><a href="#format格式化" class="headerlink" title="format格式化"></a>format格式化</h3><p>另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多，1后面的冒号相当于注释。此种方法类似str.函数（输入）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">17.125</span>)) </span><br><span class="line"><span class="comment">#Hello, 小明, 成绩提升了 17.1%</span></span><br></pre></td></tr></table></figure><h3 id="f-string格式化"><a href="#f-string格式化" class="headerlink" title="f-string格式化"></a>f-string格式化</h3><p>最后一种格式化字符串的方法是使用以f开头的字符串，称之为f-string，它和普通字符串不同之处在于，字符串如果包含{xxx}，就会以对应的变量替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">2.5</span></span><br><span class="line">s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;The area of a circle with radius <span class="subst">&#123;r&#125;</span> is <span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#The area of a circle with radius 2.5 is 19.62</span></span><br></pre></td></tr></table></figure><p>两个乘号是乘方的意思，优先级高于一个乘号</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/07/py/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E4%BB%A5%E5%8F%8A%E6%A0%BC%E5%BC%8F%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2021/09/01/STM32/SysTick/</link>
      <guid>http://example.com/2021/09/01/STM32/SysTick/</guid>
      <pubDate>Wed, 01 Sep 2021 15:56:35 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2021/09/01/STM32/SysTick/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>栈帧</title>
      <link>http://example.com/2021/08/26/C/%E6%A0%88%E5%B8%A7/</link>
      <guid>http://example.com/2021/08/26/C/%E6%A0%88%E5%B8%A7/</guid>
      <pubDate>Wed, 25 Aug 2021 16:52:19 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;每次调用一个函数，都要为该次调用的函数实例分配栈空间。为单个函数分配的那部分栈空间就叫做&lt;strong&gt;栈帧（ Stack Frame ）&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>每次调用一个函数，都要为该次调用的函数实例分配栈空间。为单个函数分配的那部分栈空间就叫做<strong>栈帧（ Stack Frame ）</strong>。调用栈（ Call Stack ）就是正在使用的栈空间，由多个嵌套调用函数所使用的栈帧组成。具体来说，Call Stack  就是指存放某个程序的正在运行的函数的信息的栈。Call Stack 由 Stack Frames 组成，每个 Stack Frame  对应于一个未完成运行的函数。</p><p>需要注意的是，在内存中，栈是从高地址向低地址延伸的，即栈底对应高地址，栈顶对应低地址。</p><h2 id="栈帧寄存器"><a href="#栈帧寄存器" class="headerlink" title="栈帧寄存器"></a>栈帧寄存器</h2><p>在 Stack Frame 中，涉及到三种重要的特殊寄存器：</p><ul><li>ESP 寄存器为 Stack Pointer ，它始终指向栈顶的位置。</li><li>EIP 寄存器（instruction pointer ）为返回地址，它是调用函数（ Caller ）在执行完 Call 指令后的下一条指令的地址。</li><li>EBP 寄存器为 Frame Pointer（ 亦称 Base Pointer ），它被用作在当前的栈帧中寻址所有的函数参数以及局部变量。指向当前的栈帧的底部</li></ul><h2 id="栈帧组成"><a href="#栈帧组成" class="headerlink" title="栈帧组成"></a>栈帧组成</h2><ul><li><p>the arguments (parameter values) passed to the routine (if any);传递给例程的参数（参数值）（如果有）；</p></li><li><p>the return address back to the routine’s caller返回给例程调用者的返回地址</p></li><li><p>space for the local variables of the routine (if any).例程局部变量的空间（如果有的话）</p></li></ul><img src="/images/C/%E6%A0%88%E5%B8%A7/1.jpg" style="zoom:67%;"><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><ul><li>参数入栈: 将参数按照调用约定(C 是从右向左)依次压入系统栈中;</li><li>返回地址入栈: 将当前代码区调用指令的下一条指令地址压入栈中，供函数返回时继续执行;</li><li>代码跳转: 处理器将代码区跳转到被调用函数的入口处;</li><li>把存放在 EBP 寄存器的 Frame Pointer 地址压入栈；<code>push ebp</code></li><li>更新 EBP 寄存器为当前栈顶的地址；<code>mov ebp, esp</code></li><li>给新栈帧分配空间 <code>sub esp, XXX</code></li><li>把局部变量压入栈；</li><li>把保存寄存器里的值压入栈；</li></ul><p>最后两个步骤实际上sp在不断加加</p><h2 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h2><ul><li>保存被调用函数的返回值到 eax 寄存器中；<code>mov eax, xxx</code></li><li>恢复 esp 同时回收局部变量空间；<code>mov esp, ebp</code></li><li>将上一个栈帧底部位置恢复到 ebp；<code>pop ebp</code></li><li>弹出当前栈顶元素,从栈中取到返回地址,并跳转到该位置 ；<code>ret</code></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/26/C/%E6%A0%88%E5%B8%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>\r\n</title>
      <link>http://example.com/2021/08/25/C/%E6%8D%A2%E8%A1%8C%E5%9B%9E%E8%BD%A6/</link>
      <guid>http://example.com/2021/08/25/C/%E6%8D%A2%E8%A1%8C%E5%9B%9E%E8%BD%A6/</guid>
      <pubDate>Wed, 25 Aug 2021 01:20:57 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;概念区分&quot;&gt;&lt;a href=&quot;#概念区分&quot; class=&quot;headerlink&quot; title=&quot;概念区分&quot;&gt;&lt;/a&gt;概念区分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;\r（return）是回车符，即将光标回到当前行的行首(而不会换到下一行)，之后的输出会把之前的输出覆盖&lt;/li</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h3><ul><li>\r（return）是回车符，即将光标回到当前行的行首(而不会换到下一行)，之后的输出会把之前的输出覆盖</li><li>\n（newline）是换行符，即换到当前位置的下一位置，而不会回到行首；</li></ul><h3 id="不同系统中行末尾"><a href="#不同系统中行末尾" class="headerlink" title="不同系统中行末尾"></a>不同系统中行末尾</h3><ul><li>Unix系统里，每行结尾只有“&lt;换行&gt;”，即\n；</li><li>Windows，MS-DOS系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即\r\n；</li><li>Mac系统里，每行结尾是“&lt;回车&gt;”，即\r；</li></ul><p>也就是说：</p><ul><li>Linux中遇到换行符(“\n”)会进行回车+换行的操作，回车符（“\r”）反而只会作为控制字符(“^M”)显示，不发生回车的操作。</li><li>而windows中要回车符+换行符(“\r\n”)才会回车+换行，缺少一个控制符或者顺序不对都不能正确的另起一行。</li></ul><p>造成的后果：</p><ul><li>Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；</li><li>Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/25/C/%E6%8D%A2%E8%A1%8C%E5%9B%9E%E8%BD%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单片机位数</title>
      <link>http://example.com/2021/08/24/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%8D%95%E7%89%87%E6%9C%BA%E4%BD%8D%E6%95%B0/</link>
      <guid>http://example.com/2021/08/24/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%8D%95%E7%89%87%E6%9C%BA%E4%BD%8D%E6%95%B0/</guid>
      <pubDate>Mon, 23 Aug 2021 16:52:36 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;位数定义&quot;&gt;&lt;a href=&quot;#位数定义&quot; class=&quot;headerlink&quot; title=&quot;位数定义&quot;&gt;&lt;/a&gt;位数定义&lt;/h3&gt;&lt;p&gt;32位单片机的32位是指单片机的“字长”，也就是一次运算中参与运算的数据长度，这个位是指二进制位。&lt;/p&gt;
&lt;ul&gt;
&lt;li</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="位数定义"><a href="#位数定义" class="headerlink" title="位数定义"></a>位数定义</h3><p>32位单片机的32位是指单片机的“字长”，也就是一次运算中参与运算的数据长度，这个位是指二进制位。</p><ul><li><p>如果总线宽度与CPU一次处理的数据宽度相同，则这个宽度就是所说的单片机位数。</p></li><li><p>如果总线宽度与CPU一次处理的数据宽度不同，总线宽度小于CPU一次处理的数据宽度，则以CPU的数据宽度定义单片机的位数，但称为准多少位。比如某CPU是16位但总线是8位，所以它是准16位。</p></li></ul><h3 id="位数影响"><a href="#位数影响" class="headerlink" title="位数影响"></a>位数影响</h3><p>单片机位数与单片机的性能密切相关，通常32位机的性能要高于16位机，而16位机的性能又要高于8位机。为什么会这样呢？</p><ul><li><p>位数不同，运算效率不同。对于8位机而言，当某个运算的结果或者中间值大于255时，如100+200=300这样的运算，它不能一次完成。因此，要对这样的一个式子进行运算，就要编写一段程序，将运算分步完成，最后合成起来得到一个正确的结果。而如果采用16位单片机来运算的话，那么一次运算就够了，显然分步完成所需要的时间要远远大于单步完成所需要的时间。</p></li><li><p>商业因素。通常运算能力越高，表示这个单片机性能越强，当然，价格高一些人们也可以接受，有了价格空间，生产商通常都会在这些芯片中提供更多的其他的功能，使得芯片的整体性能得到更大的提升。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>8位单片机： 80C51系列，PIC系列，AVR系列</p><p>16位单片机：80C196、MSP430系列</p><p>32位单片机：ARM系列</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/24/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%8D%95%E7%89%87%E6%9C%BA%E4%BD%8D%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>getchar的几个例子</title>
      <link>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/</link>
      <guid>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/</guid>
      <pubDate>Mon, 23 Aug 2021 11:31:01 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;例子1&quot;&gt;&lt;a href=&quot;#例子1&quot; class=&quot;headerlink&quot; title=&quot;例子1&quot;&gt;&lt;/a&gt;例子1&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((c=getchar())!=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c,%d&quot;</span>,c, n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>输入:<br> ssss回车<br> 得到:<br> s,0s,0s,0s,0<br> ,0 光标处(等待输入)<br> 其实循环执行了五次，前四次输出s，第五次输出的是回车，所以才会出现：输出ssss后下一行的光标出（等待输入）</li><li>如果我们输入：<br> ksssa<br> 输出：<br> k,0s,0s,0s,0</li></ol><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">    getchar();</span><br><span class="line">    c=getchar();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>输入:<br> ssss回车<br> 得到:<br> ssss<br> 光标处(等待输入)<br> 其实循环执行了五次，前四次输出s，第五次输出的是回车，所以才会出现：输出ssss后下一行的光标出（等待输入）</p></li><li><p>如果我们输入：<br>ksssa回车<br>输出：<br>ksss光标处(等待输入)</p><p>说明:程序已经跳出while循环,但是由于我们用getchar();吃掉了回车,后面第7句c=getchar();需要你输入一个字符(因为ksssa回车后面并没有新的字符)，所以程序仍然没有结束.</p><p>如果注释掉getchar();</p><p>输入：ksssa回车</p><p>输出：</p><p>ksss</p><p>光标处(程序结束) </p><p>最后一个回车就被c = getchar()读取了</p></li></ol><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输入:<br>1234回车<br>得到：<br>Fine.Fine.Fine.Fine.Fine.光标处(等待输入)</p><p>说明：ch依次被赋值1234回车，注意回车刷新缓冲区的同时也被赋值给ch，这个五个字符均不是‘#’故运行了五次，仍为跳出循环。</p><p>2.输入：<br>1234#回车<br>得到：<br>Fine.Fine.Fine.Fine.光标处（程序结束）</p><p>说明：ch依次被赋值1234#回车，循环执行到#时候跳出，故循环只执行4次。</p><h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();<span class="comment">//吃掉回车</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法只适合单个输入：</p><p>1.输入：1回车<br>得到： Fine.光标处(等待输入)</p><p>2.输入： 123回车<br>得到： Fine.Fine.光标处(等待输入)</p><p>说明：实际上ch只接收了1和3 的值，2和回车都被getchar()这个语句吃掉了</p><h3 id="例子5"><a href="#例子5" class="headerlink" title="例子5"></a>例子5</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决问题</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>输入输出函数</title>
      <link>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Mon, 23 Aug 2021 11:28:52 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;错误报告&quot;&gt;&lt;a href=&quot;#错误报告&quot; class=&quot;headerlink&quot; title=&quot;错误报告&quot;&gt;&lt;/a&gt;错误报告&lt;/h2&gt;&lt;p&gt;标准库函数在一个外部整型变量errno(在errno.h中定义)中保存错误代码之后把这个信息传给用户程序，提示操作失败的准确</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="错误报告"><a href="#错误报告" class="headerlink" title="错误报告"></a>错误报告</h2><p>标准库函数在一个外部整型变量errno(在errno.h中定义)中保存错误代码之后把这个信息传给用户程序，提示操作失败的准确原因。</p><p>perror函数简化向用户报告这些错误的过程，函数原型定义于stdio.h：</p><p><code>void perror (char const *message);</code></p><p>如果messgae不是指向NULL并且指向一个非空字符串，就打印这个字符串，后面跟上一个分号和空格。</p><h2 id="终止执行"><a href="#终止执行" class="headerlink" title="终止执行"></a>终止执行</h2><p>另一个函数exit，定义于stdlib.h，函数原型如下：</p><p><code>void exit(int status);</code></p><p>status参数传给操作系统，用于提示程序是否正常完成，这个函数经常用于perror发现错误后用来终止程序。</p><h2 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>计算机的存储在物理上是二进制的，所以文本文件与二进制文件的区别并不是<strong>物理</strong>上的，而是<strong>逻辑</strong>上的。这两者只是在<strong>编码层次</strong>上有差异。 </p><ul><li><p>文本文件是基于字符编码的文件，常见编码方式由ASCII，UNICODE等。文本文件一般是定长编码，如ASCII是8个比特代表一个字符。</p></li><li><p>二进制文件是基于值编码的文件。二进制文件是变长编码，多少比特一个值由你决定。</p></li></ul><p>以BMP文件为例，其头部是较为固定长度的文件头信息，前2字节用来记录文件为BMP格式，接下来的8个字节用来记录文件长度，再接下来的4字节用来 记录BMP文件头的长度，可以看出其编码是基于值的（不定长的，2、4、8字节长的值都有），所以BMP是二进制文件。 </p><h3 id="读取过程"><a href="#读取过程" class="headerlink" title="读取过程"></a>读取过程</h3><p>文本工具打开一个文件的过程是怎样的呢？拿记事本来说，它首先读取文件物理上所对应的二进制比特流（前面已经说了，存储都是二进制的），然后按照你所选择 的解码方式来解释这个流，然后将解释结果显示出来。一般来说，你选取的解码方式会是ASCII码形式（ASCII码的一个字符是８个比特），接下来，它8 个比特8个比特地来解释这个文件流。</p><p>例如对于这么一个文件流”01000000_01000001_01000010_01000011”(下划线 “_”，是我为了增强可读性，而手动添加的)，第一个8比特“01000000”按ASCII码来解码的话，所对应的字符是字符“A”，同理 其它3个8比特可分别解码为“BCD”，即这个文件流可解释成“ABCD”，然后记事本就将这个“ABCD”显示在屏幕上。</p><p>记事本无论打开什么文件都按既定的字符编码工作（如ASCII码），所以当他打开二进制文件出现乱码就很正常，解码和译码不对应嘛。例如文件流’’00000000_00000000_00000000_00000001’’可能在二进制文件中对应的是一个四字节的整数int 1，在记事本里解释就变成了”NULL_NULL_NULL_SOH”这四个控制符。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>一般认为，文本文件编码基于字符定长，译码容易些；二进制文件编码是变长的，所以它灵活，存储利用率要高些，译码难一些（不同的二进制文件格式，有不同的译码方式）。</p><p>很多书上还认为，文本文件的可读性要好些，存储要花费转换时间(读写要编译码)，而二进制文件可读性差，存储不存在转换时间（读写不要编解码，直接写值）。这里的可读性是从软件使用者角度来说的，因为我们用通用的记事本工具就几乎可以浏览所有文本文件，所以说文本文件可读性好；而读写一个具体的二进制 文件需要一个具体的文件解码器，所以说二进制文件可读性差，比如读BMP文件，必须用读图软件。而这里的存储转换时间应该是从编程的角度来说的，因为有些操作系统如windows需要对回车换行符进行转换(将’’/n’’，换成’’/r/n’’），所以文件读写时，操作系统需要一个一个字符的检查。<br>当前字符是不是’’/n’’或’’/r/n’’，这个在存储转换在Linux操作系统中并不需要，当然，当在两个不同的操作系统上共享文件时，这种存储 转换又可能出来(如Linux系统和Windows系统共享文本文件)。</p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>C程序，所有I/O操作只是简单地从程序移进或移出字节的事情，这种字节流就叫做流（stream）。</p><p>流是一个动态概念也是一个逻辑概念，是编程者和被访问的设备之间一层抽象的东西</p><p>C将数据的输入输出看作是数据的流入和流出，不管是磁盘文件或者是物理设备都可看作一种流的源和目的，视他们为同一种东西，而不管其具体的物理结构，即对他们的操作，就是数据的流入和流出。</p><p>绝大多数流是完全缓冲的，读取和写入实际上是从一块叫做缓冲区的内存区域来回复制数据。</p><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>既然流是一种动态概念，流的基本单位就可以进行分类。</p><h4 id="文本流（字符流）"><a href="#文本流（字符流）" class="headerlink" title="文本流（字符流）"></a>文本流（字符流）</h4><p>文本流在不同系统中可能不同，比如说文本行最大长度，标准规定至少允许254个字符。另一个可能不同的就是文本行结束方式。例如Windows系统文本行以\r\n结尾，Unix以\n结尾。类似，在 Windows 平台上，文本流中的控制字符 ^Z（字符码 26），用来表示文本流的结束。并且在Windows系统中，输出时，文本中的换行符被写成一对回车/换行符，输入时，每遇到一个回车/换行就丢弃回车转化成换行，然后送到读缓冲区。</p><h4 id="二进制流（字节流）"><a href="#二进制流（字节流）" class="headerlink" title="二进制流（字节流）"></a>二进制流（字节流）</h4><p>二进制流读写时，其不存在任何转换，直接将写缓冲区中数据写入文件。</p><p>总的来说，从编程的角度来说，Ｃ中文本或二进制读写都是缓冲区与文件中二进制流的交互，只是文本读写时有回车换行的转换．所以当写缓冲区中无换行符”\n”(0AH)，文本写与二进制写的结果是一样的，同理，当文件中不存在“\r\n”(0DH0AH)时，文本读与二进制读的结果一样．</p><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><h3 id="对缓冲区的理解"><a href="#对缓冲区的理解" class="headerlink" title="对缓冲区的理解"></a>对缓冲区的理解</h3><p>所谓缓冲区，应该就是系统自动分配的一个东西。所以有三者程序，缓冲区，文件（物理设备）。而所谓流（文件指针）就是记录了缓冲区的信息，以及文件的信息。</p><h3 id="缓冲区的必要性"><a href="#缓冲区的必要性" class="headerlink" title="缓冲区的必要性"></a>缓冲区的必要性</h3><p>比如我们从磁盘里取信息，我们先把读出的数据放在缓冲区，计算机再直接从缓冲区中取数据，等缓冲区的数据取完后再去磁盘中读取，这样就可以减少磁盘的读写次数，再加上计算机对缓冲区的操作大大快于对磁盘的操作，故应用缓冲区可大大提高计算机的运行速度。</p><p>又比如，我们使用打印机打印文档，由于打印机的打印速度相对较慢，我们先把文档输出到打印机相应的缓冲区，打印机再自行逐步打印，这时我们的CPU可以处理别的事情。</p><h3 id="缓冲区的类型"><a href="#缓冲区的类型" class="headerlink" title="缓冲区的类型"></a>缓冲区的类型</h3><ol><li><strong>全缓冲</strong>：在这种情况下，当 填满标准I/O缓存后才进行实际I/O操作。全缓冲的典型代表是对磁盘文件的读写 。</li><li><strong>行缓冲</strong>：在这种情况下，当在输入和输出中遇到换行符时，执行真正的I/O操作。这时，我们输入的字符先存放在缓冲区，等按下回车键换行时才进行实际的I/O操作。典型代表是标准输入(stdin) 和 标准输出(stdout) 。</li><li><strong>不带缓冲</strong>：也就是不进行缓冲，标准出错情况stderr是典型代表，这使得出错信息可以直接尽快地显示出来。</li></ol><h3 id="缓冲区的大小"><a href="#缓冲区的大小" class="headerlink" title="缓冲区的大小"></a>缓冲区的大小</h3><p>如果我们没有自己设置缓冲区的话，系统会默认为标准输入输出设置一个缓冲区，这个缓冲区的大小通常是 512个字节 的大小。</p><p>缓冲区大小由 stdio.h 头文件中的宏 BUFSIZ 定义，如果希望查看它的大小，包含头文件，直接输出它的值即可：printf(“%d”, BUFSIZ);</p><p>缓冲区的大小是可以改变的，也可以将文件关联到自定义的缓冲区，详情可以查看 setvbuf()和 setbuf() 函数。</p><h3 id="缓冲区的刷新（清空）"><a href="#缓冲区的刷新（清空）" class="headerlink" title="缓冲区的刷新（清空）"></a>缓冲区的刷新（清空）</h3><p>缓冲区的刷新就是将指针_ptr变为缓冲区的基地址﹐同时_cnt的值变为0，因为缓冲区刷新后里面是没有数据的!</p><p>下列情况会引发缓冲区的刷新：<br> 缓冲区满时 ； 行缓冲区遇到回车时 ； 关闭文件 ； 使用特定函数刷新缓冲区 。</p><h2 id="FILE结构体"><a href="#FILE结构体" class="headerlink" title="FILE结构体"></a>FILE结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDIN_FILENO0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDOUT_FILENO1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDERR_FILENO2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span>*_ptr;<span class="comment">//指向缓冲区第一个未读的字</span></span><br><span class="line">  <span class="keyword">int</span> _cnt;<span class="comment">//剩余多少个字节还没有读/写</span></span><br><span class="line">  <span class="keyword">char</span>*_base;<span class="comment">//缓冲区基地址</span></span><br><span class="line">  <span class="keyword">int</span> _flag;<span class="comment">//标志位，如是读（r）还是写（w），还可以是缓冲模式</span></span><br><span class="line">  <span class="keyword">int</span> _file;<span class="comment">//文件句柄</span></span><br><span class="line">  <span class="keyword">int</span> _charbuf<span class="comment">//单字节的缓冲，即缓冲大小仅为1个字节，如果为单字节缓冲，_base将无效  </span></span><br><span class="line">  <span class="keyword">int</span> _bufsiz;<span class="comment">//缓冲区大小，一般都是4096</span></span><br><span class="line">  <span class="keyword">char</span>*_tmpfname;<span class="comment">//</span></span><br><span class="line">&#125; FILE;</span><br><span class="line"></span><br><span class="line">__MINGW_IMPORT FILE _iob[];<span class="comment">/* An array of FILE imported from DLL. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stdin(&amp;_iob[STDIN_FILENO])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stdout(&amp;_iob[STDOUT_FILENO])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stderr(&amp;_iob[STDERR_FILENO])</span></span><br></pre></td></tr></table></figure><p>上面代码摘取了stdio.h文件中关于FILE结构体的定义。FILE是一个数据结构，用于访问一个流，可以认为是辅助字节流动的一个结构。如果同时激活几个流，每个流都有一个FILE与他关联。可以看出标准输入流，标准输出流，标准错误流名称分别为stdin,stdout,stderr，都是指向FILE结构体的指针。标准输入是缺省情况下输入的来源，标准输出是缺省情况下输出的来源。通常标准输入为键盘设备，标准输出为屏幕或者终端。缺省的标准输入输出设备可以被修改。</p><p><strong>自己的理解：FILE结构体实际上就是一个文件缓冲区结构体，包含了缓冲区的信息，而所谓的流就是一个指向这种类型结构体的一个指针。实际上键盘输入什么的都是到了缓冲区。那文件输入呢，实际上打开一个文件fopen就是创建了一个内存区域作为缓冲区，函数返回了一个指向这个缓冲区的指针。</strong></p><h2 id="流I-O总览"><a href="#流I-O总览" class="headerlink" title="流I/O总览"></a>流I/O总览</h2><h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><ol><li>声明一个FILE指针变量，辅助字节流动</li><li>流通过fopen函数打开</li><li>根据需要对文件进行读写</li><li>调用fclose函数关闭流</li></ol><h3 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h3><p>不需要打开或者关闭</p><table><thead><tr><th>数据类型</th><th>输入</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>字符</td><td>getchar</td><td>putchar</td><td>读取（写入）单个字符</td></tr><tr><td>文本行</td><td>gets/scanf</td><td>puts/printf</td><td>文本行未格式化的输入（输出）/格式化的输入（输出）</td></tr><tr><td>二进制数据</td><td>fread</td><td>fwrite</td><td>读取（写入）二进制数据</td></tr></tbody></table><table><thead><tr><th>家族名</th><th>目的</th><th>可用于所有流</th><th>只用于stdin和stdout</th><th>内存中的字符串</th></tr></thead><tbody><tr><td>getchar</td><td>字符输入</td><td>fgetc，getc</td><td>getchar</td><td>对指针下标引用或者间接访问</td></tr><tr><td>putchar</td><td>字符输出</td><td>fputc，putc</td><td>putchar</td><td>对指针下标引用或者间接访问</td></tr><tr><td>gets</td><td>文本行输入</td><td>fgets</td><td>gets</td><td>使用strcpy函数</td></tr><tr><td>puts</td><td>文本行输出</td><td>fputs</td><td>puts</td><td>使用strcpy函数</td></tr><tr><td>scanf</td><td>格式化输入</td><td>fscanf</td><td>scanf</td><td>sscanf</td></tr><tr><td>print</td><td>格式化输出</td><td>fprint</td><td>print</td><td>sprint</td></tr></tbody></table><h2 id="打开流"><a href="#打开流" class="headerlink" title="打开流"></a>打开流</h2><h3 id="fopen函数"><a href="#fopen函数" class="headerlink" title="fopen函数"></a>fopen函数</h3><p>fopen函数用于打开一个文件，并把一个流和这个文件关联，把所谓的流和文件绑定在一起。文件实际上可以看作一个物理设备，流就是文件这个物理设备和编程者之间的逻辑桥梁。</p><p>函数原型：</p><p><code>FILE *fopen(char const *name, char const *mode)</code></p><p>第一个参数是文件或者设备的名字，第二个参数值打开模式</p><p>模式如下：</p><table><thead><tr><th></th><th>读取</th><th>写入</th><th>添加</th></tr></thead><tbody><tr><td>文本</td><td>“r”</td><td>“w”</td><td>“a”</td></tr><tr><td>二进制</td><td>“rb”</td><td>“wb”</td><td>“ab”</td></tr></tbody></table><p>如果一个文件打开用于读取那么文件原先必须存在。如果被用来写入，文件如果存在，写入时原内容删除，如果文件不存在就新建一个。如果文件被用来添加，文件如果存在，写入时原内容不被删除，如果文件不存在就新建一个。无论哪一种情况，只能从<strong>文件尾部</strong>写入。</p><p>在添加模式下，流既可以读也可以写。如果已经读入了一些数据，那么你现在想写入数据，就必须调用文件定位函数。如果你先向文件写入数据之后又想读入数据，就要调用fflush函数或者文件定位函数。</p><p>如果fopen函数失败返回NULL指针。所以必须要检查函数的返回值。</p><p>fopen函数用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE *input;</span><br><span class="line">input = fopen(<span class="string">&quot;data3&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(input == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    perror(<span class="string">&quot;data3&quot;</span>);<span class="comment">//在屏幕打印：data3: No such file or directory</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="freopen函数"><a href="#freopen函数" class="headerlink" title="freopen函数"></a>freopen函数</h3><p>函数原型</p><p><code>FILE *freopen(char const *filename,char const *mode,FILE *name);</code></p><p>这个函数用途就是将一个流重定向到其他文件或者物理设备。</p><p>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* args[])</span></span>&#123;</span><br><span class="line">   freopen (<span class="string">&quot;b.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="built_in">stdout</span>);<span class="comment">//此处mode可以选择w或者a，选择r无效</span></span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">&quot;nmsl&quot;</span>);</span><br><span class="line">   getchar();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准输出流stdout默认的关联输出设备是屏幕即终端，使用freopen函数后stdout就会重定向到b.txt文件，之后输出的字符都会到这个文件中。</p><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><p>流是用fclose函数关闭的，函数原型如下:<code>int flcose(FILE *f);</code></p><p>对于输出流，fclose函数在文件关闭之前刷新缓冲区，如果执行成功返回零值，否则返回EOF</p><p>关闭时要进行错误检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fclose(xx)!=<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">&quot;fclose&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符I-O"><a href="#字符I-O" class="headerlink" title="字符I/O"></a>字符I/O</h2><h3 id="字符I-O宏和函数"><a href="#字符I-O宏和函数" class="headerlink" title="字符I/O宏和函数"></a>字符I/O宏和函数</h3><p>当一个流被打开，可以用于输入也可以用于输出，最简单的形式就是字符I/O。</p><p>字符输入函数原型：</p><p><code>int fgetc(FILE *stream)</code></p><p><code>int getc(FILE *stream)</code></p><p><code>int getchar(void)</code>始终从标准输入读取</p><p>fgetc和getc区别就是，fgetc是一个函数，getc是一个宏</p><p>这些函数之所以返回int型而不是char是因为必须有一个字符用来表示EOF，所以EOF被定义为一个整型，它的值在任何可能出现的字符范围之外。</p><p>字符输出函数原型：</p><p><code>int fputc(int character, FILE *stream);</code></p><p><code>int putc(int character, FILE *stream);</code></p><p><code>int putchar(int character);</code></p><p>由于任何一个原因函数失败了则返回EOF</p><p><strong>使用注意点：</strong></p><ul><li>getc的参数不应当是具有副作用的表达式。有副作用的表达式，指的是表达式执行后，会改变表达式中某些变量的值。比如++i * ++i。这里就是所谓的宏的注意点。函数不会造成这种影响。</li><li>因为fgetc一定是一个函数，所以可以得到其地址。这就允许将fgetc的地址作为一个参数传送给另一个函数即函数指针。</li><li>调用fgetc所需时间很可能长于调用getc，因为调用函数通常所需的时间长于调用宏。</li></ul><h3 id="撤销字符I-O"><a href="#撤销字符I-O" class="headerlink" title="撤销字符I/O"></a>撤销字符I/O</h3><p>如果你想从一个流中读取一串数字，你必须连续读取直到遇到一个非数字字符，但是你不希望丢弃这个字符，希望下一次开始读取的时候还能读取这个字符，就可以用到ungetc函数，函数原型如下：</p><p><code>int ungetc(int character, FILE *stream);</code></p><p>ungetc函数把一个字符重新返回到流中，这样他就可以被重新读入。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_int</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != EOF &amp;&amp; <span class="built_in">isdigit</span>(ch))&#123;</span><br><span class="line">        value *= <span class="number">10</span>;</span><br><span class="line">        value += ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ungetc(ch,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    a = read_int();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未格式化的行I-O"><a href="#未格式化的行I-O" class="headerlink" title="未格式化的行I/O"></a>未格式化的行I/O</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>行I/O可用两种方式执行：格式化的和未格式化的。这两种都用于操纵字符串。</p><p>读取函数原型：</p><p><code>char *fgets(char *buffer, int buffer_size, FILE *stream);</code></p><p><code>char *gets(char *buffer);</code></p><p>fgets函数从指定的流中读取字符并把它们复制到数组buffer中，当他读取一个换行符并存储到数组时就不再读取。如果缓冲区字符数达到buffer_size-1时也停止读取。这种情况下，并不会字符丢失，<strong>因为下一次调用fgets将从流的下一个字符开始读取</strong>。在任何一种情况下，一个NUL字符被添加到数组所存储的数据末尾，使其成为一个字符串。</p><p>如果fgets函数在任何字符读取前就达到了文件尾，数组就未进行修改，返回一个NULL指针，否则返回指向数组的指针。</p><p>写入函数原型：</p><p><code>int fputs(char const *buffer, FILE *stream);</code></p><p><code>int puts(char const *buffer);</code></p><p>传送给fputs的数组必须包含一个字符串，他的字符被写入流中，这个字符串预期以NUL结尾，所以没有数组（字符串）长度参数。fgets每次只能最多读取一行，fputs可以输出一行的一部分，也可以一次写入一行，也可以一次写入多行，根据字符串中换行符的个数决定。如果写入出现错误返回EOF，否则返回一个非负值。</p><p>来看一个从一个文件向另一个文件复制文本行的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LINE_LENGTH 1024<span class="comment">//我可以复制的最长行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copylines</span><span class="params">( FILE *input, FILE *output )</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[MAX_LINE_LENGTH];</span><br><span class="line">    <span class="keyword">while</span>( fgets( buffer, MAX_LINE_LENGTH, input) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fputs</span>( buffer, putput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MAX_LINE_LENGTH决定了数组最大长度，也就是一行的最大长度.这个长度不是很重要,因为不管行被一次性读取还是分段读取,产生的文件都是相同的.但是如果函数要统计被复制的行数,就不能简单地在循环里变量加加,而是要加上判断每段是否以换行符结尾.</p><h3 id="关于fgets和gets-fputs和puts的区别"><a href="#关于fgets和gets-fputs和puts的区别" class="headerlink" title="关于fgets和gets,fputs和puts的区别:"></a>关于fgets和gets,fputs和puts的区别:</h3><ul><li>gets读取一行输入时,读取到\n时结束,系统自动将\n转换成NUL，所以实际上是可以无限读入的</li><li>puts写入一个字符串时,他在字符串写入之后向输出在添加一个换行符(这个换行在windows输出被添加一个回车,变成回车换行).这就是为什么puts可以自动换行.</li><li>gets函数没有数组长度等参数,如果一个长输入行被读到一个短的缓冲区,多出来的字符将被写入到指定数组后面的内存位置,这将破坏一个或多个不相关变量的值.所以gets只适用于玩具程序,因为唯一防止数组内存溢出的方法就是声明一个巨大的缓冲区,但不管他有多大,下一个输入行有可能仍可能比缓冲区大.而fgets并不会出现溢出.</li></ul><p><strong>例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[N];</span><br><span class="line">    <span class="keyword">char</span> s2[N];</span><br><span class="line">    fgets(s1, N, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    gets(s1);</span></span><br><span class="line">    <span class="keyword">if</span>(s1[<span class="built_in">strlen</span>(s1) - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;        <span class="comment">// 去掉换行符</span></span><br><span class="line">        s1[<span class="built_in">strlen</span>(s1) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   fflush(stdin);                               //清空缓冲区</span></span><br><span class="line">    fgets(s2, N, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    gets(s2);</span></span><br><span class="line">    <span class="keyword">if</span>(s2[<span class="built_in">strlen</span>(s2) - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;        <span class="comment">// 去掉换行符</span></span><br><span class="line">        s2[<span class="built_in">strlen</span>(s2) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s\n&quot;</span>, s1, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>当使用fgets函数输入时，如果输入12345，则输出1234 5.s1就是”1234\0“，s2就是”5\0“。为什么会这样就是说fgets函数因为数组长度原因而造成读取完毕时，下一个fgets会继续读取缓冲区的字符。</p></li><li><p>当使用gets函数时，可以无限读取，所以要进行两次输入，但是如果超过了数组长度，内存溢出。如果输入123456（回车）abcdef（回车），就会输出f abcdef。这是因为内存溢出，实际上在内存中排列如下：</p><p>当s1输入完毕时：<img src="/images/C/输入输出函数/1.jpg" style="zoom: 50%;"></p><p>当s2输入完毕时：<img src="/images/C/输入输出函数/2.jpg" style="zoom: 50%;"></p></li></ul><h2 id="格式化的行I-O（scanf家族）"><a href="#格式化的行I-O（scanf家族）" class="headerlink" title="格式化的行I/O（scanf家族）"></a>格式化的行I/O（scanf家族）</h2><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>int fscanf(FILE *stream, char const *format, ...);</code></p><p><code>int scanf(char const *format, ...);</code></p><p><code>int sscanf(char const *string, char const *format, ...);</code></p><p>每一个省略号表示一个可变长的的指针列表。这些函数根据输入源读取字符串并根据format字符串给出的格式代码对他们进行转换。</p><p>fscanf输入源就是作为参数给出的流，scanf输入源是标准输入流，sscanf输入源是字符串。</p><p>当格式化字符串到达末尾时或者读取的输入不再匹配格式字符串所指定的类型时，输入停止。返回值都是被转换的输入值的数目，如果在任何输入值被转换之前文件就到达了尾部返回EOF。</p><h3 id="格式代码"><a href="#格式代码" class="headerlink" title="格式代码"></a>格式代码</h3><p>format字符串可能包含以下：</p><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p>如换行符，空格等，函数连续读入字符直到遇到空白字符。</p><h4 id="其他字符"><a href="#其他字符" class="headerlink" title="其他字符"></a>其他字符</h4><p>出现其他字符时，输入必须匹配，匹配后的输入随即被丢弃，如果不匹配就不再读取直接返回。比如<code>scanf(&quot;3%d&quot;,&amp;c);</code>输入必须要先输入一个3才能就需输入你要的。</p><h4 id="格式代码-1"><a href="#格式代码-1" class="headerlink" title="格式代码"></a>格式代码</h4><p>他们指定函数如何解释接下来的输入字符。一般以一个百分号开头，后面可以是</p><ul><li><p>一个可选星号，星号将转换后的值丢弃而不是存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*d %d&quot;</span>,&amp;c,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入1 2 输出 2 0</span></span><br></pre></td></tr></table></figure></li><li><p>一个可选的宽度，限制被读取用于转换的输入字符个数。如果没有给出宽度，函数就连续读入字符直到遇到空白字符。</p></li><li><p>一个可选限定符</p><table><thead><tr><th>格式码</th><th>h</th><th>l</th><th>L</th></tr></thead><tbody><tr><td>d,i,n</td><td>short</td><td>long</td><td></td></tr><tr><td>o,u,x</td><td>unsigned</td><td>unsigned long</td><td></td></tr><tr><td>e,f,g</td><td></td><td>double</td><td>long double</td></tr></tbody></table></li><li><p>格式代码（自己查阅）</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在使用fscanf时，在输入中保持边界的同步是困难的，因为他把换行符也当作空白字符跳过。</p><p>比如一组数据想要四个一输入，但是如果第二行是出错了，第三次输入数据就会变成2 3 3 3，就会无法边界同步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 1 1 1</span><br><span class="line">2 2 2 2 2</span><br><span class="line">3 3 3 3</span><br><span class="line">4 4 4 4</span><br><span class="line">5 5 5 5</span><br></pre></td></tr></table></figure><p>办法就是使用sscanf处理行定向的输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100<span class="comment">//要处理的最长行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">( FILE *input )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, e;</span><br><span class="line">    <span class="keyword">char</span> str[SIZE];</span><br><span class="line">    <span class="keyword">while</span>( fgets( str, SIZE, input ) != <span class="literal">NULL</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">sscanf</span>( str, <span class="string">&quot;%d %d %d %d %d&quot;</span>, &amp;a， &amp;b, &amp;c, &amp;d, &amp;e) != <span class="number">4</span>)&#123;</span><br><span class="line">            fprint( <span class="built_in">stderr</span>, <span class="string">&quot;Bad input skipped: %s&quot;</span>, str);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理这组输入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="格式化的行I-O（printf家族）"><a href="#格式化的行I-O（printf家族）" class="headerlink" title="格式化的行I/O（printf家族）"></a>格式化的行I/O（printf家族）</h2><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>int fprintf( FILE *stream, char const *format, ... );</code></p><p><code>int printf( char const *format, ... );</code></p><p>``int sprintf( char *buffer, char const *format, … );`</p><p>3个函数返回值是实际打印或存储的字符数。避免sprintf数组内存溢出。</p><h3 id="格式代码-2"><a href="#格式代码-2" class="headerlink" title="格式代码"></a>格式代码</h3><p>除了格式代码，其他字符原样打印，格式代码一般百分号开头，后面可以跟：</p><h4 id="零个或多个标志字符"><a href="#零个或多个标志字符" class="headerlink" title="零个或多个标志字符"></a>零个或多个标志字符</h4><table><thead><tr><th>标志</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>值在字段中左对齐，缺省情况是右对齐</td></tr><tr><td>0</td><td>当数值右对齐时，缺省情况用空格填充左边未使用的列。这个标志表示用0填充，他可用于d,i,o,u,x,X,e,E,f,g,G代码，使用d,i,o,u,X,x代码时，如果给出精度字段，零标志被忽略，如果代码中出现负号标志，零标志也无效。</td></tr><tr><td>+</td><td>缺省状态下一个非负值并不正号，正号标志给非负值加上正号</td></tr><tr><td>空格</td><td>如果一个值非负，那么就在这个值开始位置加上一个空格，如果和正号标志同时出现，忽略空格。</td></tr><tr><td>#</td><td>选择某些代码的另一种转换形式</td></tr></tbody></table><h4 id="一个可选的最小字段宽度"><a href="#一个可选的最小字段宽度" class="headerlink" title="一个可选的最小字段宽度"></a>一个可选的最小字段宽度</h4><p>指定结果最小字符数，值的字符数大于指定值正常显示，小于的话根据标志显示。</p><h4 id="一个可选的精度"><a href="#一个可选的精度" class="headerlink" title="一个可选的精度"></a>一个可选的精度</h4><p>看书</p><h4 id="一个可选的修改符"><a href="#一个可选的修改符" class="headerlink" title="一个可选的修改符"></a>一个可选的修改符</h4><table><thead><tr><th>修改符</th><th>用于···时</th><th>表示参数是···</th></tr></thead><tbody><tr><td>h</td><td>d,i,o,u,x,X</td><td>一个（可能是无符号）short型整数</td></tr><tr><td>h</td><td>n</td><td>一个指向short型整数的指针</td></tr><tr><td>l</td><td>d,i,o,u,x,X</td><td>一个（可能是无符号）long型整数</td></tr><tr><td>l</td><td>n</td><td>一个指向long型整数的指针</td></tr><tr><td>L</td><td>e,E,g,f,G</td><td>一个long double型值</td></tr></tbody></table><h4 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h4><p>和scanf差不多</p><h2 id="二进制I-O"><a href="#二进制I-O" class="headerlink" title="二进制I/O"></a>二进制I/O</h2><p>数据写到文件效率最高的就是二进制写入，二进制避免了字符转换的开销和精度。但是可读性太差，需要特定程序读取。</p><h3 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>size_t fread( void *buffer, size_t size, size_t count, FILE *stream );</code></p><p><code>size_t fwrite( void *buffer, size_t size, size_t count, FILE *stream );</code></p><p>buffer是一个指向保存数据位置的指针，size是一个元素所占用的字节，count是元素个数，stream就是流。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VALUE</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">float</span> b;</span><br><span class="line">    <span class="keyword">char</span> c[SIZE];</span><br><span class="line">&#125; vlaue[ARRAY_SIZE];</span><br><span class="line">n_values = fread( values, <span class="keyword">sizeof</span>( struct VALUE ), ARRAY_SIZE, input_stream );</span><br><span class="line"><span class="comment">/*处理数据...*/</span></span><br><span class="line">fwrite( values, <span class="keyword">sizeof</span>( struct VALUE ), ARRAY_SIZE, output_stream );</span><br></pre></td></tr></table></figure><h2 id="刷新和定位函数"><a href="#刷新和定位函数" class="headerlink" title="刷新和定位函数"></a>刷新和定位函数</h2><h3 id="刷新函数"><a href="#刷新函数" class="headerlink" title="刷新函数"></a>刷新函数</h3><h4 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h4><p><code>int fflush( FILE *strream );</code></p><p>立即把输出缓冲区信息打印，或者把输入缓冲区信息丢弃。</p><h3 id="定位函数"><a href="#定位函数" class="headerlink" title="定位函数"></a>定位函数</h3><h4 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h4><p><code>long ftell( FILE *stream );</code></p><p><code>int fseek( FILE *stream, long offset, int from );</code></p><h4 id="ftell函数"><a href="#ftell函数" class="headerlink" title="ftell函数"></a>ftell函数</h4><p>ftell函数返回流的当前位置，下一个读取或者吸入将要开始的位置距离文件起始位置的偏移量。</p><p>在二进制流中，这个值就是当前位置距离文件起止位置的字节数。</p><p>在文本流中，这个值表示一个位置，他不一定表示当前位置与文件起始位置之间的字符数，因为有转义字符，但是ftell函数返回值总能用于fseek函数中，作为距离文件起始位置的偏移量。</p><h4 id="fseek函数"><a href="#fseek函数" class="headerlink" title="fseek函数"></a>fseek函数</h4><p>函数允许你在一个流中定位，这个操作将改变下一个读取或写入的位置。第二个参数是偏移量，第三个参数是属性见下表：</p><table><thead><tr><th>from</th><th>你将定位到</th></tr></thead><tbody><tr><td>SEEK_SET</td><td>从流的起始位置起offset个字节，offset必须是一个非负值</td></tr><tr><td>SEEK_CUR</td><td>从流的当前位置起offset个字节，offset可正可负</td></tr><tr><td>SEEK_END</td><td>从流的尾部位置起offset个字节，offset可正可负，如果为正将定位到文件尾后</td></tr></tbody></table><p>试图定位到一个文件开始位置之前是错误的，定位到文件尾是扩展这个文件。</p><p>在二进制流中，从SEEK_END进行定位可能不被支持。在文本流中，如果是SEEK_CUR或者SEEK_END，offset必须是0.如果是SEEK_SET，offset必须是一个从同一个流ftell返回的值。</p><h2 id="改变缓冲方式"><a href="#改变缓冲方式" class="headerlink" title="改变缓冲方式"></a>改变缓冲方式</h2><h3 id="函数原型-5"><a href="#函数原型-5" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>void setbuf( FIEL *stream, char *buf );</code></p><p><code>int setvbuf( FILE *stream, char *buf, int mode, size_t size );</code></p><p>setbuf设定一个数组用于对流进行缓冲，实际上就是不使用系统默认分配的缓冲区，重新给流分配一个数组作为缓冲区。这个数组大小必须是BUFSIZE，如果函数参数是NULL，setbuf将关闭所有流的缓冲方式。避免为流分配自动数组。</p><p>setvbuf更为通用，mode指定缓冲类型，buf和size指定了缓冲区。</p><h2 id="流错误函数"><a href="#流错误函数" class="headerlink" title="流错误函数"></a>流错误函数</h2><h3 id="函数原型-6"><a href="#函数原型-6" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>int feof( FILE *stream );</code></p><p><code>int ferror( FILE *stream );</code></p><p><code>void clearerror( FILE *stream );</code></p><p>如果流位于文件尾，feof为真。ferror报告流的错误状态。如果任何读写函数出现错误为真。clearerror对指定流的错误标志进行重置。</p><h2 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h2><h3 id="函数原型-7"><a href="#函数原型-7" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>FILE *tmpfile( void );</code></p><p>这个函数创建一个文件保存临时数据，当程序结束被自动删除。该文件以wb+模式打开，可以保存二进制和文本文件。</p><p><code>char *tmpnam( char *name );</code></p><p>创建临时文件名字</p><h2 id="文件操纵函数"><a href="#文件操纵函数" class="headerlink" title="文件操纵函数"></a>文件操纵函数</h2><h3 id="函数原型-8"><a href="#函数原型-8" class="headerlink" title="函数原型"></a>函数原型</h3><p><code>int remove( char const *filename );</code></p><p><code>int rename(char const *oldname, char const *newname );</code></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>预处理器</title>
      <link>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <guid>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <pubDate>Sun, 22 Aug 2021 03:12:37 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;编译一个C程序第一个步骤叫做预处理阶段，C预处理器在源代码编译之前对其进行一些文本性质操作。&lt;/p&gt;
&lt;h2 id=&quot;预定义符号&quot;&gt;&lt;a h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>编译一个C程序第一个步骤叫做预处理阶段，C预处理器在源代码编译之前对其进行一些文本性质操作。</p><h2 id="预定义符号"><a href="#预定义符号" class="headerlink" title="预定义符号"></a>预定义符号</h2><table><thead><tr><th>符号</th><th>例子</th><th>含义</th></tr></thead><tbody><tr><td>__FILE__</td><td>“name.c”</td><td>进行编译的源文件名称</td></tr><tr><td>__LINE__</td><td>25</td><td>文件当前行的行号</td></tr><tr><td>__DATE__</td><td>“Jan 17 2021”</td><td>文件被编译的日期</td></tr><tr><td>__TIME__</td><td>“11:34:01”</td><td>文件被编译的时间</td></tr><tr><td>__STDC__</td><td>1</td><td>如果编译器遵循ANSI C值就为1，否则未定义</td></tr></tbody></table><h2 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h2><p>声明格式：<code>#define name stuff</code></p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG_PRINT printf(<span class="meta-string">&quot;FILE %s line &quot;</span>\ </span></span><br><span class="line"><span class="string">&quot;%d: x=%d, y=%d,&quot;</span>\    <span class="comment">//相邻的字符串常量自动被连接</span></span><br><span class="line"><span class="string">&quot;z=%d&quot;</span>,__FILE__,__LINE__,x,y,z)<span class="comment">//注意此处没有分号</span></span><br></pre></td></tr></table></figure><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>声明格式：<code>#define name(parameter-list) stuff</code></p><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) x*x</span></span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S(a+<span class="number">1</span>));<span class="comment">//输出11，原因是将a+1替换，会变成a+1*a+1,不是我们想要的结果</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(s) (x)*(x)</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) (x)+(x)</span></span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">10</span>*S(a));<span class="comment">//输出55，原因是将a替换，会变成10*(a)+(a),不是我们想要的结果</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(s) ((x)*(x))</span></span><br></pre></td></tr></table></figure><p>例子3：#结构是把宏参数转换为字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(FORMAT,VALUE) printf(<span class="meta-string">&quot;The value of &quot;</span>#VALUE  <span class="meta-string">&quot; is &quot;</span>FORMAT<span class="meta-string">&quot;\n&quot;</span>,VALUE)<span class="comment">//别吵别吵，这里很关键</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">22</span>;</span><br><span class="line">    PRINT(<span class="string">&quot;%d&quot;</span>,x+<span class="number">3</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">The value of x+<span class="number">3</span> is <span class="number">25</span></span><br></pre></td></tr></table></figure><p>例子4：##结构是把两边的符号连接成一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(number,value) sum ## number += value</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum5 = <span class="number">0</span>;<span class="comment">//前提是变量已经定义过</span></span><br><span class="line">    ADD(<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum5);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="副作用宏"><a href="#副作用宏" class="headerlink" title="副作用宏"></a>副作用宏</h3><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))<span class="comment">//与参数类型无关</span></span></span><br><span class="line">...</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">8</span>;</span><br><span class="line">z = MAX(x++,y++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,x,y,z);</span><br><span class="line"><span class="comment">//输出为6，10，9</span></span><br><span class="line"><span class="comment">//带入分析可知 z = ((x++)&gt;(y++)?(x++):(y++));</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENPARITY(ch) ((cbit(ch)&amp;1)?(ch)|PARITYBIT:(ch))<span class="comment">//奇偶检验，PARITYBIT为1</span></span></span><br><span class="line">ch = EVENPARITY(getchar());<span class="comment">//这条语句实际上是失败的，因为getchar()实际上有两个，还有一个回车</span></span><br></pre></td></tr></table></figure><h3 id="undef"><a href="#undef" class="headerlink" title="#undef"></a>#undef</h3><p>作用是移除一个宏定义</p><p>声明格式：<code>#undef name</code></p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>一般格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> constant-expression<span class="comment">//常量表达式</span></span></span><br><span class="line">statements</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> constant-expression</span></span><br><span class="line">        other statements...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">        other statements</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>是否被定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(symbol)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> symbol<span class="comment">//等价</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(symbol)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> symbol</span></span><br></pre></td></tr></table></figure><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>一般来讲#include尖括号是函数库文件，双引号是本地文件。</p><p><strong>多重包含：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="comment">//如果两个文件都包含了x.h文件，就会造成多重包含</span></span><br></pre></td></tr></table></figure><p>解决方法就是条件编译：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADERNAME_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADERNAME_H 1<span class="comment">//此处1可加可不加，不加1的话，变量就是一个空字符串</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当头文件第一次被包含时，变量未定义就给它定义，第二次多重包含时，ifndef条件为假内容就被忽略，不会被多次编译</p><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><ul><li><p><code>#error text of error mesage</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(A)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(B)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(C)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">error</span> No selected</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>#line number &quot;string&quot;</code>他告诉预处理器number是下一行输入的行号，如果加入了string，预处理器就把它当作文件的名字。这条指令将修改__FILE__和__LINE__</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>命令行参数</title>
      <link>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</link>
      <guid>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</guid>
      <pubDate>Sat, 21 Aug 2021 16:38:06 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;每个C语言程序都必须有一个称为main()的函数，作为程序启动的起点。当执行程序时，命令行参数（command-line  argument</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>每个C语言程序都必须有一个称为main()的函数，作为程序启动的起点。当执行程序时，命令行参数（command-line  argument）（由shell逐一解析）通过两个入参提供给main()函数。第一个参数int  argc，表示命令行参数的个数。第二个参数char *argv[]，是一个指向命令行参数的指针数组，每一参数又都是以空字符（null）  结尾的字符串。第一个字符串，亦即argv[0]指向的，（通常）是该程序的名称。argv中的指针列表以NULL指针结尾（即argv[argc]为NULL）。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">3</span>]);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">D:\Vsc\test&gt;apple.exe a b c d<span class="comment">//在命令行中输入</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">apple.exe<span class="comment">//一般指向的第一个参数为程序名称</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h3 id="处理命令行参数"><a href="#处理命令行参数" class="headerlink" title="处理命令行参数"></a>处理命令行参数</h3><p>实际上就是对字符串的处理</p><p>见书：p267</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>函数指针与回调函数（转换表）</title>
      <link>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Mon, 16 Aug 2021 11:39:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;函数指针&quot;&gt;&lt;a href=&quot;#函数指针&quot; class=&quot;headerlink&quot; title=&quot;函数指针&quot;&gt;&lt;/a&gt;函数指针&lt;/h2&gt;&lt;h3 id=&quot;概念区分&quot;&gt;&lt;a href=&quot;#概念区分&quot; class=&quot;headerlink&quot; title=&quot;概念区分&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><h3 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h3><table><thead><tr><th>声明</th><th>含义</th></tr></thead><tbody><tr><td><code>int f;</code></td><td>一个整型变量</td></tr><tr><td><code>int *f;</code></td><td>一个指向整型的指针</td></tr><tr><td><code>int f();</code></td><td>一个返回值为整型函数</td></tr><tr><td><code>int *f();</code></td><td>一个返回值为指向整型指针的函数，可以把int*连在一起看</td></tr><tr><td><code>int (*f)();</code></td><td>一个指向函数的指即函数指针</td></tr><tr><td><code>int *(*f)();</code></td><td>一个指向 返回值为指向整型的指针的函数 的指针</td></tr><tr><td><code>int f[];</code></td><td>一个整型数组</td></tr><tr><td><code>int *f[];</code></td><td>一个存放指向整形的指针的数组</td></tr><tr><td><code>int f()[];</code></td><td><strong>非法</strong>，是一个返回值为数组的函数，但是函数只能返回标量值而不能返回数组</td></tr><tr><td><code>int f[]();</code></td><td><strong>非法</strong>，像是一个元素类型为返回值为整型的函数的数组，但是数组要求元素长度相同</td></tr><tr><td><code>int (*f[])();</code></td><td>一个元素为指向返回值为整型的函数的指针的数组</td></tr><tr><td><code>int *(*f[])();</code></td><td>一个元素为指向返回值为指向整型指针的函数的指针的数组</td></tr></tbody></table><h3 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*pf)(<span class="keyword">int</span>) = &amp;f;<span class="comment">//符号&amp;可加可不加，因为函数名被使用时总是由编译器把它转换为函数指针</span></span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">ans = f(<span class="number">25</span>);</span><br><span class="line">ans = (*pf)(<span class="number">25</span>);</span><br><span class="line">ans = pf(<span class="number">25</span>);</span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p><strong>例子：在单链表中查找一个值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *</span></span><br><span class="line"><span class="function"><span class="title">search</span><span class="params">(Node *node, <span class="keyword">int</span> <span class="keyword">const</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;value == value)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        node = node-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了改善兼容性与便利性，能查找不同元素类型的链表如字符串或者数组而不只是整形，即能对任何类型的值进行比较。</p><p><strong>修改一：</strong></p><p>使用函数指针，编写一个比较两数大小的函数，将此函数指针作为参数传递给查找函数。</p><p><strong>修改二：</strong></p><p>向比较函数传递指针而不是值本身。</p><hr><p>使用这种技巧的函数被称为回调函数，因为用户把一个函数的指针作为参数传递给其他函数，后者将回调用户的函数。</p><p>方便了不同时刻执行不同类型的工作。</p><p><strong>修改后的查找函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;node.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Node *</span></span><br><span class="line"><span class="function"><span class="title">search</span><span class="params">(Node *node, <span class="keyword">void</span> <span class="keyword">const</span> *value,<span class="keyword">int</span> (*compare)(<span class="keyword">void</span> <span class="keyword">const</span> *,<span class="keyword">void</span> <span class="keyword">const</span> *))</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(compare(&amp;node-&gt;value ,value) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        node = node-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用例子（整型）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_int</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*(<span class="keyword">int</span> *)a == *(<span class="keyword">int</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">desired_node = search_list(root,&amp;desired_value,compare_int);</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line">desired_node = search_list(root,&amp;desired_value,<span class="built_in">strcmp</span>);<span class="comment">//使用自带的字符串比较函数</span></span><br></pre></td></tr></table></figure><h2 id="转换表"><a href="#转换表" class="headerlink" title="转换表"></a>转换表</h2><p>假设要实现一个小型计算器，可以使用switch如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(oper)&#123;</span><br><span class="line">    <span class="keyword">case</span> ADD:</span><br><span class="line">        result = add(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SUB:</span><br><span class="line">        result = sub(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MUL:</span><br><span class="line">        result = mul(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DIV:</span><br><span class="line">        result = div(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使用switch语句，操作符的代码必须是整数。如果他们是从零开始的整数，我们就可以使用<strong>转换表</strong>完成相同的任务。<strong>转换表</strong>就是一个<strong>函数指针数组</strong>。</p><p>转换表声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//其他运算函数声明</span></span><br><span class="line"><span class="keyword">double</span> (*oper_func[])(<span class="keyword">double</span>,<span class="keyword">double</span>) = &#123;add,sub,mul,div...&#125;;<span class="comment">//声明函数指针数组</span></span><br><span class="line"></span><br><span class="line">result = oper_func[oper](op1,op2);<span class="comment">//使用转换表</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
