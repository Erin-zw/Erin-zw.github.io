<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Mon, 23 Aug 2021 12:34:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>getchar的几个例子</title>
      <link>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/</link>
      <guid>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/</guid>
      <pubDate>Mon, 23 Aug 2021 11:31:01 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;例子1&quot;&gt;&lt;a href=&quot;#例子1&quot; class=&quot;headerlink&quot; title=&quot;例子1&quot;&gt;&lt;/a&gt;例子1&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((c=getchar())!=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c,%d&quot;</span>,c, n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>输入:<br> ssss回车<br> 得到:<br> s,0s,0s,0s,0<br> ,0 光标处(等待输入)<br> 其实循环执行了五次，前四次输出s，第五次输出的是回车，所以才会出现：输出ssss后下一行的光标出（等待输入）</li><li>如果我们输入：<br> ksssa<br> 输出：<br> k,0s,0s,0s,0</li></ol><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">    getchar();</span><br><span class="line">    c=getchar();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>输入:<br> ssss回车<br> 得到:<br> ssss<br> 光标处(等待输入)<br> 其实循环执行了五次，前四次输出s，第五次输出的是回车，所以才会出现：输出ssss后下一行的光标出（等待输入）</p></li><li><p>如果我们输入：<br>ksssa回车<br>输出：<br>ksss光标处(等待输入)</p><p>说明:程序已经跳出while循环,但是由于我们用getchar();吃掉了回车,后面第7句c=getchar();需要你输入一个字符(因为ksssa回车后面并没有新的字符)，所以程序仍然没有结束.</p><p>如果注释掉getchar();</p><p>输入：ksssa回车</p><p>输出：</p><p>ksss</p><p>光标处(程序结束) </p><p>最后一个回车就被c = getchar()读取了</p></li></ol><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输入:<br>1234回车<br>得到：<br>Fine.Fine.Fine.Fine.Fine.光标处(等待输入)</p><p>说明：ch依次被赋值1234回车，注意回车刷新缓冲区的同时也被赋值给ch，这个五个字符均不是‘#’故运行了五次，仍为跳出循环。</p><p>2.输入：<br>1234#回车<br>得到：<br>Fine.Fine.Fine.Fine.光标处（程序结束）</p><p>说明：ch依次被赋值1234#回车，循环执行到#时候跳出，故循环只执行4次。</p><h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();<span class="comment">//吃掉回车</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法只适合单个输入：</p><p>1.输入：1回车<br>得到： Fine.光标处(等待输入)</p><p>2.输入： 123回车<br>得到： Fine.Fine.光标处(等待输入)</p><p>说明：实际上ch只接收了1和3 的值，2和回车都被getchar()这个语句吃掉了</p><h3 id="例子5"><a href="#例子5" class="headerlink" title="例子5"></a>例子5</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fine.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决问题</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/23/C/%E5%86%8D%E8%B0%88getchar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>输入输出函数</title>
      <link>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Mon, 23 Aug 2021 11:28:52 GMT</pubDate>
      
      
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/23/C/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>预处理器</title>
      <link>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <guid>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <pubDate>Sun, 22 Aug 2021 03:12:37 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;编译一个C程序第一个步骤叫做预处理阶段，C预处理器在源代码编译之前对其进行一些文本性质操作。&lt;/p&gt;
&lt;h2 id=&quot;预定义符号&quot;&gt;&lt;a h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>编译一个C程序第一个步骤叫做预处理阶段，C预处理器在源代码编译之前对其进行一些文本性质操作。</p><h2 id="预定义符号"><a href="#预定义符号" class="headerlink" title="预定义符号"></a>预定义符号</h2><table><thead><tr><th>符号</th><th>例子</th><th>含义</th></tr></thead><tbody><tr><td>__FILE__</td><td>“name.c”</td><td>进行编译的源文件名称</td></tr><tr><td>__LINE__</td><td>25</td><td>文件当前行的行号</td></tr><tr><td>__DATE__</td><td>“Jan 17 2021”</td><td>文件被编译的日期</td></tr><tr><td>__TIME__</td><td>“11:34:01”</td><td>文件被编译的时间</td></tr><tr><td>__STDC__</td><td>1</td><td>如果编译器遵循ANSI C值就为1，否则未定义</td></tr></tbody></table><h2 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h2><p>声明格式：<code>#define name stuff</code></p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG_PRINT printf(<span class="meta-string">&quot;FILE %s line &quot;</span>\ </span></span><br><span class="line"><span class="string">&quot;%d: x=%d, y=%d,&quot;</span>\    <span class="comment">//相邻的字符串常量自动被连接</span></span><br><span class="line"><span class="string">&quot;z=%d&quot;</span>,__FILE__,__LINE__,x,y,z)<span class="comment">//注意此处没有分号</span></span><br></pre></td></tr></table></figure><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>声明格式：<code>#define name(parameter-list) stuff</code></p><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) x*x</span></span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S(a+<span class="number">1</span>));<span class="comment">//输出11，原因是将a+1替换，会变成a+1*a+1,不是我们想要的结果</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(s) (x)*(x)</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(x) (x)+(x)</span></span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">10</span>*S(a));<span class="comment">//输出55，原因是将a替换，会变成10*(a)+(a),不是我们想要的结果</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S(s) ((x)*(x))</span></span><br></pre></td></tr></table></figure><p>例子3：#结构是把宏参数转换为字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(FORMAT,VALUE) printf(<span class="meta-string">&quot;The value of &quot;</span>#VALUE  <span class="meta-string">&quot; is &quot;</span>FORMAT<span class="meta-string">&quot;\n&quot;</span>,VALUE)<span class="comment">//别吵别吵，这里很关键</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">22</span>;</span><br><span class="line">    PRINT(<span class="string">&quot;%d&quot;</span>,x+<span class="number">3</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">The value of x+<span class="number">3</span> is <span class="number">25</span></span><br></pre></td></tr></table></figure><p>例子4：##结构是把两边的符号连接成一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(number,value) sum ## number += value</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum5 = <span class="number">0</span>;<span class="comment">//前提是变量已经定义过</span></span><br><span class="line">    ADD(<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum5);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="副作用宏"><a href="#副作用宏" class="headerlink" title="副作用宏"></a>副作用宏</h3><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))<span class="comment">//与参数类型无关</span></span></span><br><span class="line">...</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">8</span>;</span><br><span class="line">z = MAX(x++,y++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,x,y,z);</span><br><span class="line"><span class="comment">//输出为6，10，9</span></span><br><span class="line"><span class="comment">//带入分析可知 z = ((x++)&gt;(y++)?(x++):(y++));</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EVENPARITY(ch) ((cbit(ch)&amp;1)?(ch)|PARITYBIT:(ch))<span class="comment">//奇偶检验，PARITYBIT为1</span></span></span><br><span class="line">ch = EVENPARITY(getchar());<span class="comment">//这条语句实际上是失败的，因为getchar()实际上有两个，还有一个回车</span></span><br></pre></td></tr></table></figure><h3 id="undef"><a href="#undef" class="headerlink" title="#undef"></a>#undef</h3><p>作用是移除一个宏定义</p><p>声明格式：<code>#undef name</code></p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>一般格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> constant-expression<span class="comment">//常量表达式</span></span></span><br><span class="line">statements</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> constant-expression</span></span><br><span class="line">        other statements...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">        other statements</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>是否被定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(symbol)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> symbol<span class="comment">//等价</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(symbol)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> symbol</span></span><br></pre></td></tr></table></figure><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>一般来讲#include尖括号是函数库文件，双引号是本地文件。</p><p><strong>多重包含：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="comment">//如果两个文件都包含了x.h文件，就会造成多重包含</span></span><br></pre></td></tr></table></figure><p>解决方法就是条件编译：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADERNAME_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADERNAME_H 1<span class="comment">//此处1可加可不加，不加1的话，变量就是一个空字符串</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>当头文件第一次被包含时，变量未定义就给它定义，第二次多重包含时，ifndef条件为假内容就被忽略，不会被多次编译</p><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><ul><li><p><code>#error text of error mesage</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(A)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(B)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(C)</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">error</span> No selected</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>#line number &quot;string&quot;</code>他告诉预处理器number是下一行输入的行号，如果加入了string，预处理器就把它当作文件的名字。这条指令将修改__FILE__和__LINE__</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/22/C/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>命令行参数</title>
      <link>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</link>
      <guid>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</guid>
      <pubDate>Sat, 21 Aug 2021 16:38:06 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;每个C语言程序都必须有一个称为main()的函数，作为程序启动的起点。当执行程序时，命令行参数（command-line  argument</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>每个C语言程序都必须有一个称为main()的函数，作为程序启动的起点。当执行程序时，命令行参数（command-line  argument）（由shell逐一解析）通过两个入参提供给main()函数。第一个参数int  argc，表示命令行参数的个数。第二个参数char *argv[]，是一个指向命令行参数的指针数组，每一参数又都是以空字符（null）  结尾的字符串。第一个字符串，亦即argv[0]指向的，（通常）是该程序的名称。argv中的指针列表以NULL指针结尾（即argv[argc]为NULL）。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(argv[<span class="number">3</span>]);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">D:\Vsc\test&gt;apple.exe a b c d<span class="comment">//在命令行中输入</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">apple.exe<span class="comment">//一般指向的第一个参数为程序名称</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h3 id="处理命令行参数"><a href="#处理命令行参数" class="headerlink" title="处理命令行参数"></a>处理命令行参数</h3><p>实际上就是对字符串的处理</p><p>见书：p267</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/22/C/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>函数指针与回调函数（转换表）</title>
      <link>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Mon, 16 Aug 2021 11:39:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;函数指针&quot;&gt;&lt;a href=&quot;#函数指针&quot; class=&quot;headerlink&quot; title=&quot;函数指针&quot;&gt;&lt;/a&gt;函数指针&lt;/h2&gt;&lt;h3 id=&quot;概念区分&quot;&gt;&lt;a href=&quot;#概念区分&quot; class=&quot;headerlink&quot; title=&quot;概念区分&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><h3 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h3><table><thead><tr><th>声明</th><th>含义</th></tr></thead><tbody><tr><td><code>int f;</code></td><td>一个整型变量</td></tr><tr><td><code>int *f;</code></td><td>一个指向整型的指针</td></tr><tr><td><code>int f();</code></td><td>一个返回值为整型函数</td></tr><tr><td><code>int *f();</code></td><td>一个返回值为指向整型指针的函数，可以把int*连在一起看</td></tr><tr><td><code>int (*f)();</code></td><td>一个指向函数的指即函数指针</td></tr><tr><td><code>int *(*f)();</code></td><td>一个指向 返回值为指向整型的指针的函数 的指针</td></tr><tr><td><code>int f[];</code></td><td>一个整型数组</td></tr><tr><td><code>int *f[];</code></td><td>一个存放指向整形的指针的数组</td></tr><tr><td><code>int f()[];</code></td><td><strong>非法</strong>，是一个返回值为数组的函数，但是函数只能返回标量值而不能返回数组</td></tr><tr><td><code>int f[]();</code></td><td><strong>非法</strong>，像是一个元素类型为返回值为整型的函数的数组，但是数组要求元素长度相同</td></tr><tr><td><code>int (*f[])();</code></td><td>一个元素为指向返回值为整型的函数的指针的数组</td></tr><tr><td><code>int *(*f[])();</code></td><td>一个元素为指向返回值为指向整型指针的函数的指针的数组</td></tr></tbody></table><h3 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*pf)(<span class="keyword">int</span>) = &amp;f;<span class="comment">//符号&amp;可加可不加，因为函数名被使用时总是由编译器把它转换为函数指针</span></span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">ans = f(<span class="number">25</span>);</span><br><span class="line">ans = (*pf)(<span class="number">25</span>);</span><br><span class="line">ans = pf(<span class="number">25</span>);</span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p><strong>例子：在单链表中查找一个值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *</span></span><br><span class="line"><span class="function"><span class="title">search</span><span class="params">(Node *node, <span class="keyword">int</span> <span class="keyword">const</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;value == value)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        node = node-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了改善兼容性与便利性，能查找不同元素类型的链表如字符串或者数组而不只是整形，即能对任何类型的值进行比较。</p><p><strong>修改一：</strong></p><p>使用函数指针，编写一个比较两数大小的函数，将此函数指针作为参数传递给查找函数。</p><p><strong>修改二：</strong></p><p>向比较函数传递指针而不是值本身。</p><hr><p>使用这种技巧的函数被称为回调函数，因为用户把一个函数的指针作为参数传递给其他函数，后者将回调用户的函数。</p><p>方便了不同时刻执行不同类型的工作。</p><p><strong>修改后的查找函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;node.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Node *</span></span><br><span class="line"><span class="function"><span class="title">search</span><span class="params">(Node *node, <span class="keyword">void</span> <span class="keyword">const</span> *value,<span class="keyword">int</span> (*compare)(<span class="keyword">void</span> <span class="keyword">const</span> *,<span class="keyword">void</span> <span class="keyword">const</span> *))</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(compare(&amp;node-&gt;value ,value) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        node = node-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用例子（整型）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare_int</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> *a,<span class="keyword">void</span> <span class="keyword">const</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*(<span class="keyword">int</span> *)a == *(<span class="keyword">int</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">desired_node = search_list(root,&amp;desired_value,compare_int);</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line">desired_node = search_list(root,&amp;desired_value,<span class="built_in">strcmp</span>);<span class="comment">//使用自带的字符串比较函数</span></span><br></pre></td></tr></table></figure><h2 id="转换表"><a href="#转换表" class="headerlink" title="转换表"></a>转换表</h2><p>假设要实现一个小型计算器，可以使用switch如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(oper)&#123;</span><br><span class="line">    <span class="keyword">case</span> ADD:</span><br><span class="line">        result = add(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SUB:</span><br><span class="line">        result = sub(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MUL:</span><br><span class="line">        result = mul(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DIV:</span><br><span class="line">        result = div(op1,op2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使用switch语句，操作符的代码必须是整数。如果他们是从零开始的整数，我们就可以使用<strong>转换表</strong>完成相同的任务。<strong>转换表</strong>就是一个<strong>函数指针数组</strong>。</p><p>转换表声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//其他运算函数声明</span></span><br><span class="line"><span class="keyword">double</span> (*oper_func[])(<span class="keyword">double</span>,<span class="keyword">double</span>) = &#123;add,sub,mul,div...&#125;;<span class="comment">//声明函数指针数组</span></span><br><span class="line"></span><br><span class="line">result = oper_func[oper](op1,op2);<span class="comment">//使用转换表</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/16/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>枚举</title>
      <link>http://example.com/2021/08/16/C/%E6%9E%9A%E4%B8%BE/</link>
      <guid>http://example.com/2021/08/16/C/%E6%9E%9A%E4%B8%BE/</guid>
      <pubDate>Mon, 16 Aug 2021 11:31:20 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;code&gt;enum NAME &amp;#123;ele1,ele2,ele3...&amp;#125;var_name;&lt;/code&gt;&lt;/p&gt;
&lt;h3 </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>enum NAME &#123;ele1,ele2,ele3...&#125;var_name;</code></p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>方式1：<strong>先定义枚举类型，再定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br></pre></td></tr></table></figure><p>方式2：<strong>定义枚举类型的同时定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure><p>方式3：<strong>省略枚举名称，直接定义枚举变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br></pre></td></tr></table></figure><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>例一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历枚举元素</span></span><br><span class="line">    <span class="keyword">for</span> (day = MON; day &lt;= SUN; day++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, day);<span class="comment">//不能以s%输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认第一个元素为1，可自行赋值</span></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">枚举元素：<span class="number">0</span></span><br><span class="line">枚举元素：<span class="number">1</span></span><br><span class="line">枚举元素：<span class="number">2</span></span><br><span class="line">枚举元素：<span class="number">3</span></span><br><span class="line">枚举元素：<span class="number">4</span></span><br><span class="line">枚举元素：<span class="number">5</span></span><br><span class="line">枚举元素：<span class="number">6</span></span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">0</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125; day;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    day = TUE;</span><br><span class="line">    <span class="comment">// 遍历枚举元素</span></span><br><span class="line">    <span class="keyword">switch</span>(day)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/16/C/%E6%9E%9A%E4%B8%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动态内存分配</title>
      <link>http://example.com/2021/08/13/C/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <guid>http://example.com/2021/08/13/C/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <pubDate>Fri, 13 Aug 2021 13:18:01 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;malloc和free函数&quot;&gt;&lt;a href=&quot;#malloc和free函数&quot; class=&quot;headerlink&quot; title=&quot;malloc和free函数&quot;&gt;&lt;/a&gt;malloc和free函数&lt;/h3&gt;&lt;h4 id=&quot;为什么使用&quot;&gt;&lt;a href=&quot;#为什么使</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="malloc和free函数"><a href="#malloc和free函数" class="headerlink" title="malloc和free函数"></a>malloc和free函数</h3><h4 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h4><p>当声明数组时，我们通常定义一个足够大的宏，使其尽量容纳多的元素，但是这样造成内存浪费，使用动态内存分配可以避免这种内存浪费。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *pointer)</span></span>;</span><br></pre></td></tr></table></figure><p>调用malloc函数时，malloc从内存池提取一块可用内存，向程序返回一个指向这块内存的指针。这块内存并没有初始化。malloc参数就是所需要的字节数，并且分配的内存是连续的。如果内存池是空的或者内存池可用内存无法满足要求那么就会返回NULL指针。</p><p>当一块以前分配的内存不使用时，使用free函数把他归还给内存池。</p><h3 id="calloc和realloc函数"><a href="#calloc和realloc函数" class="headerlink" title="calloc和realloc函数"></a>calloc和realloc函数</h3><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> num_elements, <span class="keyword">size_t</span> element_size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> new_size)</span></span>;</span><br></pre></td></tr></table></figure><p>calloc函数也用于内存分配，与malloc区别就是返回时指针可以初始化为0。并且参数是所需元素的数量和每个元素的字节数。</p><p>realloc函数用于修改一个已经分配的内存块的大小。若用于扩大内存块，那么这块内存保留，新增加的内存添加到原本的后面。若用于缩小，该内存块尾部一部分被拿掉，剩余保留。若原先的内存块无法修改，realloc将重新分配一块内存，将原先那块内存内容复制到分配的内存块上。</p><h3 id="使用动态内存分配"><a href="#使用动态内存分配" class="headerlink" title="使用动态内存分配"></a>使用动态内存分配</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> *pi;</span><br><span class="line">   pi = <span class="built_in">malloc</span>(<span class="number">100</span>);<span class="comment">//更好的是pi = malloc(25 * sizeof(int));方便移植</span></span><br><span class="line">   <span class="keyword">if</span>(pi == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Out of memory!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;<span class="comment">//检查是否分配成功，避免指向NULL指针</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">25</span>; i++)&#123;</span><br><span class="line">      pi[i] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pi[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态内存分配常见错误"><a href="#动态内存分配常见错误" class="headerlink" title="动态内存分配常见错误"></a>动态内存分配常见错误</h3><ul><li>对NULL指针间接访问</li><li>对分配的内存越界操作</li><li>释放并非动态分配的内存</li><li>释放一块动态分配内存的一部分（解决方法：realloc函数可以有效缩小一块动态分配的内存，有效释放他尾部的部分内存）</li><li>一块动态内存被释放后继续使用</li></ul><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>分配内存但在使用完后不释放会引起内存泄漏，内存泄漏会一点点榨干内存。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/13/C/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>联合</title>
      <link>http://example.com/2021/08/13/C/%E8%81%94%E5%90%88/</link>
      <guid>http://example.com/2021/08/13/C/%E8%81%94%E5%90%88/</guid>
      <pubDate>Fri, 13 Aug 2021 12:38:50 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;最简单的使用联合例子：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>最简单的使用联合例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">&#125;fi;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   fi.f = <span class="number">1.5</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,fi.i);</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的联合在一个整形和浮点都是32位的机器上，变量fi只占用一个32位的字，若成员f被使用，这个字作为浮点值访问，成员i若被使用，这个字作为整形被访问。也就说<strong>联合中所有成员引用的是内存中相同的位置</strong>。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VARIBLE</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span>INT,FLOAT,STRING&#125; type;</span><br><span class="line">    <span class="keyword">int</span> int_value;</span><br><span class="line">    <span class="keyword">float</span> float_value;</span><br><span class="line">    <span class="keyword">char</span> *string_value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用union</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VARIBLE</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span>INT,FLOAT,STRING&#125; type;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">float</span> f;</span><br><span class="line">        <span class="keyword">char</span> *s;</span><br><span class="line">    &#125;value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有一个结构保存变量的类型和值。如果是int型，那么就有两个没有被使用。使用联合可以避免。从而节省了内存空间。</p><p><strong>联合的长度取决于最长成员的长度。</strong>当联合中成员长度相差较为悬殊时，内存就会浪费，这时存储指针可以避免浪费内存。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">float</span> b;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">4</span>];</span><br><span class="line">&#125;x = &#123;<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/13/C/%E8%81%94%E5%90%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>结构体和指针</title>
      <link>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/</link>
      <guid>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/</guid>
      <pubDate>Thu, 12 Aug 2021 14:14:38 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;结构体和指针&quot;&gt;&lt;a href=&quot;#结构体和指针&quot; class=&quot;headerlink&quot; title=&quot;结构体和指针&quot;&gt;&lt;/a&gt;结构体和指针&lt;/h2&gt;&lt;h3 id=&quot;指针引用&quot;&gt;&lt;a href=&quot;#指针引用&quot; class=&quot;headerlink&quot; title=&quot;指</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="结构体和指针"><a href="#结构体和指针" class="headerlink" title="结构体和指针"></a>结构体和指针</h2><h3 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h3><p><strong>例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b[<span class="number">2</span>];</span><br><span class="line">&#125;Ex2;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EX</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">3</span>];</span><br><span class="line">    Ex2 c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EX</span> *<span class="title">d</span>;</span></span><br><span class="line">&#125;Ex;</span><br><span class="line">Ex x = &#123;<span class="number">10</span>,<span class="string">&quot;Hi&quot;</span>,&#123;<span class="number">5</span>,&#123;<span class="number">-1</span>,<span class="number">25</span>&#125;&#125;,<span class="number">0</span>&#125;;</span><br><span class="line">Ex *px = &amp;x;</span><br></pre></td></tr></table></figure><ul><li><p>*px+1是非法的，C语言并没有定义结构和整型值之间的加法运算。*(px+1)也是非法的，如果x是数组中的一个元素则是指向数组中的下一个结构，但是这里x是一个标量，所以是非法的。</p></li><li><p>对比分析*px和px-&gt;a。结构的第一个成员是a，a的地址和结构体的地址是一样的。这样px看上去指向整个结构，同时指向结构的第一个成员。但是两者类型不一样，px被声明为指向结构的指针，所以*px指向的是整个结构体，而不是第一个成员。</p></li><li><p>px-&gt;c.a表示c结构体中的a成员。*px-&gt;c.b表示b数组第一个元素。</p></li></ul><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>创建如下结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">    <span class="keyword">float</span> d;</span><br><span class="line">&#125;Transcation;</span><br></pre></td></tr></table></figure><p><strong>方法一：</strong>若要创建修改其中d的值的函数，可以直接传递结构体。但是结构体先被拷贝作为参数传递给函数修改，然后一份修改后的结构体拷贝从函数返回，所以结构体被复制了两次效率较低。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是一个返回结构体的函数</span></span><br><span class="line"><span class="function">Transaction</span></span><br><span class="line"><span class="function"><span class="title">compute</span><span class="params">(Transcation trans)</span></span>&#123;</span><br><span class="line">    trans.d = trans.b * trans*c;</span><br><span class="line">    <span class="keyword">return</span> trans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用方法</span></span><br><span class="line">c_trans = compute(c_trans);</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>传递指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> </span></span><br><span class="line"><span class="function"><span class="title">compute</span><span class="params">(<span class="keyword">register</span> Transcation *trans)</span></span>&#123;</span><br><span class="line">    trans-&gt;d = trans-&gt;b * trans-&gt;c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">compute(c_trans);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      
      <comments>http://example.com/2021/08/12/C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTT线程建立</title>
      <link>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/</link>
      <guid>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/</guid>
      <pubDate>Mon, 09 Aug 2021 14:44:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;什么是线程&quot;&gt;&lt;a href=&quot;#什么是线程&quot; class=&quot;headerlink&quot; title=&quot;什么是线程&quot;&gt;&lt;/a&gt;什么是线程&lt;/h2&gt;&lt;p&gt;在裸机系统中，系统的主体就是 main 函数里面顺序执行的无限循环，这个无限循环里 面 CPU 按照顺序完成各种事情</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>在裸机系统中，系统的主体就是 main 函数里面顺序执行的无限循环，这个无限循环里 面 CPU 按照顺序完成各种事情。在多线程系统中，我们根据功能的不同，把整个系统分割 成一个个独立的且无法返回的函数，这个函数我们称为线程。</p><p>而所谓多线程实时操作系统就是多个线程之间来回切换看起来就像是并行。</p><h2 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h2><p>在裸机编程中，全局变量，子函数发生局部变量，中断发生函数返回地址等都放在栈中，栈是RAM里面一段连续的存储空间。栈的大小一般在启动文件或者链接脚本指定，最后由C库函数_main进行初始化。</p><p>而在多线程系统中，每个线程都是独立的，互不干扰，所以要为每个线程分配独立的栈空间。有多少个线程就需要定义多少个栈。    </p><p>定义<strong>线程栈</strong>一般格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALIGN(RT_ALIGN_SIZE)<span class="comment">//ALIGN是一个带参数宏在rtdef.h文件中定义，RT_ALIGN_SIZE在rtconfig.h文件中定义，表示多少字节对齐，默认为4</span></span><br><span class="line"><span class="comment">/*定义线程栈*/</span></span><br><span class="line"><span class="keyword">rt_uint8_t</span> rt_flag1_thread_stack[<span class="number">512</span>];<span class="comment">//RTT数据类型重定义，在rtdef.h文件中</span></span><br><span class="line"><span class="keyword">rt_uint8_t</span> rt_flag2_thread_stack[<span class="number">512</span>];</span><br></pre></td></tr></table></figure><h2 id="线程入口函数"><a href="#线程入口函数" class="headerlink" title="线程入口函数"></a>线程入口函数</h2><p>线程是一个独立的函数，函数主体无限循环且不能返回。</p><p><strong>线程函数</strong>声明一般格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_entry</span><span class="params">(<span class="keyword">void</span> *parg)</span></span>&#123;</span><br><span class="line">    <span class="comment">/* 线程主体，无限循环且不能返回 */</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">/* 线程主体代码 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程控制块"><a href="#线程控制块" class="headerlink" title="线程控制块"></a>线程控制块</h2><p>在裸机系统中，程序的主体是 CPU 按照顺序执行的。而在多线程系统中，线程的执行 是由系统调度的。为了顺利调度，为每个线程定义了一个线程控制块，相当于线程的身份证。线程控制块里面包含了线程的所有信息，包括线程的栈指针，线程名称，线程的形参等等。定义一个线程控制块需要一个新的数据类型，这个数据类型定义在rtdef.h文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_thread</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span>        *sp;          <span class="comment">/* 线程栈指针 */</span></span><br><span class="line"><span class="keyword">void</span>        *entry;          <span class="comment">/* 线程入口地址 */</span></span><br><span class="line"><span class="keyword">void</span>        *parameter;      <span class="comment">/* 线程形参 */</span></span><br><span class="line"><span class="keyword">void</span>        *stack_addr;      <span class="comment">/* 线程栈起始地址 */</span></span><br><span class="line"><span class="keyword">rt_uint32_t</span> stack_size;       <span class="comment">/* 线程栈大小，单位为字节 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rt_list_t</span>   tlist;            <span class="comment">/* 线程链表节点 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rt_thread</span> *<span class="title">rt_thread_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="线程初始化函数"><a href="#线程初始化函数" class="headerlink" title="线程初始化函数"></a>线程初始化函数</h2><p>线程的栈，线程的函数实体，线程的控制块最终需要联系起来才能由系统进行统一调 度。那么这个联系的工作就由线程初始化函数 rt_thread_init()来实现。该函数在thread.c文件中定义，在 rtthread.h 中声明，所有跟线程相关的函数都在这个文件定义。</p><p>函数遵循以小写rt开头命名表明这是一个外部函数可供调用，以_rt开头表明是一个内部函数只能由RTT内部使用。</p><p>函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">rt_err_t</span> <span class="title">rt_thread_init</span><span class="params">(struct rt_thread *thread,<span class="comment">//线程控制块指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">void</span> (*entry)(<span class="keyword">void</span> *parameter),<span class="comment">//entry是线程函数名，形参是一个函数指针，可以看C语言回调函数，此处就是一个回调函数的使用，可以加&amp;也可以不加</span></span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">void</span>             *parameter,<span class="comment">//线程形参，传递线程参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">void</span>             *stack_start,<span class="comment">//线程栈起始地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">rt_uint32_t</span>       stack_size)</span><span class="comment">//线程栈大小，单位为字节</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rt_list_init(&amp;(thread-&gt;tlist));<span class="comment">//初始化链表节点</span></span><br><span class="line"></span><br><span class="line">thread-&gt;entry = (<span class="keyword">void</span> *)entry;<span class="comment">//将线程入口（函数起始地址）保存到线程控制块的entry成员</span></span><br><span class="line">thread-&gt;parameter = parameter;<span class="comment">//将线程入口形参保存到线程控制块的 parameter 成员中</span></span><br><span class="line"></span><br><span class="line">thread-&gt;stack_addr = stack_start;<span class="comment">//将线程栈起始地址保存到线程控制块的 stack_start 成员中</span></span><br><span class="line">thread-&gt;stack_size = stack_size;<span class="comment">//将线程栈起大小保存到线程控制块的 stack_size 成员中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化线程栈，并返回线程栈指针 */</span></span><br><span class="line">thread-&gt;sp = (<span class="keyword">void</span> *)rt_hw_stack_init( thread-&gt;entry, </span><br><span class="line">                                   thread-&gt;parameter,</span><br><span class="line">               (<span class="keyword">void</span> *)((<span class="keyword">char</span> *)thread-&gt;stack_addr + thread-&gt;stack_size - <span class="number">4</span>) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表相关操作"><a href="#链表相关操作" class="headerlink" title="链表相关操作"></a>链表相关操作</h3><h4 id="定义链表节点数据类型"><a href="#定义链表节点数据类型" class="headerlink" title="定义链表节点数据类型"></a>定义链表节点数据类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_list_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rt_list_node</span> *<span class="title">next</span>;</span>              <span class="comment">/* 指向后一个节点 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rt_list_node</span> *<span class="title">prev</span>;</span>              <span class="comment">/* 指向前一个节点 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rt_list_node</span> <span class="title">rt_list_t</span>;</span></span><br></pre></td></tr></table></figure><p>双向链表相关操作函数均在rtservice.h函数中。</p><h4 id="初始化链表节点"><a href="#初始化链表节点" class="headerlink" title="初始化链表节点"></a>初始化链表节点</h4><p>初始化节点就是节点的next和pre指向节点本身。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">rt_inline <span class="keyword">void</span> <span class="title">rt_list_init</span><span class="params">(<span class="keyword">rt_list_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l-&gt;next = l-&gt;prev = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在双向链表表头后面插入一个节点"><a href="#在双向链表表头后面插入一个节点" class="headerlink" title="在双向链表表头后面插入一个节点"></a>在双向链表表头后面插入一个节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">rt_inline <span class="keyword">void</span> <span class="title">rt_list_insert_after</span><span class="params">(<span class="keyword">rt_list_t</span> *l, <span class="keyword">rt_list_t</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l-&gt;next-&gt;prev = n;</span><br><span class="line">    n-&gt;next = l-&gt;next;</span><br><span class="line"></span><br><span class="line">    l-&gt;next = n;</span><br><span class="line">    n-&gt;prev = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="D:\blog-erin\source\images\RT-Thread\线程建立\插入节点.jpg" style="zoom: 80%;" /><h4 id="从双向链表删除一个节点"><a href="#从双向链表删除一个节点" class="headerlink" title="从双向链表删除一个节点"></a>从双向链表删除一个节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">rt_inline <span class="keyword">void</span> <span class="title">rt_list_remove</span><span class="params">(<span class="keyword">rt_list_t</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n-&gt;next-&gt;prev = n-&gt;prev;</span><br><span class="line">    n-&gt;prev-&gt;next = n-&gt;next;</span><br><span class="line"></span><br><span class="line">    n-&gt;next = n-&gt;prev = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="D:\blog-erin\source\images\RT-Thread\线程建立\删除节点.jpg" style="zoom:80%;" /><h3 id="rt-hw-stack-init-函数"><a href="#rt-hw-stack-init-函数" class="headerlink" title="rt_hw_stack_init()函数"></a>rt_hw_stack_init()函数</h3><p>详情见书35页，大致就是返回剩余栈的栈顶指针并且初始化已经使用过的栈。一句话说就是栈的初始化</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">嵌入式操作系统</category>
      
      
      
      <comments>http://example.com/2021/08/09/RT-Thread/%E7%BA%BF%E7%A8%8B%E5%BB%BA%E7%AB%8B/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
