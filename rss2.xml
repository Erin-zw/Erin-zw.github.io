<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Erin枫</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>来者犹可追</description>
    <pubDate>Sat, 25 Sep 2021 10:03:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Basic</title>
      <link>http://example.com/2021/09/25/Verilog/Basics/</link>
      <guid>http://example.com/2021/09/25/Verilog/Basics/</guid>
      <pubDate>Sat, 25 Sep 2021 09:57:52 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Wire&quot;&gt;&lt;a href=&quot;#Wire&quot; class=&quot;headerlink&quot; title=&quot;Wire&quot;&gt;&lt;/a&gt;Wire&lt;/h2&gt;&lt;p&gt;wire是单向的。从source流向sinks(接收器)。连续赋值时(continuous assignment)(assi</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Wire"><a href="#Wire" class="headerlink" title="Wire"></a>Wire</h2><p>wire是单向的。从source流向sinks(接收器)。连续赋值时(continuous assignment)(assign left = right)，right被驱动给left。之所以叫他continuous是因为sinks一直随着souce改变。不是一次性赋值。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Verilog/">Verilog</category>
      
      
      
      <comments>http://example.com/2021/09/25/Verilog/Basics/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>索引</title>
      <link>http://example.com/2021/09/24/numpy/%E7%B4%A2%E5%BC%95/</link>
      <guid>http://example.com/2021/09/24/numpy/%E7%B4%A2%E5%BC%95/</guid>
      <pubDate>Fri, 24 Sep 2021 02:24:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">rand = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line">x = rand.randint(<span class="number">100</span>, size=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">ind = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(x[ind])</span><br><span class="line">ind = np.array([[<span class="number">3</span>, <span class="number">7</span>],[<span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="built_in">print</span>(x[ind])</span><br><span class="line">X = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line">row = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">col = np.array([<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(X[row,col])<span class="comment">#一一对应</span></span><br><span class="line"><span class="comment">#在索引中，索引值的配对遵循广播的规则。因此当我们将一个</span></span><br><span class="line"><span class="comment">#列向量和一个行向量组合在一个索引中时，会得到一个二维的结果：</span></span><br><span class="line"><span class="comment">#print(row[:,np.newaxis]),维度变成3*1</span></span><br><span class="line"><span class="built_in">print</span>(X[row[:,np.newaxis], col])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">51</span> <span class="number">92</span> <span class="number">14</span> <span class="number">71</span> <span class="number">60</span> <span class="number">20</span> <span class="number">82</span> <span class="number">86</span> <span class="number">74</span> <span class="number">74</span>]</span><br><span class="line">[<span class="number">71</span> <span class="number">86</span> <span class="number">60</span>]</span><br><span class="line">[[<span class="number">71</span> <span class="number">86</span>]</span><br><span class="line"> [<span class="number">60</span> <span class="number">20</span>]]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">[ <span class="number">2</span>  <span class="number">5</span> <span class="number">11</span>]</span><br><span class="line">[[ <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">5</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">10</span>  <span class="number">9</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#组合索引</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(X[<span class="number">2</span>, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(X[<span class="number">1</span>:, [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">[<span class="number">10</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line">[[ <span class="number">6</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [<span class="number">10</span>  <span class="number">8</span>  <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/24/numpy/%E7%B4%A2%E5%BC%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2021/09/19/%E4%BF%A1%E5%8F%B7/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</link>
      <guid>http://example.com/2021/09/19/%E4%BF%A1%E5%8F%B7/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</guid>
      <pubDate>Sat, 18 Sep 2021 17:03:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;傅里叶变换 FT Fourier transform&lt;/p&gt;
&lt;p&gt;傅里叶级数 FS Fourier series&lt;/p&gt;
&lt;p&gt;离散傅里叶变换 DFT discrete fourier transform&lt;/p&gt;
&lt;p&gt;离散时间傅立叶变换 DTFT Discrete ti</description>
        
      
      
      
      <content:encoded><![CDATA[<p>傅里叶变换 FT Fourier transform</p><p>傅里叶级数 FS Fourier series</p><p>离散傅里叶变换 DFT discrete fourier transform</p><p>离散时间傅立叶变换 DTFT Discrete time Fourier Transform</p><p>加上I（inverse）就是逆变换</p><p>时域连续周期对应频域离散非周期</p><p>时域连续非周期对应频域连续非周期</p><p>时域离散周期对应频域离散周期</p><p>时域离散非周期对应频域连续周期</p><p>综上：</p><div class="table-container"><table><thead><tr><th>时域</th><th>频域</th></tr></thead><tbody><tr><td>连续</td><td>非周期</td></tr><tr><td>周期</td><td>离散</td></tr><tr><td>离散</td><td>周期</td></tr><tr><td>非周期</td><td>连续</td></tr></tbody></table></div>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/09/19/%E4%BF%A1%E5%8F%B7/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>频率</title>
      <link>http://example.com/2021/09/18/%E4%BF%A1%E5%8F%B7/%E9%A2%91%E7%8E%87/</link>
      <guid>http://example.com/2021/09/18/%E4%BF%A1%E5%8F%B7/%E9%A2%91%E7%8E%87/</guid>
      <pubDate>Sat, 18 Sep 2021 15:58:34 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;关于模拟频率，模拟角频率，数字角频率&quot;&gt;&lt;a href=&quot;#关于模拟频率，模拟角频率，数字角频率&quot; class=&quot;headerlink&quot; title=&quot;关于模拟频率，模拟角频率，数字角频率&quot;&gt;&lt;/a&gt;关于模拟频率，模拟角频率，数字角频率&lt;/h2&gt;&lt;script t</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="关于模拟频率，模拟角频率，数字角频率"><a href="#关于模拟频率，模拟角频率，数字角频率" class="headerlink" title="关于模拟频率，模拟角频率，数字角频率"></a>关于模拟频率，模拟角频率，数字角频率</h2><script type="math/tex; mode=display">f = \frac 1T = \frac {1\rm次} {\rm需要的时间(单位秒)}(Hz) \ \ \ \ \ \ \ \  \ \ \ \ \ \  \Omega = 2\pi f(rad/s)</script><p>$f$公式分式的上部是1次，下部是需要的时间，意思是变化1次需要的时间，所以$f$除下来就是1秒内变化的次数，而角频率$\Omega$则是将1次替换成了2$\pi$，意思就是一周需要多少时间，除下来就是一秒内走的弧度。</p><p>实际上在圆周运动或者交流电的变化中，这里的2$\pi$也就相当于一次变化。</p><p>在信号与系统中一般用$\omega$表示模拟角频率，而在数字信号处理中一般用$\Omega$表示模拟角频率，使用$\omega$表示数字角频率。</p><p>再来看一个例子：比如风扇1秒钟转10次，则其(模拟)频率$f$=10Hz，Hz=1/s；也即信号在一秒钟内重复的次数。便于理解，假设一个点在单位圆上运动，如图1所示，点在圆上一秒钟转10圈，则该点的运动频率为10Hz.</p><p><img src="/images/信号/频率/1.png" style="zoom:67%;"></p><p>而模拟角频率$\omega$，是以弧度来表示转的圈数，一圈是2$\pi$弧度，则该点的运动频率也可表示为2$\pi$10rad/s，由此可以看出，$\omega$ = 2<em>*$\pi$</em>*$f$。注意模拟角频率的单位是rad/s.</p><p>数字频率是对模拟频率的采样，数字频率代表的是两个采样点之间的间隔。还是以一点在圆上运动为例，1秒钟转动10圈，从该点运动开始，<strong>以1秒钟采样100次进行采样</strong>，可以得到，每次采样都可得到该点在圆上的位置，该点在圆上的位置如图2所示，采样点之间存在间隔，要以弧度$\omega$表示这种间隔，$\omega$ = 2$\pi$10/100(将1秒替换成100Hz，也就是100次),可得到$\omega$ = 0.2$\pi$ rad</p><p><img src="/images/信号/频率/2.png" style="zoom:67%;"></p><p>由此得到数字频率,$\omega$对应着采样的密集程度，所以叫做数字频率：</p><script type="math/tex; mode=display">\omega = \Omega * T_s =  \frac {\Omega} {f_s} = \frac {2\pi * \Omega} {\omega_s} = \frac {2\pi * f} {f_s}\ \ \ \ \ \  \rm数字角频率 = 模拟角频率 * 采样周期</script><p>由公式可以看出，数字频率是模拟频率对采样频率的归一化处理,只不过这里的一是一周（一圈）也就是$2\pi$。</p><p>有奈奎斯特采样定律得知$\omega_s ≥ 2\Omega$,因此$\omega ≤ \pi$。</p><p>模拟信号周期T的话意思就是进行一次需要多长时间，或者是进行一周($2\pi$)要多长时间.</p><p>数字信号周期N的话意思就是经过$2\pi$需要多少点</p><p>并且数字频率和数字周期满足下列关系：</p><script type="math/tex; mode=display">N = \frac {2\pi * k} {\omega}(k为正整数)</script><h2 id="另一种理解"><a href="#另一种理解" class="headerlink" title="另一种理解"></a>另一种理解</h2><p>加入我们从最简单的正弦函数$sin(\Omega t)$出发，每一个信号都可以由正弦余弦组成，那么只需要看正弦函数的数字转换规律，比如数字周期，数字频率等。</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><p><img src="/images/信号/频率/3.jpg" style="zoom:40%;"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E4%BF%A1%E5%8F%B7/">信号</category>
      
      
      
      <comments>http://example.com/2021/09/18/%E4%BF%A1%E5%8F%B7/%E9%A2%91%E7%8E%87/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>比较和布尔逻辑</title>
      <link>http://example.com/2021/09/18/numpy/%E6%AF%94%E8%BE%83%EF%BC%8C%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91/</link>
      <guid>http://example.com/2021/09/18/numpy/%E6%AF%94%E8%BE%83%EF%BC%8C%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91/</guid>
      <pubDate>Sat, 18 Sep 2021 12:15:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;比较函数&quot;&gt;&lt;a href=&quot;#比较函数&quot; class=&quot;headerlink&quot; title=&quot;比较函数&quot;&gt;&lt;/a&gt;比较函数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(x&gt;<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>( (<span class="number">2</span> * x) == (x ** <span class="number">2</span>))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span>  <span class="literal">True</span>]</span><br><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br></pre></td></tr></table></figure><p>和算术运算符一样，比较运算操作在 NumPy 中也是借助通用函数来实 现的。例如当你写 x &lt; 3 时，NumPy 内部会使用 np.less(x, 3)</p><h2 id="操作布尔数组"><a href="#操作布尔数组" class="headerlink" title="操作布尔数组"></a>操作布尔数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">x = rng.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(np.count_nonzero(x &lt; <span class="number">6</span>))<span class="comment">#有多少值小于6</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(x &lt; <span class="number">6</span>, axis=<span class="number">1</span>))<span class="comment">#每行有多少个值小于6，小于6的值为1</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(x &gt; <span class="number">8</span>))<span class="comment">#有没有值大于8</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x == <span class="number">6</span>))<span class="comment">#是否所有值都等于6</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x &lt; <span class="number">8</span>, axis=<span class="number">1</span>))<span class="comment">#是否每一行的所有值都小于8</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[[<span class="number">5</span> <span class="number">0</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">6</span>]]</span><br><span class="line"><span class="number">8</span></span><br><span class="line">[<span class="number">4</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">[ <span class="literal">True</span> <span class="literal">False</span>  <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/18/numpy/%E6%AF%94%E8%BE%83%EF%BC%8C%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向对象高级Ⅱ</title>
      <link>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/</link>
      <guid>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/</guid>
      <pubDate>Fri, 17 Sep 2021 14:03:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;枚举类&quot;&gt;&lt;a href=&quot;#枚举类&quot; class=&quot;headerlink&quot; title=&quot;枚举类&quot;&gt;&lt;/a&gt;枚举类&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>,(<span class="string">&#x27;Jan&#x27;</span>,<span class="string">&#x27;Feb&#x27;</span>,<span class="string">&#x27;Mar&#x27;</span>,<span class="string">&#x27;Apr&#x27;</span>,<span class="string">&#x27;May&#x27;</span>,<span class="string">&#x27;Jun&#x27;</span>,<span class="string">&#x27;Jul&#x27;</span>,<span class="string">&#x27;Aug&#x27;</span>,<span class="string">&#x27;Sep&#x27;</span>,<span class="string">&#x27;Oct&#x27;</span>,<span class="string">&#x27;Nov&#x27;</span>,<span class="string">&#x27;Dec&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(a, <span class="string">&#x27;=&gt;&#x27;</span>, b, <span class="string">&#x27;,&#x27;</span>, b.value )</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Jan =&gt; Month.Jan , <span class="number">1</span></span><br><span class="line">Feb =&gt; Month.Feb , <span class="number">2</span></span><br><span class="line">Mar =&gt; Month.Mar , <span class="number">3</span></span><br><span class="line">Apr =&gt; Month.Apr , <span class="number">4</span></span><br><span class="line">May =&gt; Month.May , <span class="number">5</span></span><br><span class="line">Jun =&gt; Month.Jun , <span class="number">6</span></span><br><span class="line">Jul =&gt; Month.Jul , <span class="number">7</span></span><br><span class="line">Aug =&gt; Month.Aug , <span class="number">8</span></span><br><span class="line">Sep =&gt; Month.Sep , <span class="number">9</span></span><br><span class="line">Oct =&gt; Month.Oct , <span class="number">10</span></span><br><span class="line">Nov =&gt; Month.Nov , <span class="number">11</span></span><br><span class="line">Dec =&gt; Month.Dec , <span class="number">12</span>    </span><br></pre></td></tr></table></figure><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份。好处是简单，缺点是类型是int，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了Enum类来实现这个功能。这样我们就获得了Month类型的枚举类，可以直接使用Month.Jan来引用一个常量，或者枚举它的所有成员。不能Month.Jan.value进行赋值。</p><p>value属性则是自动赋给成员的int常量，默认从1开始计数。</p><p>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：@unique装饰器可以帮助我们检查保证没有重复值。访问这些枚举类型可以有若干种方法：可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,unique</span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    Sun = <span class="number">0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(Weekday.Sun)</span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Tue&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Weekday.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&#x27;=&gt;&#x27;</span>, member)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Weekday.Sun</span><br><span class="line">Weekday.Tue</span><br><span class="line">Weekday.Mon</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat    </span><br></pre></td></tr></table></figure><h2 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h2><h3 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self, name = <span class="string">&#x27;world&#x27;</span></span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s.&#x27;</span> %name )</span><br><span class="line"><span class="comment">#test2</span></span><br><span class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> Hello</span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">test1</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。比方说我们要定义一个Hello的class，就写一个test3.py模块. 当Python解释器载入test3模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个Hello的class对象。Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello</p><p>type()函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过type()函数创建出Hello类，而无需通过class Hello(object)…的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">self, name = <span class="string">&#x27;world&#x27;</span></span>):</span><span class="comment">#定义函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s.&#x27;</span> %name )</span><br><span class="line">Hello = <span class="built_in">type</span>(<span class="string">&#x27;Hello&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(hello = fn))<span class="comment">#创建Hello class</span></span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><p>metaclass直译就是元类的意思，我们创造一个实例需要先定义一个类，所以我们要创建一个类，就需要定义一个元类metaclass。连接起来就是：先定义metaclass，就可以创建类，最后创建实例。metaclass允许你创建类或者修改类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, attrs </span>):</span></span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>(<span class="params"><span class="built_in">list</span>, metaclass = ListMetaclass</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">L = MyList()</span><br><span class="line">L.add(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个add方法：定义ListMetaclass，按照默认习惯metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass。有了ListMetaclass，我们在定义类的时候还要指示使ListMetaclass来定制类，传入关键字参数metaclass。当我们传入关键字参数metaclass时，魔术就生效了，它指示Python解释器在创建MyList时，要通过ListMetaclass.__new__()来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p>__new__()方法接收到的参数依次是：1.当前准备创建的类的对象；2.类的名字；3.类继承的父类集合；4.类的方法集合。</p><p>如果把Mylist中的list去掉，会报如下错误。显示没有append()这个函数，因为此时这个list是作为__new__()方法的输入参数，作为所要创建类的继承的父类集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test2.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    L.add(<span class="number">1</span>)</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test2.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;<span class="keyword">lambda</span>&gt;</span><br><span class="line">    attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">AttributeError: <span class="string">&#x27;MyList&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;append&#x27;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向对象高级Ⅰ</title>
      <link>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/</link>
      <guid>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/</guid>
      <pubDate>Fri, 17 Sep 2021 12:41:35 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;MethodType&quot;&gt;&lt;a href=&quot;#MethodType&quot; class=&quot;headerlink&quot; title=&quot;MethodType&quot;&gt;&lt;/a&gt;MethodType&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="MethodType"><a href="#MethodType" class="headerlink" title="MethodType"></a>MethodType</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">s = Student()</span><br><span class="line">s.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span>(<span class="params">self,age</span>):</span></span><br><span class="line">    self.age = age</span><br><span class="line">s.set_age = MethodType(set_age,s)</span><br><span class="line">s.set_age(<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_sorce</span>(<span class="params">self,score</span>):</span></span><br><span class="line">    self.score = score</span><br><span class="line">Student.set_score = set_sorce</span><br><span class="line">s.set_score(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>可以直接给实例绑定属性，也可以使用MethodType给实例绑定方法</p><p>MethodType（方法，实例）。但是其他实例不可以使用此方法。如果想要其他实例也可以使用此方法，就要给类绑定方法</p><h2 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用__slots__"></a>使用__slots__</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)<span class="comment">#用tuple定义允许绑定的属性名称</span></span><br><span class="line">s = Student()<span class="comment">#创建新的实例</span></span><br><span class="line">s.name = <span class="string">&#x27;Michael&#x27;</span><span class="comment">#绑定属性name</span></span><br><span class="line">s.age = <span class="number">25</span><span class="comment">#绑定属性age</span></span><br><span class="line"><span class="comment">#s.score = 99#绑定属性score</span></span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraduateStdent</span>(<span class="params">Student</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">g = GraduateStdent()</span><br><span class="line">g.score = <span class="number">9999</span></span><br><span class="line"><span class="built_in">print</span>(g.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">9999</span></span><br></pre></td></tr></table></figure><p>可以使用此关键字限制实例的属性，GraduateStudent作为Student的子类不受__slots__关键字的限制</p><h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._wscore</span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0-100!&#x27;</span>)</span><br><span class="line">        self._wscore = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self._birth = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br></pre></td></tr></table></figure><p>因为想要限制score的范围，又想简便赋值，所以采用装饰器。@property装饰器可以把一个方法变成属性调用的，@property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值。两个函数名称要相同。并且实例绑定的属性名称就是函数名称。因为是把属性转化为方法来执行的如果不设置setter方法，则就只有只读属性。</p><p>补充：@property（获取），@xxx(方法名).srtter(设置）,@xxx.deleter(删除）</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#父类动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span>(<span class="params">Animal</span>):</span><span class="comment">#哺乳动物</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>(<span class="params">Animal</span>):</span><span class="comment">#鸟类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#功能父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Flying...&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Mammal,Runnable</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>用法如图所示，通过多重继承，一个子类就可以同时获得多个父类的所有功能。这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类</p><h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><h3 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__str__和__repr__"></a>__str__和__repr__</h3><p><img src="/images/py/面向对象高级/1.png" style="zoom:50%;"></p><p><img src="/images/py/面向对象高级/2.png" style="zoom:40%;"></p><p>上面打印类对象并不是很友好，显示的是对象的内存地址。此时我们重构 __repr__</p><p>当重构__str__时，此时，直接输出对象（面向开发者）显示对象的内存地址，使用print输入对象显示的是友好提示</p><p><img src="/images/py/面向对象高级/3.png" style="zoom:50%;"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h2 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a>__iter__</h2><p>如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个__iter__()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环</p><h2 id="getitem-方法"><a href="#getitem-方法" class="headerlink" title="__getitem__方法"></a>__getitem__方法</h2><p>Fib实例虽然能作用于for循环，看起来和list有点像但是，把它当成list来使用还是不行。要表现得像list那样按照下标取出元素，需要实现__getitem__()方法.但是list有个神奇的切片方法：对于Fib却报错。原因是__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice，所以要做判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, n </span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span> ):</span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n,<span class="built_in">slice</span>):</span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        L = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(stop):</span><br><span class="line">            <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                L.append(a)</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line">f = Fib()</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">3</span>])</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="getattr-方法"><a href="#getattr-方法" class="headerlink" title="__getattr__方法"></a>__getattr__方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self,attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p>错误信息很清楚地告诉我们，没有找到score这个attribute。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性, 返回函数也是完全可以的,调用形式进行改变。这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self,attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s.name)</span><br><span class="line"><span class="built_in">print</span>(s.score)</span><br><span class="line"><span class="built_in">print</span>(s.age)</span><br><span class="line"><span class="built_in">print</span>(s.age())</span><br><span class="line"><span class="built_in">print</span>(s.ok)</span><br><span class="line"><span class="built_in">print</span>(s.ok())   </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">Michael</span><br><span class="line"><span class="number">99</span></span><br><span class="line">&lt;function Student.__getattr__.&lt;<span class="built_in">locals</span>&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x000002850F3A5160</span>&gt;</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:/VsPython/test1.py&quot;</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(s.ok())</span><br><span class="line">TypeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br></pre></td></tr></table></figure><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="__call__方法"></a>__call__方法</h2><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用instance.method()来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;My name is %s.&#x27;</span>%self.name)</span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">s()</span><br><span class="line">Student(<span class="string">&#x27;Michael&#x27;</span>)()</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/py/">py</category>
      
      
      
      <comments>http://example.com/2021/09/17/py/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E2%85%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>广播</title>
      <link>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/</link>
      <guid>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/</guid>
      <pubDate>Fri, 17 Sep 2021 03:19:04 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;广播介绍&quot;&gt;&lt;a href=&quot;#广播介绍&quot; class=&quot;headerlink&quot; title=&quot;广播介绍&quot;&gt;&lt;/a&gt;广播介绍&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="广播介绍"><a href="#广播介绍" class="headerlink" title="广播介绍"></a>广播介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">M = np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(M+a)个一维数组就被扩展或者广播了。它沿着第二个维度扩展，扩展到匹配 M 数组的形状</span><br><span class="line">b = np.arange(<span class="number">3</span>)[:,np.newaxis]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]]</span><br><span class="line">[[<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span>]]</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p><img src="/images/numpy/广播/1.png" style="zoom:67%;"></p><p>浅色的盒子表示广播的值。同样需要注意的是，这个额外的内存并没有 在实际操作中进行分配，但是这样的想象方式更方便我们从概念上理解。</p><p>以下属于不兼容的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">M = np.ones((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(M+a)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">    <span class="built_in">print</span>(M+a)</span><br><span class="line">ValueError: operands could <span class="keyword">not</span> be broadcast together <span class="keyword">with</span> shapes (<span class="number">3</span>,<span class="number">2</span>) (<span class="number">3</span>,)</span><br></pre></td></tr></table></figure><h2 id="广播实际应用"><a href="#广播实际应用" class="headerlink" title="广播实际应用"></a>广播实际应用</h2><h3 id="数组归一化处理"><a href="#数组归一化处理" class="headerlink" title="数组归一化处理"></a>数组归一化处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.random.random((<span class="number">10</span>, <span class="number">3</span>))<span class="comment">#均匀分布的10*3数组</span></span><br><span class="line">Xmean = X.mean(<span class="number">0</span>)<span class="comment">#将列维度聚合求均值</span></span><br><span class="line"><span class="built_in">print</span>(X,Xmean)</span><br><span class="line">X_centered = X - Xmean<span class="comment">#广播实现归一化</span></span><br><span class="line"><span class="built_in">print</span>(X_centered)</span><br><span class="line"><span class="built_in">print</span>(X_centered.mean(<span class="number">0</span>))<span class="comment">#验证是否归一化</span></span><br></pre></td></tr></table></figure><h3 id="画一个二维函数"><a href="#画一个二维函数" class="headerlink" title="画一个二维函数"></a>画一个二维函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">50</span>)</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">50</span>)[:, np.newaxis]</span><br><span class="line">z = np.sin(x) ** <span class="number">10</span> + np.cos(<span class="number">10</span> + y * x) * np.cos(x)</span><br><span class="line">plt.imshow(z, origin=<span class="string">&#x27;lower&#x27;</span>, extent=[<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>],cmap=<span class="string">&#x27;viridis&#x27;</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/numpy/广播/2.png" style="zoom:67%;"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/17/numpy/%E5%B9%BF%E6%92%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>聚合</title>
      <link>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/</link>
      <guid>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/</guid>
      <pubDate>Fri, 17 Sep 2021 02:49:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;求和&quot;&gt;&lt;a href=&quot;#求和&quot; class=&quot;headerlink&quot; title=&quot;求和&quot;&gt;&lt;/a&gt;求和&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">L = np.random.random(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(L))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">45.0698150033394</span></span><br></pre></td></tr></table></figure><h2 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(big_array), np.<span class="built_in">max</span>(big_array))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">2.0632153620026017e-06</span> <span class="number">0.9999991348477495</span></span><br></pre></td></tr></table></figure><p>对于 min、max、sum 和其他 NumPy 聚合，一种更简洁的语法形式是数 组对象直接调用这些方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line"><span class="built_in">print</span>(big_array.<span class="built_in">min</span>(), big_array.<span class="built_in">max</span>(), big_array.<span class="built_in">sum</span>())</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">4.051526761639224e-06</span> <span class="number">0.9999997959904566</span> <span class="number">500274.7846662359</span></span><br></pre></td></tr></table></figure><h2 id="多维度聚合"><a href="#多维度聚合" class="headerlink" title="多维度聚合"></a>多维度聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.core.arrayprint <span class="keyword">import</span> printoptions</span><br><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#print(M)</span></span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">min</span>(axis=<span class="number">0</span>))<span class="comment">#每一列的最小值</span></span><br><span class="line"><span class="built_in">print</span>(M.<span class="built_in">max</span>(axis=<span class="number">1</span>))<span class="comment">#每一行的最小值</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">7.863562459365775</span></span><br><span class="line">[<span class="number">0.58394473</span> <span class="number">0.41008368</span> <span class="number">0.65217043</span> <span class="number">0.28077708</span>]</span><br><span class="line">[<span class="number">0.71819992</span> <span class="number">0.91296865</span> <span class="number">0.93953933</span>]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/17/numpy/%E8%81%9A%E5%90%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通用函数</title>
      <link>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <guid>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Sun, 12 Sep 2021 13:00:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;通用函数&quot;&gt;&lt;a href=&quot;#通用函数&quot; class=&quot;headerlink&quot; title=&quot;通用函数&quot;&gt;&lt;/a&gt;通用函数&lt;/h1&gt;&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>对应的通用函数</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>np.add</td><td>//</td></tr><tr><td>-</td><td>np.subtract</td><td>//</td></tr><tr><td>-</td><td>np.negative</td><td>//</td></tr><tr><td>*</td><td>np.multiply</td><td>//</td></tr><tr><td>/</td><td>np.divide</td><td>//</td></tr><tr><td>//</td><td>np.floor_divide</td><td>3 // 2 = 1</td></tr><tr><td>**</td><td>np.power</td><td>2 ** 3 = 8</td></tr><tr><td>%</td><td>np.mod</td><td>//</td></tr></tbody></table></div><h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">3</span> - <span class="number">4j</span>, <span class="number">4</span> - <span class="number">3j</span>, <span class="number">2</span> + <span class="number">0j</span>, <span class="number">1</span> + <span class="number">1j</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">5.</span>         <span class="number">5.</span>         <span class="number">2.</span>         <span class="number">1.41421356</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[<span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;theta = &quot;</span>, theta)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sin(theta) = &quot;</span>, np.sin(theta))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cos(theta) = &quot;</span>, np.cos(theta))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tan(theta) = &quot;</span>, np.tan(theta))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">theta =  [<span class="number">0.</span>         <span class="number">1.57079633</span> <span class="number">3.14159265</span>]</span><br><span class="line">sin(theta) =  [<span class="number">0.0000000e+00</span> <span class="number">1.0000000e+00</span> <span class="number">1.2246468e-16</span>]</span><br><span class="line">cos(theta) =  [ <span class="number">1.000000e+00</span>  <span class="number">6.123234e-17</span> -<span class="number">1.000000e+00</span>]</span><br><span class="line">tan(theta) =  [ <span class="number">0.00000000e+00</span>  <span class="number">1.63312394e+16</span> -<span class="number">1.22464680e-16</span>]</span><br></pre></td></tr></table></figure><h2 id="指数和对数"><a href="#指数和对数" class="headerlink" title="指数和对数"></a>指数和对数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e^x =&quot;</span>, np.exp(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2^x =&quot;</span>, np.exp2(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3^x =&quot;</span>, np.power(<span class="number">3</span>, x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">e^x = [ <span class="number">2.71828183</span>  <span class="number">7.3890561</span>  <span class="number">20.08553692</span>]</span><br><span class="line"><span class="number">2</span>^x = [<span class="number">2.</span> <span class="number">4.</span> <span class="number">8.</span>]</span><br><span class="line"><span class="number">3</span>^x = [ <span class="number">3</span>  <span class="number">9</span> <span class="number">27</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ln(x) =&quot;</span>, np.log(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log2(x) =&quot;</span>, np.log2(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log10(x) =&quot;</span>, np.log10(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">e^x = [ <span class="number">2.71828183</span>  <span class="number">7.3890561</span>  <span class="number">20.08553692</span>]</span><br><span class="line"><span class="number">2</span>^x = [<span class="number">2.</span> <span class="number">4.</span> <span class="number">8.</span>]</span><br><span class="line"><span class="number">3</span>^x = [ <span class="number">3</span>  <span class="number">9</span> <span class="number">27</span>]</span><br></pre></td></tr></table></figure><p>还有一些特殊的版本，对于非常小的输入值可以保持较好的精度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0</span>, <span class="number">0.001</span>, <span class="number">0.01</span>, <span class="number">0.1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;exp(x) - 1 =&quot;</span>, np.expm1(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log(1 + x) =&quot;</span>, np.log1p(x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">exp(x) - <span class="number">1</span> = [<span class="number">0.</span>         <span class="number">0.0010005</span>  <span class="number">0.01005017</span> <span class="number">0.10517092</span>]</span><br><span class="line">log(<span class="number">1</span> + x) = [<span class="number">0.</span>         <span class="number">0.0009995</span>  <span class="number">0.00995033</span> <span class="number">0.09531018</span>]</span><br></pre></td></tr></table></figure><h2 id="专用的通用函数"><a href="#专用的通用函数" class="headerlink" title="专用的通用函数"></a>专用的通用函数</h2><p><code>from scipy import special</code></p><h1 id="高级通用函数特性"><a href="#高级通用函数特性" class="headerlink" title="高级通用函数特性"></a>高级通用函数特性</h1><h2 id="指定输出"><a href="#指定输出" class="headerlink" title="指定输出"></a>指定输出</h2><p>所有的通用函数都可以通过 out 参数 来指定计算结果的存放位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>, x, out=y[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">2.</span>  <span class="number">0.</span>  <span class="number">4.</span>  <span class="number">0.</span>  <span class="number">8.</span>  <span class="number">0.</span> <span class="number">16.</span>  <span class="number">0.</span>]</span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">#一个 reduce 方法会对给定的元素和操作重复执行，直至得到单个的结果。</span></span><br><span class="line"><span class="built_in">print</span>(np.add.reduce(x))</span><br><span class="line"><span class="built_in">print</span>( np.multiply.reduce(x))</span><br><span class="line"><span class="comment">#如果需要存储每次计算的中间结果，可以使用 accumulate：</span></span><br><span class="line"><span class="built_in">print</span>(np.add.accumulate(x))</span><br><span class="line"><span class="built_in">print</span>(np.multiply.accumulate(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line">[ <span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line">[  <span class="number">1</span>   <span class="number">2</span>   <span class="number">6</span>  <span class="number">24</span> <span class="number">120</span>]</span><br></pre></td></tr></table></figure><h2 id="外积"><a href="#外积" class="headerlink" title="外积"></a>外积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(np.multiply.outer(x, x))</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span> <span class="number">12</span> <span class="number">15</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span>]</span><br><span class="line"> [ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span> <span class="number">25</span>]]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/numpy/">numpy</category>
      
      
      
      <comments>http://example.com/2021/09/12/numpy/%E9%80%9A%E7%94%A8%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
